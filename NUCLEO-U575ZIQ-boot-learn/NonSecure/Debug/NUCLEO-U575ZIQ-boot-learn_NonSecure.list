
NUCLEO-U575ZIQ-boot-learn_NonSecure.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08100000  08100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ca4  08100238  08100238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08101edc  08101edc  00002edc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08101f2c  08101f2c  00002f2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  08101f30  08101f30  00002f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000009  20040000  08101f34  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  2004000c  08101f3d  0000300c  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2004002c  08101f3d  0000302c  2**0
                  ALLOC
  8 .ARM.attributes 00000036  00000000  00000000  00003009  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000525a  00000000  00000000  0000303f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00000e34  00000000  00000000  00008299  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000610  00000000  00000000  000090d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000474  00000000  00000000  000096e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0002f218  00000000  00000000  00009b54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   000066ed  00000000  00000000  00038d6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00128661  00000000  00000000  0003f459  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  00167aba  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001708  00000000  00000000  00167b00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000007f  00000000  00000000  00169208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08100238 <__do_global_dtors_aux>:
 8100238:	b510      	push	{r4, lr}
 810023a:	4c05      	ldr	r4, [pc, #20]	@ (8100250 <__do_global_dtors_aux+0x18>)
 810023c:	7823      	ldrb	r3, [r4, #0]
 810023e:	b933      	cbnz	r3, 810024e <__do_global_dtors_aux+0x16>
 8100240:	4b04      	ldr	r3, [pc, #16]	@ (8100254 <__do_global_dtors_aux+0x1c>)
 8100242:	b113      	cbz	r3, 810024a <__do_global_dtors_aux+0x12>
 8100244:	4804      	ldr	r0, [pc, #16]	@ (8100258 <__do_global_dtors_aux+0x20>)
 8100246:	f3af 8000 	nop.w
 810024a:	2301      	movs	r3, #1
 810024c:	7023      	strb	r3, [r4, #0]
 810024e:	bd10      	pop	{r4, pc}
 8100250:	2004000c 	.word	0x2004000c
 8100254:	00000000 	.word	0x00000000
 8100258:	08101ec4 	.word	0x08101ec4

0810025c <frame_dummy>:
 810025c:	b508      	push	{r3, lr}
 810025e:	4b03      	ldr	r3, [pc, #12]	@ (810026c <frame_dummy+0x10>)
 8100260:	b11b      	cbz	r3, 810026a <frame_dummy+0xe>
 8100262:	4903      	ldr	r1, [pc, #12]	@ (8100270 <frame_dummy+0x14>)
 8100264:	4803      	ldr	r0, [pc, #12]	@ (8100274 <frame_dummy+0x18>)
 8100266:	f3af 8000 	nop.w
 810026a:	bd08      	pop	{r3, pc}
 810026c:	00000000 	.word	0x00000000
 8100270:	20040010 	.word	0x20040010
 8100274:	08101ec4 	.word	0x08101ec4

08100278 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8100278:	b580      	push	{r7, lr}
 810027a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 810027c:	f000 f8bc 	bl	81003f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8100280:	f000 f802 	bl	8100288 <SystemClock_Config>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8100284:	bf00      	nop
 8100286:	e7fd      	b.n	8100284 <main+0xc>

08100288 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8100288:	b580      	push	{r7, lr}
 810028a:	b09e      	sub	sp, #120	@ 0x78
 810028c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 810028e:	f107 0318 	add.w	r3, r7, #24
 8100292:	2260      	movs	r2, #96	@ 0x60
 8100294:	2100      	movs	r1, #0
 8100296:	4618      	mov	r0, r3
 8100298:	f001 fde8 	bl	8101e6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 810029c:	463b      	mov	r3, r7
 810029e:	2200      	movs	r2, #0
 81002a0:	601a      	str	r2, [r3, #0]
 81002a2:	605a      	str	r2, [r3, #4]
 81002a4:	609a      	str	r2, [r3, #8]
 81002a6:	60da      	str	r2, [r3, #12]
 81002a8:	611a      	str	r2, [r3, #16]
 81002aa:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE4) != HAL_OK)
 81002ac:	2000      	movs	r0, #0
 81002ae:	f000 fad1 	bl	8100854 <HAL_PWREx_ControlVoltageScaling>
 81002b2:	4603      	mov	r3, r0
 81002b4:	2b00      	cmp	r3, #0
 81002b6:	d001      	beq.n	81002bc <SystemClock_Config+0x34>
  {
    Error_Handler();
 81002b8:	f000 f82f 	bl	810031a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 81002bc:	2310      	movs	r3, #16
 81002be:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 81002c0:	2301      	movs	r3, #1
 81002c2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 81002c4:	2310      	movs	r3, #16
 81002c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 81002c8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 81002cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 81002ce:	2300      	movs	r3, #0
 81002d0:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 81002d2:	f107 0318 	add.w	r3, r7, #24
 81002d6:	4618      	mov	r0, r3
 81002d8:	f000 fb58 	bl	810098c <HAL_RCC_OscConfig>
 81002dc:	4603      	mov	r3, r0
 81002de:	2b00      	cmp	r3, #0
 81002e0:	d001      	beq.n	81002e6 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 81002e2:	f000 f81a 	bl	810031a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 81002e6:	231f      	movs	r3, #31
 81002e8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 81002ea:	2300      	movs	r3, #0
 81002ec:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 81002ee:	2300      	movs	r3, #0
 81002f0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 81002f2:	2300      	movs	r3, #0
 81002f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 81002f6:	2300      	movs	r3, #0
 81002f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 81002fa:	2300      	movs	r3, #0
 81002fc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 81002fe:	463b      	mov	r3, r7
 8100300:	2100      	movs	r1, #0
 8100302:	4618      	mov	r0, r3
 8100304:	f001 fa1e 	bl	8101744 <HAL_RCC_ClockConfig>
 8100308:	4603      	mov	r3, r0
 810030a:	2b00      	cmp	r3, #0
 810030c:	d001      	beq.n	8100312 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 810030e:	f000 f804 	bl	810031a <Error_Handler>
  }
}
 8100312:	bf00      	nop
 8100314:	3778      	adds	r7, #120	@ 0x78
 8100316:	46bd      	mov	sp, r7
 8100318:	bd80      	pop	{r7, pc}

0810031a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 810031a:	b480      	push	{r7}
 810031c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 810031e:	b672      	cpsid	i
}
 8100320:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8100322:	bf00      	nop
 8100324:	e7fd      	b.n	8100322 <Error_Handler+0x8>
	...

08100328 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8100328:	b580      	push	{r7, lr}
 810032a:	b082      	sub	sp, #8
 810032c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 810032e:	4b0a      	ldr	r3, [pc, #40]	@ (8100358 <HAL_MspInit+0x30>)
 8100330:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8100334:	4a08      	ldr	r2, [pc, #32]	@ (8100358 <HAL_MspInit+0x30>)
 8100336:	f043 0304 	orr.w	r3, r3, #4
 810033a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 810033e:	4b06      	ldr	r3, [pc, #24]	@ (8100358 <HAL_MspInit+0x30>)
 8100340:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8100344:	f003 0304 	and.w	r3, r3, #4
 8100348:	607b      	str	r3, [r7, #4]
 810034a:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 810034c:	f000 fb0e 	bl	810096c <HAL_PWREx_EnableVddIO2>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8100350:	bf00      	nop
 8100352:	3708      	adds	r7, #8
 8100354:	46bd      	mov	sp, r7
 8100356:	bd80      	pop	{r7, pc}
 8100358:	46020c00 	.word	0x46020c00

0810035c <MemManage_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 810035c:	b480      	push	{r7}
 810035e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8100360:	bf00      	nop
 8100362:	e7fd      	b.n	8100360 <MemManage_Handler+0x4>

08100364 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8100364:	b480      	push	{r7}
 8100366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8100368:	bf00      	nop
 810036a:	e7fd      	b.n	8100368 <UsageFault_Handler+0x4>

0810036c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 810036c:	b480      	push	{r7}
 810036e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8100370:	bf00      	nop
 8100372:	46bd      	mov	sp, r7
 8100374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100378:	4770      	bx	lr

0810037a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 810037a:	b480      	push	{r7}
 810037c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 810037e:	bf00      	nop
 8100380:	46bd      	mov	sp, r7
 8100382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100386:	4770      	bx	lr

08100388 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8100388:	b580      	push	{r7, lr}
 810038a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 810038c:	f000 f8da 	bl	8100544 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8100390:	bf00      	nop
 8100392:	bd80      	pop	{r7, pc}

08100394 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8100394:	b480      	push	{r7}
 8100396:	af00      	add	r7, sp, #0
  /* Nothing done in non-secure */

  /* Non-secure main application shall call SystemCoreClockUpdate() to update */
  /* the SystemCoreClock variable to insure non-secure application relies on  */
  /* the initial clock reference set by secure application.                   */
}
 8100398:	bf00      	nop
 810039a:	46bd      	mov	sp, r7
 810039c:	f85d 7b04 	ldr.w	r7, [sp], #4
 81003a0:	4770      	bx	lr
	...

081003a4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 81003a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 81003dc <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 81003a8:	f7ff fff4 	bl	8100394 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 81003ac:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 81003ae:	e003      	b.n	81003b8 <LoopCopyDataInit>

081003b0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 81003b0:	4b0b      	ldr	r3, [pc, #44]	@ (81003e0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 81003b2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 81003b4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 81003b6:	3104      	adds	r1, #4

081003b8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 81003b8:	480a      	ldr	r0, [pc, #40]	@ (81003e4 <LoopForever+0xa>)
	ldr	r3, =_edata
 81003ba:	4b0b      	ldr	r3, [pc, #44]	@ (81003e8 <LoopForever+0xe>)
	adds	r2, r0, r1
 81003bc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 81003be:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 81003c0:	d3f6      	bcc.n	81003b0 <CopyDataInit>
	ldr	r2, =_sbss
 81003c2:	4a0a      	ldr	r2, [pc, #40]	@ (81003ec <LoopForever+0x12>)
	b	LoopFillZerobss
 81003c4:	e002      	b.n	81003cc <LoopFillZerobss>

081003c6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 81003c6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 81003c8:	f842 3b04 	str.w	r3, [r2], #4

081003cc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 81003cc:	4b08      	ldr	r3, [pc, #32]	@ (81003f0 <LoopForever+0x16>)
	cmp	r2, r3
 81003ce:	429a      	cmp	r2, r3
	bcc	FillZerobss
 81003d0:	d3f9      	bcc.n	81003c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 81003d2:	f001 fd53 	bl	8101e7c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 81003d6:	f7ff ff4f 	bl	8100278 <main>

081003da <LoopForever>:

LoopForever:
    b LoopForever
 81003da:	e7fe      	b.n	81003da <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 81003dc:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 81003e0:	08101f34 	.word	0x08101f34
	ldr	r0, =_sdata
 81003e4:	20040000 	.word	0x20040000
	ldr	r3, =_edata
 81003e8:	20040009 	.word	0x20040009
	ldr	r2, =_sbss
 81003ec:	2004000c 	.word	0x2004000c
	ldr	r3, = _ebss
 81003f0:	2004002c 	.word	0x2004002c

081003f4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 81003f4:	e7fe      	b.n	81003f4 <ADC1_IRQHandler>
	...

081003f8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 81003f8:	b580      	push	{r7, lr}
 81003fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 81003fc:	4b12      	ldr	r3, [pc, #72]	@ (8100448 <HAL_Init+0x50>)
 81003fe:	681b      	ldr	r3, [r3, #0]
 8100400:	4a11      	ldr	r2, [pc, #68]	@ (8100448 <HAL_Init+0x50>)
 8100402:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8100406:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8100408:	2003      	movs	r0, #3
 810040a:	f000 f94a 	bl	81006a2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 810040e:	f001 fb8b 	bl	8101b28 <HAL_RCC_GetSysClockFreq>
 8100412:	4602      	mov	r2, r0
 8100414:	4b0d      	ldr	r3, [pc, #52]	@ (810044c <HAL_Init+0x54>)
 8100416:	6a1b      	ldr	r3, [r3, #32]
 8100418:	f003 030f 	and.w	r3, r3, #15
 810041c:	490c      	ldr	r1, [pc, #48]	@ (8100450 <HAL_Init+0x58>)
 810041e:	5ccb      	ldrb	r3, [r1, r3]
 8100420:	fa22 f303 	lsr.w	r3, r2, r3
 8100424:	4a0b      	ldr	r2, [pc, #44]	@ (8100454 <HAL_Init+0x5c>)
 8100426:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8100428:	2004      	movs	r0, #4
 810042a:	f000 f981 	bl	8100730 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 810042e:	200f      	movs	r0, #15
 8100430:	f000 f812 	bl	8100458 <HAL_InitTick>
 8100434:	4603      	mov	r3, r0
 8100436:	2b00      	cmp	r3, #0
 8100438:	d001      	beq.n	810043e <HAL_Init+0x46>
  {
    return HAL_ERROR;
 810043a:	2301      	movs	r3, #1
 810043c:	e002      	b.n	8100444 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 810043e:	f7ff ff73 	bl	8100328 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8100442:	2300      	movs	r3, #0
}
 8100444:	4618      	mov	r0, r3
 8100446:	bd80      	pop	{r7, pc}
 8100448:	40022000 	.word	0x40022000
 810044c:	46020c00 	.word	0x46020c00
 8100450:	08101edc 	.word	0x08101edc
 8100454:	20040000 	.word	0x20040000

08100458 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8100458:	b580      	push	{r7, lr}
 810045a:	b084      	sub	sp, #16
 810045c:	af00      	add	r7, sp, #0
 810045e:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8100460:	2300      	movs	r3, #0
 8100462:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8100464:	4b33      	ldr	r3, [pc, #204]	@ (8100534 <HAL_InitTick+0xdc>)
 8100466:	781b      	ldrb	r3, [r3, #0]
 8100468:	2b00      	cmp	r3, #0
 810046a:	d101      	bne.n	8100470 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 810046c:	2301      	movs	r3, #1
 810046e:	e05c      	b.n	810052a <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8100470:	4b31      	ldr	r3, [pc, #196]	@ (8100538 <HAL_InitTick+0xe0>)
 8100472:	681b      	ldr	r3, [r3, #0]
 8100474:	f003 0304 	and.w	r3, r3, #4
 8100478:	2b04      	cmp	r3, #4
 810047a:	d10c      	bne.n	8100496 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 810047c:	4b2f      	ldr	r3, [pc, #188]	@ (810053c <HAL_InitTick+0xe4>)
 810047e:	681a      	ldr	r2, [r3, #0]
 8100480:	4b2c      	ldr	r3, [pc, #176]	@ (8100534 <HAL_InitTick+0xdc>)
 8100482:	781b      	ldrb	r3, [r3, #0]
 8100484:	4619      	mov	r1, r3
 8100486:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 810048a:	fbb3 f3f1 	udiv	r3, r3, r1
 810048e:	fbb2 f3f3 	udiv	r3, r2, r3
 8100492:	60fb      	str	r3, [r7, #12]
 8100494:	e037      	b.n	8100506 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8100496:	f000 f9a3 	bl	81007e0 <HAL_SYSTICK_GetCLKSourceConfig>
 810049a:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 810049c:	68bb      	ldr	r3, [r7, #8]
 810049e:	2b02      	cmp	r3, #2
 81004a0:	d023      	beq.n	81004ea <HAL_InitTick+0x92>
 81004a2:	68bb      	ldr	r3, [r7, #8]
 81004a4:	2b02      	cmp	r3, #2
 81004a6:	d82d      	bhi.n	8100504 <HAL_InitTick+0xac>
 81004a8:	68bb      	ldr	r3, [r7, #8]
 81004aa:	2b00      	cmp	r3, #0
 81004ac:	d003      	beq.n	81004b6 <HAL_InitTick+0x5e>
 81004ae:	68bb      	ldr	r3, [r7, #8]
 81004b0:	2b01      	cmp	r3, #1
 81004b2:	d00d      	beq.n	81004d0 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 81004b4:	e026      	b.n	8100504 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 81004b6:	4b21      	ldr	r3, [pc, #132]	@ (810053c <HAL_InitTick+0xe4>)
 81004b8:	681a      	ldr	r2, [r3, #0]
 81004ba:	4b1e      	ldr	r3, [pc, #120]	@ (8100534 <HAL_InitTick+0xdc>)
 81004bc:	781b      	ldrb	r3, [r3, #0]
 81004be:	4619      	mov	r1, r3
 81004c0:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 81004c4:	fbb3 f3f1 	udiv	r3, r3, r1
 81004c8:	fbb2 f3f3 	udiv	r3, r2, r3
 81004cc:	60fb      	str	r3, [r7, #12]
        break;
 81004ce:	e01a      	b.n	8100506 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 81004d0:	4b18      	ldr	r3, [pc, #96]	@ (8100534 <HAL_InitTick+0xdc>)
 81004d2:	781b      	ldrb	r3, [r3, #0]
 81004d4:	461a      	mov	r2, r3
 81004d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 81004da:	fbb3 f3f2 	udiv	r3, r3, r2
 81004de:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 81004e2:	fbb2 f3f3 	udiv	r3, r2, r3
 81004e6:	60fb      	str	r3, [r7, #12]
        break;
 81004e8:	e00d      	b.n	8100506 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 81004ea:	4b12      	ldr	r3, [pc, #72]	@ (8100534 <HAL_InitTick+0xdc>)
 81004ec:	781b      	ldrb	r3, [r3, #0]
 81004ee:	461a      	mov	r2, r3
 81004f0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 81004f4:	fbb3 f3f2 	udiv	r3, r3, r2
 81004f8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 81004fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8100500:	60fb      	str	r3, [r7, #12]
        break;
 8100502:	e000      	b.n	8100506 <HAL_InitTick+0xae>
        break;
 8100504:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8100506:	68f8      	ldr	r0, [r7, #12]
 8100508:	f000 f8f0 	bl	81006ec <HAL_SYSTICK_Config>
 810050c:	4603      	mov	r3, r0
 810050e:	2b00      	cmp	r3, #0
 8100510:	d001      	beq.n	8100516 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8100512:	2301      	movs	r3, #1
 8100514:	e009      	b.n	810052a <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8100516:	2200      	movs	r2, #0
 8100518:	6879      	ldr	r1, [r7, #4]
 810051a:	f04f 30ff 	mov.w	r0, #4294967295
 810051e:	f000 f8cb 	bl	81006b8 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8100522:	4a07      	ldr	r2, [pc, #28]	@ (8100540 <HAL_InitTick+0xe8>)
 8100524:	687b      	ldr	r3, [r7, #4]
 8100526:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8100528:	2300      	movs	r3, #0
}
 810052a:	4618      	mov	r0, r3
 810052c:	3710      	adds	r7, #16
 810052e:	46bd      	mov	sp, r7
 8100530:	bd80      	pop	{r7, pc}
 8100532:	bf00      	nop
 8100534:	20040008 	.word	0x20040008
 8100538:	e000e010 	.word	0xe000e010
 810053c:	20040000 	.word	0x20040000
 8100540:	20040004 	.word	0x20040004

08100544 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8100544:	b480      	push	{r7}
 8100546:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8100548:	4b06      	ldr	r3, [pc, #24]	@ (8100564 <HAL_IncTick+0x20>)
 810054a:	781b      	ldrb	r3, [r3, #0]
 810054c:	461a      	mov	r2, r3
 810054e:	4b06      	ldr	r3, [pc, #24]	@ (8100568 <HAL_IncTick+0x24>)
 8100550:	681b      	ldr	r3, [r3, #0]
 8100552:	4413      	add	r3, r2
 8100554:	4a04      	ldr	r2, [pc, #16]	@ (8100568 <HAL_IncTick+0x24>)
 8100556:	6013      	str	r3, [r2, #0]
}
 8100558:	bf00      	nop
 810055a:	46bd      	mov	sp, r7
 810055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100560:	4770      	bx	lr
 8100562:	bf00      	nop
 8100564:	20040008 	.word	0x20040008
 8100568:	20040028 	.word	0x20040028

0810056c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 810056c:	b480      	push	{r7}
 810056e:	af00      	add	r7, sp, #0
  return uwTick;
 8100570:	4b03      	ldr	r3, [pc, #12]	@ (8100580 <HAL_GetTick+0x14>)
 8100572:	681b      	ldr	r3, [r3, #0]
}
 8100574:	4618      	mov	r0, r3
 8100576:	46bd      	mov	sp, r7
 8100578:	f85d 7b04 	ldr.w	r7, [sp], #4
 810057c:	4770      	bx	lr
 810057e:	bf00      	nop
 8100580:	20040028 	.word	0x20040028

08100584 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8100584:	b480      	push	{r7}
 8100586:	b085      	sub	sp, #20
 8100588:	af00      	add	r7, sp, #0
 810058a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 810058c:	687b      	ldr	r3, [r7, #4]
 810058e:	f003 0307 	and.w	r3, r3, #7
 8100592:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8100594:	4b0c      	ldr	r3, [pc, #48]	@ (81005c8 <__NVIC_SetPriorityGrouping+0x44>)
 8100596:	68db      	ldr	r3, [r3, #12]
 8100598:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 810059a:	68ba      	ldr	r2, [r7, #8]
 810059c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 81005a0:	4013      	ands	r3, r2
 81005a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 81005a4:	68fb      	ldr	r3, [r7, #12]
 81005a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 81005a8:	68bb      	ldr	r3, [r7, #8]
 81005aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 81005ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 81005b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81005b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 81005b6:	4a04      	ldr	r2, [pc, #16]	@ (81005c8 <__NVIC_SetPriorityGrouping+0x44>)
 81005b8:	68bb      	ldr	r3, [r7, #8]
 81005ba:	60d3      	str	r3, [r2, #12]
}
 81005bc:	bf00      	nop
 81005be:	3714      	adds	r7, #20
 81005c0:	46bd      	mov	sp, r7
 81005c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81005c6:	4770      	bx	lr
 81005c8:	e000ed00 	.word	0xe000ed00

081005cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 81005cc:	b480      	push	{r7}
 81005ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 81005d0:	4b04      	ldr	r3, [pc, #16]	@ (81005e4 <__NVIC_GetPriorityGrouping+0x18>)
 81005d2:	68db      	ldr	r3, [r3, #12]
 81005d4:	0a1b      	lsrs	r3, r3, #8
 81005d6:	f003 0307 	and.w	r3, r3, #7
}
 81005da:	4618      	mov	r0, r3
 81005dc:	46bd      	mov	sp, r7
 81005de:	f85d 7b04 	ldr.w	r7, [sp], #4
 81005e2:	4770      	bx	lr
 81005e4:	e000ed00 	.word	0xe000ed00

081005e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 81005e8:	b480      	push	{r7}
 81005ea:	b083      	sub	sp, #12
 81005ec:	af00      	add	r7, sp, #0
 81005ee:	4603      	mov	r3, r0
 81005f0:	6039      	str	r1, [r7, #0]
 81005f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 81005f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 81005f8:	2b00      	cmp	r3, #0
 81005fa:	db0a      	blt.n	8100612 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81005fc:	683b      	ldr	r3, [r7, #0]
 81005fe:	b2da      	uxtb	r2, r3
 8100600:	490c      	ldr	r1, [pc, #48]	@ (8100634 <__NVIC_SetPriority+0x4c>)
 8100602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8100606:	0112      	lsls	r2, r2, #4
 8100608:	b2d2      	uxtb	r2, r2
 810060a:	440b      	add	r3, r1
 810060c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8100610:	e00a      	b.n	8100628 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8100612:	683b      	ldr	r3, [r7, #0]
 8100614:	b2da      	uxtb	r2, r3
 8100616:	4908      	ldr	r1, [pc, #32]	@ (8100638 <__NVIC_SetPriority+0x50>)
 8100618:	79fb      	ldrb	r3, [r7, #7]
 810061a:	f003 030f 	and.w	r3, r3, #15
 810061e:	3b04      	subs	r3, #4
 8100620:	0112      	lsls	r2, r2, #4
 8100622:	b2d2      	uxtb	r2, r2
 8100624:	440b      	add	r3, r1
 8100626:	761a      	strb	r2, [r3, #24]
}
 8100628:	bf00      	nop
 810062a:	370c      	adds	r7, #12
 810062c:	46bd      	mov	sp, r7
 810062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100632:	4770      	bx	lr
 8100634:	e000e100 	.word	0xe000e100
 8100638:	e000ed00 	.word	0xe000ed00

0810063c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 810063c:	b480      	push	{r7}
 810063e:	b089      	sub	sp, #36	@ 0x24
 8100640:	af00      	add	r7, sp, #0
 8100642:	60f8      	str	r0, [r7, #12]
 8100644:	60b9      	str	r1, [r7, #8]
 8100646:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8100648:	68fb      	ldr	r3, [r7, #12]
 810064a:	f003 0307 	and.w	r3, r3, #7
 810064e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8100650:	69fb      	ldr	r3, [r7, #28]
 8100652:	f1c3 0307 	rsb	r3, r3, #7
 8100656:	2b04      	cmp	r3, #4
 8100658:	bf28      	it	cs
 810065a:	2304      	movcs	r3, #4
 810065c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 810065e:	69fb      	ldr	r3, [r7, #28]
 8100660:	3304      	adds	r3, #4
 8100662:	2b06      	cmp	r3, #6
 8100664:	d902      	bls.n	810066c <NVIC_EncodePriority+0x30>
 8100666:	69fb      	ldr	r3, [r7, #28]
 8100668:	3b03      	subs	r3, #3
 810066a:	e000      	b.n	810066e <NVIC_EncodePriority+0x32>
 810066c:	2300      	movs	r3, #0
 810066e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8100670:	f04f 32ff 	mov.w	r2, #4294967295
 8100674:	69bb      	ldr	r3, [r7, #24]
 8100676:	fa02 f303 	lsl.w	r3, r2, r3
 810067a:	43da      	mvns	r2, r3
 810067c:	68bb      	ldr	r3, [r7, #8]
 810067e:	401a      	ands	r2, r3
 8100680:	697b      	ldr	r3, [r7, #20]
 8100682:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8100684:	f04f 31ff 	mov.w	r1, #4294967295
 8100688:	697b      	ldr	r3, [r7, #20]
 810068a:	fa01 f303 	lsl.w	r3, r1, r3
 810068e:	43d9      	mvns	r1, r3
 8100690:	687b      	ldr	r3, [r7, #4]
 8100692:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8100694:	4313      	orrs	r3, r2
         );
}
 8100696:	4618      	mov	r0, r3
 8100698:	3724      	adds	r7, #36	@ 0x24
 810069a:	46bd      	mov	sp, r7
 810069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 81006a0:	4770      	bx	lr

081006a2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81006a2:	b580      	push	{r7, lr}
 81006a4:	b082      	sub	sp, #8
 81006a6:	af00      	add	r7, sp, #0
 81006a8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 81006aa:	6878      	ldr	r0, [r7, #4]
 81006ac:	f7ff ff6a 	bl	8100584 <__NVIC_SetPriorityGrouping>
}
 81006b0:	bf00      	nop
 81006b2:	3708      	adds	r7, #8
 81006b4:	46bd      	mov	sp, r7
 81006b6:	bd80      	pop	{r7, pc}

081006b8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81006b8:	b580      	push	{r7, lr}
 81006ba:	b086      	sub	sp, #24
 81006bc:	af00      	add	r7, sp, #0
 81006be:	4603      	mov	r3, r0
 81006c0:	60b9      	str	r1, [r7, #8]
 81006c2:	607a      	str	r2, [r7, #4]
 81006c4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 81006c6:	f7ff ff81 	bl	81005cc <__NVIC_GetPriorityGrouping>
 81006ca:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 81006cc:	687a      	ldr	r2, [r7, #4]
 81006ce:	68b9      	ldr	r1, [r7, #8]
 81006d0:	6978      	ldr	r0, [r7, #20]
 81006d2:	f7ff ffb3 	bl	810063c <NVIC_EncodePriority>
 81006d6:	4602      	mov	r2, r0
 81006d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 81006dc:	4611      	mov	r1, r2
 81006de:	4618      	mov	r0, r3
 81006e0:	f7ff ff82 	bl	81005e8 <__NVIC_SetPriority>
}
 81006e4:	bf00      	nop
 81006e6:	3718      	adds	r7, #24
 81006e8:	46bd      	mov	sp, r7
 81006ea:	bd80      	pop	{r7, pc}

081006ec <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 81006ec:	b480      	push	{r7}
 81006ee:	b083      	sub	sp, #12
 81006f0:	af00      	add	r7, sp, #0
 81006f2:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 81006f4:	687b      	ldr	r3, [r7, #4]
 81006f6:	3b01      	subs	r3, #1
 81006f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 81006fc:	d301      	bcc.n	8100702 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 81006fe:	2301      	movs	r3, #1
 8100700:	e00d      	b.n	810071e <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8100702:	4a0a      	ldr	r2, [pc, #40]	@ (810072c <HAL_SYSTICK_Config+0x40>)
 8100704:	687b      	ldr	r3, [r7, #4]
 8100706:	3b01      	subs	r3, #1
 8100708:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 810070a:	4b08      	ldr	r3, [pc, #32]	@ (810072c <HAL_SYSTICK_Config+0x40>)
 810070c:	2200      	movs	r2, #0
 810070e:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8100710:	4b06      	ldr	r3, [pc, #24]	@ (810072c <HAL_SYSTICK_Config+0x40>)
 8100712:	681b      	ldr	r3, [r3, #0]
 8100714:	4a05      	ldr	r2, [pc, #20]	@ (810072c <HAL_SYSTICK_Config+0x40>)
 8100716:	f043 0303 	orr.w	r3, r3, #3
 810071a:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 810071c:	2300      	movs	r3, #0
}
 810071e:	4618      	mov	r0, r3
 8100720:	370c      	adds	r7, #12
 8100722:	46bd      	mov	sp, r7
 8100724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100728:	4770      	bx	lr
 810072a:	bf00      	nop
 810072c:	e000e010 	.word	0xe000e010

08100730 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8100730:	b480      	push	{r7}
 8100732:	b083      	sub	sp, #12
 8100734:	af00      	add	r7, sp, #0
 8100736:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8100738:	687b      	ldr	r3, [r7, #4]
 810073a:	2b04      	cmp	r3, #4
 810073c:	d844      	bhi.n	81007c8 <HAL_SYSTICK_CLKSourceConfig+0x98>
 810073e:	a201      	add	r2, pc, #4	@ (adr r2, 8100744 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8100740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8100744:	08100767 	.word	0x08100767
 8100748:	08100785 	.word	0x08100785
 810074c:	081007a7 	.word	0x081007a7
 8100750:	081007c9 	.word	0x081007c9
 8100754:	08100759 	.word	0x08100759
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8100758:	4b1f      	ldr	r3, [pc, #124]	@ (81007d8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 810075a:	681b      	ldr	r3, [r3, #0]
 810075c:	4a1e      	ldr	r2, [pc, #120]	@ (81007d8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 810075e:	f043 0304 	orr.w	r3, r3, #4
 8100762:	6013      	str	r3, [r2, #0]
      break;
 8100764:	e031      	b.n	81007ca <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8100766:	4b1c      	ldr	r3, [pc, #112]	@ (81007d8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8100768:	681b      	ldr	r3, [r3, #0]
 810076a:	4a1b      	ldr	r2, [pc, #108]	@ (81007d8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 810076c:	f023 0304 	bic.w	r3, r3, #4
 8100770:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8100772:	4b1a      	ldr	r3, [pc, #104]	@ (81007dc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8100774:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100778:	4a18      	ldr	r2, [pc, #96]	@ (81007dc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 810077a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 810077e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8100782:	e022      	b.n	81007ca <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8100784:	4b14      	ldr	r3, [pc, #80]	@ (81007d8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8100786:	681b      	ldr	r3, [r3, #0]
 8100788:	4a13      	ldr	r2, [pc, #76]	@ (81007d8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 810078a:	f023 0304 	bic.w	r3, r3, #4
 810078e:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8100790:	4b12      	ldr	r3, [pc, #72]	@ (81007dc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8100792:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100796:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 810079a:	4a10      	ldr	r2, [pc, #64]	@ (81007dc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 810079c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 81007a0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 81007a4:	e011      	b.n	81007ca <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 81007a6:	4b0c      	ldr	r3, [pc, #48]	@ (81007d8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 81007a8:	681b      	ldr	r3, [r3, #0]
 81007aa:	4a0b      	ldr	r2, [pc, #44]	@ (81007d8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 81007ac:	f023 0304 	bic.w	r3, r3, #4
 81007b0:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 81007b2:	4b0a      	ldr	r3, [pc, #40]	@ (81007dc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 81007b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81007b8:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 81007bc:	4a07      	ldr	r2, [pc, #28]	@ (81007dc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 81007be:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 81007c2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 81007c6:	e000      	b.n	81007ca <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 81007c8:	bf00      	nop
  }
}
 81007ca:	bf00      	nop
 81007cc:	370c      	adds	r7, #12
 81007ce:	46bd      	mov	sp, r7
 81007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81007d4:	4770      	bx	lr
 81007d6:	bf00      	nop
 81007d8:	e000e010 	.word	0xe000e010
 81007dc:	46020c00 	.word	0x46020c00

081007e0 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 81007e0:	b480      	push	{r7}
 81007e2:	b083      	sub	sp, #12
 81007e4:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 81007e6:	4b19      	ldr	r3, [pc, #100]	@ (810084c <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 81007e8:	681b      	ldr	r3, [r3, #0]
 81007ea:	f003 0304 	and.w	r3, r3, #4
 81007ee:	2b00      	cmp	r3, #0
 81007f0:	d002      	beq.n	81007f8 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 81007f2:	2304      	movs	r3, #4
 81007f4:	607b      	str	r3, [r7, #4]
 81007f6:	e021      	b.n	810083c <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 81007f8:	4b15      	ldr	r3, [pc, #84]	@ (8100850 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 81007fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81007fe:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8100802:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8100804:	683b      	ldr	r3, [r7, #0]
 8100806:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 810080a:	d011      	beq.n	8100830 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 810080c:	683b      	ldr	r3, [r7, #0]
 810080e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8100812:	d810      	bhi.n	8100836 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 8100814:	683b      	ldr	r3, [r7, #0]
 8100816:	2b00      	cmp	r3, #0
 8100818:	d004      	beq.n	8100824 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 810081a:	683b      	ldr	r3, [r7, #0]
 810081c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8100820:	d003      	beq.n	810082a <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8100822:	e008      	b.n	8100836 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8100824:	2300      	movs	r3, #0
 8100826:	607b      	str	r3, [r7, #4]
        break;
 8100828:	e008      	b.n	810083c <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 810082a:	2301      	movs	r3, #1
 810082c:	607b      	str	r3, [r7, #4]
        break;
 810082e:	e005      	b.n	810083c <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8100830:	2302      	movs	r3, #2
 8100832:	607b      	str	r3, [r7, #4]
        break;
 8100834:	e002      	b.n	810083c <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8100836:	2300      	movs	r3, #0
 8100838:	607b      	str	r3, [r7, #4]
        break;
 810083a:	bf00      	nop
    }
  }
  return systick_source;
 810083c:	687b      	ldr	r3, [r7, #4]
}
 810083e:	4618      	mov	r0, r3
 8100840:	370c      	adds	r7, #12
 8100842:	46bd      	mov	sp, r7
 8100844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100848:	4770      	bx	lr
 810084a:	bf00      	nop
 810084c:	e000e010 	.word	0xe000e010
 8100850:	46020c00 	.word	0x46020c00

08100854 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8100854:	b480      	push	{r7}
 8100856:	b085      	sub	sp, #20
 8100858:	af00      	add	r7, sp, #0
 810085a:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 810085c:	4b39      	ldr	r3, [pc, #228]	@ (8100944 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 810085e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8100860:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8100864:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8100866:	68ba      	ldr	r2, [r7, #8]
 8100868:	687b      	ldr	r3, [r7, #4]
 810086a:	429a      	cmp	r2, r3
 810086c:	d10b      	bne.n	8100886 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 810086e:	687b      	ldr	r3, [r7, #4]
 8100870:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8100874:	d905      	bls.n	8100882 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8100876:	4b33      	ldr	r3, [pc, #204]	@ (8100944 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8100878:	68db      	ldr	r3, [r3, #12]
 810087a:	4a32      	ldr	r2, [pc, #200]	@ (8100944 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 810087c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8100880:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8100882:	2300      	movs	r3, #0
 8100884:	e057      	b.n	8100936 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8100886:	687b      	ldr	r3, [r7, #4]
 8100888:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810088c:	d90a      	bls.n	81008a4 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 810088e:	4b2d      	ldr	r3, [pc, #180]	@ (8100944 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8100890:	68db      	ldr	r3, [r3, #12]
 8100892:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8100896:	687b      	ldr	r3, [r7, #4]
 8100898:	4313      	orrs	r3, r2
 810089a:	4a2a      	ldr	r2, [pc, #168]	@ (8100944 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 810089c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 81008a0:	60d3      	str	r3, [r2, #12]
 81008a2:	e007      	b.n	81008b4 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 81008a4:	4b27      	ldr	r3, [pc, #156]	@ (8100944 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 81008a6:	68db      	ldr	r3, [r3, #12]
 81008a8:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 81008ac:	4925      	ldr	r1, [pc, #148]	@ (8100944 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 81008ae:	687b      	ldr	r3, [r7, #4]
 81008b0:	4313      	orrs	r3, r2
 81008b2:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 81008b4:	4b24      	ldr	r3, [pc, #144]	@ (8100948 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 81008b6:	681b      	ldr	r3, [r3, #0]
 81008b8:	4a24      	ldr	r2, [pc, #144]	@ (810094c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 81008ba:	fba2 2303 	umull	r2, r3, r2, r3
 81008be:	099b      	lsrs	r3, r3, #6
 81008c0:	2232      	movs	r2, #50	@ 0x32
 81008c2:	fb02 f303 	mul.w	r3, r2, r3
 81008c6:	4a21      	ldr	r2, [pc, #132]	@ (810094c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 81008c8:	fba2 2303 	umull	r2, r3, r2, r3
 81008cc:	099b      	lsrs	r3, r3, #6
 81008ce:	3301      	adds	r3, #1
 81008d0:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 81008d2:	e002      	b.n	81008da <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 81008d4:	68fb      	ldr	r3, [r7, #12]
 81008d6:	3b01      	subs	r3, #1
 81008d8:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 81008da:	4b1a      	ldr	r3, [pc, #104]	@ (8100944 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 81008dc:	68db      	ldr	r3, [r3, #12]
 81008de:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 81008e2:	2b00      	cmp	r3, #0
 81008e4:	d102      	bne.n	81008ec <HAL_PWREx_ControlVoltageScaling+0x98>
 81008e6:	68fb      	ldr	r3, [r7, #12]
 81008e8:	2b00      	cmp	r3, #0
 81008ea:	d1f3      	bne.n	81008d4 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 81008ec:	68fb      	ldr	r3, [r7, #12]
 81008ee:	2b00      	cmp	r3, #0
 81008f0:	d01b      	beq.n	810092a <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 81008f2:	4b15      	ldr	r3, [pc, #84]	@ (8100948 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 81008f4:	681b      	ldr	r3, [r3, #0]
 81008f6:	4a15      	ldr	r2, [pc, #84]	@ (810094c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 81008f8:	fba2 2303 	umull	r2, r3, r2, r3
 81008fc:	099b      	lsrs	r3, r3, #6
 81008fe:	2232      	movs	r2, #50	@ 0x32
 8100900:	fb02 f303 	mul.w	r3, r2, r3
 8100904:	4a11      	ldr	r2, [pc, #68]	@ (810094c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8100906:	fba2 2303 	umull	r2, r3, r2, r3
 810090a:	099b      	lsrs	r3, r3, #6
 810090c:	3301      	adds	r3, #1
 810090e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8100910:	e002      	b.n	8100918 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8100912:	68fb      	ldr	r3, [r7, #12]
 8100914:	3b01      	subs	r3, #1
 8100916:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8100918:	4b0a      	ldr	r3, [pc, #40]	@ (8100944 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 810091a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810091c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8100920:	2b00      	cmp	r3, #0
 8100922:	d102      	bne.n	810092a <HAL_PWREx_ControlVoltageScaling+0xd6>
 8100924:	68fb      	ldr	r3, [r7, #12]
 8100926:	2b00      	cmp	r3, #0
 8100928:	d1f3      	bne.n	8100912 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 810092a:	68fb      	ldr	r3, [r7, #12]
 810092c:	2b00      	cmp	r3, #0
 810092e:	d101      	bne.n	8100934 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8100930:	2303      	movs	r3, #3
 8100932:	e000      	b.n	8100936 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8100934:	2300      	movs	r3, #0
}
 8100936:	4618      	mov	r0, r3
 8100938:	3714      	adds	r7, #20
 810093a:	46bd      	mov	sp, r7
 810093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100940:	4770      	bx	lr
 8100942:	bf00      	nop
 8100944:	46020800 	.word	0x46020800
 8100948:	20040000 	.word	0x20040000
 810094c:	10624dd3 	.word	0x10624dd3

08100950 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8100950:	b480      	push	{r7}
 8100952:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8100954:	4b04      	ldr	r3, [pc, #16]	@ (8100968 <HAL_PWREx_GetVoltageRange+0x18>)
 8100956:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8100958:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 810095c:	4618      	mov	r0, r3
 810095e:	46bd      	mov	sp, r7
 8100960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100964:	4770      	bx	lr
 8100966:	bf00      	nop
 8100968:	46020800 	.word	0x46020800

0810096c <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 810096c:	b480      	push	{r7}
 810096e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8100970:	4b05      	ldr	r3, [pc, #20]	@ (8100988 <HAL_PWREx_EnableVddIO2+0x1c>)
 8100972:	691b      	ldr	r3, [r3, #16]
 8100974:	4a04      	ldr	r2, [pc, #16]	@ (8100988 <HAL_PWREx_EnableVddIO2+0x1c>)
 8100976:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 810097a:	6113      	str	r3, [r2, #16]
}
 810097c:	bf00      	nop
 810097e:	46bd      	mov	sp, r7
 8100980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100984:	4770      	bx	lr
 8100986:	bf00      	nop
 8100988:	46020800 	.word	0x46020800

0810098c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 810098c:	b580      	push	{r7, lr}
 810098e:	b08e      	sub	sp, #56	@ 0x38
 8100990:	af00      	add	r7, sp, #0
 8100992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8100994:	2300      	movs	r3, #0
 8100996:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 810099a:	687b      	ldr	r3, [r7, #4]
 810099c:	2b00      	cmp	r3, #0
 810099e:	d102      	bne.n	81009a6 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 81009a0:	2301      	movs	r3, #1
 81009a2:	f000 bec8 	b.w	8101736 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 81009a6:	4b99      	ldr	r3, [pc, #612]	@ (8100c0c <HAL_RCC_OscConfig+0x280>)
 81009a8:	69db      	ldr	r3, [r3, #28]
 81009aa:	f003 030c 	and.w	r3, r3, #12
 81009ae:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 81009b0:	4b96      	ldr	r3, [pc, #600]	@ (8100c0c <HAL_RCC_OscConfig+0x280>)
 81009b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81009b4:	f003 0303 	and.w	r3, r3, #3
 81009b8:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 81009ba:	687b      	ldr	r3, [r7, #4]
 81009bc:	681b      	ldr	r3, [r3, #0]
 81009be:	f003 0310 	and.w	r3, r3, #16
 81009c2:	2b00      	cmp	r3, #0
 81009c4:	f000 816c 	beq.w	8100ca0 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 81009c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81009ca:	2b00      	cmp	r3, #0
 81009cc:	d007      	beq.n	81009de <HAL_RCC_OscConfig+0x52>
 81009ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81009d0:	2b0c      	cmp	r3, #12
 81009d2:	f040 80de 	bne.w	8100b92 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 81009d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81009d8:	2b01      	cmp	r3, #1
 81009da:	f040 80da 	bne.w	8100b92 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 81009de:	687b      	ldr	r3, [r7, #4]
 81009e0:	69db      	ldr	r3, [r3, #28]
 81009e2:	2b00      	cmp	r3, #0
 81009e4:	d102      	bne.n	81009ec <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 81009e6:	2301      	movs	r3, #1
 81009e8:	f000 bea5 	b.w	8101736 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 81009ec:	687b      	ldr	r3, [r7, #4]
 81009ee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 81009f0:	4b86      	ldr	r3, [pc, #536]	@ (8100c0c <HAL_RCC_OscConfig+0x280>)
 81009f2:	689b      	ldr	r3, [r3, #8]
 81009f4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 81009f8:	2b00      	cmp	r3, #0
 81009fa:	d004      	beq.n	8100a06 <HAL_RCC_OscConfig+0x7a>
 81009fc:	4b83      	ldr	r3, [pc, #524]	@ (8100c0c <HAL_RCC_OscConfig+0x280>)
 81009fe:	689b      	ldr	r3, [r3, #8]
 8100a00:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8100a04:	e005      	b.n	8100a12 <HAL_RCC_OscConfig+0x86>
 8100a06:	4b81      	ldr	r3, [pc, #516]	@ (8100c0c <HAL_RCC_OscConfig+0x280>)
 8100a08:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8100a0c:	041b      	lsls	r3, r3, #16
 8100a0e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8100a12:	4293      	cmp	r3, r2
 8100a14:	d255      	bcs.n	8100ac2 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8100a16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8100a18:	2b00      	cmp	r3, #0
 8100a1a:	d10a      	bne.n	8100a32 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8100a1c:	687b      	ldr	r3, [r7, #4]
 8100a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8100a20:	4618      	mov	r0, r3
 8100a22:	f001 f99d 	bl	8101d60 <RCC_SetFlashLatencyFromMSIRange>
 8100a26:	4603      	mov	r3, r0
 8100a28:	2b00      	cmp	r3, #0
 8100a2a:	d002      	beq.n	8100a32 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8100a2c:	2301      	movs	r3, #1
 8100a2e:	f000 be82 	b.w	8101736 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8100a32:	4b76      	ldr	r3, [pc, #472]	@ (8100c0c <HAL_RCC_OscConfig+0x280>)
 8100a34:	689b      	ldr	r3, [r3, #8]
 8100a36:	4a75      	ldr	r2, [pc, #468]	@ (8100c0c <HAL_RCC_OscConfig+0x280>)
 8100a38:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8100a3c:	6093      	str	r3, [r2, #8]
 8100a3e:	4b73      	ldr	r3, [pc, #460]	@ (8100c0c <HAL_RCC_OscConfig+0x280>)
 8100a40:	689b      	ldr	r3, [r3, #8]
 8100a42:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8100a46:	687b      	ldr	r3, [r7, #4]
 8100a48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8100a4a:	4970      	ldr	r1, [pc, #448]	@ (8100c0c <HAL_RCC_OscConfig+0x280>)
 8100a4c:	4313      	orrs	r3, r2
 8100a4e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8100a50:	687b      	ldr	r3, [r7, #4]
 8100a52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8100a54:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8100a58:	d309      	bcc.n	8100a6e <HAL_RCC_OscConfig+0xe2>
 8100a5a:	4b6c      	ldr	r3, [pc, #432]	@ (8100c0c <HAL_RCC_OscConfig+0x280>)
 8100a5c:	68db      	ldr	r3, [r3, #12]
 8100a5e:	f023 021f 	bic.w	r2, r3, #31
 8100a62:	687b      	ldr	r3, [r7, #4]
 8100a64:	6a1b      	ldr	r3, [r3, #32]
 8100a66:	4969      	ldr	r1, [pc, #420]	@ (8100c0c <HAL_RCC_OscConfig+0x280>)
 8100a68:	4313      	orrs	r3, r2
 8100a6a:	60cb      	str	r3, [r1, #12]
 8100a6c:	e07e      	b.n	8100b6c <HAL_RCC_OscConfig+0x1e0>
 8100a6e:	687b      	ldr	r3, [r7, #4]
 8100a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8100a72:	2b00      	cmp	r3, #0
 8100a74:	da0a      	bge.n	8100a8c <HAL_RCC_OscConfig+0x100>
 8100a76:	4b65      	ldr	r3, [pc, #404]	@ (8100c0c <HAL_RCC_OscConfig+0x280>)
 8100a78:	68db      	ldr	r3, [r3, #12]
 8100a7a:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8100a7e:	687b      	ldr	r3, [r7, #4]
 8100a80:	6a1b      	ldr	r3, [r3, #32]
 8100a82:	015b      	lsls	r3, r3, #5
 8100a84:	4961      	ldr	r1, [pc, #388]	@ (8100c0c <HAL_RCC_OscConfig+0x280>)
 8100a86:	4313      	orrs	r3, r2
 8100a88:	60cb      	str	r3, [r1, #12]
 8100a8a:	e06f      	b.n	8100b6c <HAL_RCC_OscConfig+0x1e0>
 8100a8c:	687b      	ldr	r3, [r7, #4]
 8100a8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8100a90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8100a94:	d30a      	bcc.n	8100aac <HAL_RCC_OscConfig+0x120>
 8100a96:	4b5d      	ldr	r3, [pc, #372]	@ (8100c0c <HAL_RCC_OscConfig+0x280>)
 8100a98:	68db      	ldr	r3, [r3, #12]
 8100a9a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8100a9e:	687b      	ldr	r3, [r7, #4]
 8100aa0:	6a1b      	ldr	r3, [r3, #32]
 8100aa2:	029b      	lsls	r3, r3, #10
 8100aa4:	4959      	ldr	r1, [pc, #356]	@ (8100c0c <HAL_RCC_OscConfig+0x280>)
 8100aa6:	4313      	orrs	r3, r2
 8100aa8:	60cb      	str	r3, [r1, #12]
 8100aaa:	e05f      	b.n	8100b6c <HAL_RCC_OscConfig+0x1e0>
 8100aac:	4b57      	ldr	r3, [pc, #348]	@ (8100c0c <HAL_RCC_OscConfig+0x280>)
 8100aae:	68db      	ldr	r3, [r3, #12]
 8100ab0:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8100ab4:	687b      	ldr	r3, [r7, #4]
 8100ab6:	6a1b      	ldr	r3, [r3, #32]
 8100ab8:	03db      	lsls	r3, r3, #15
 8100aba:	4954      	ldr	r1, [pc, #336]	@ (8100c0c <HAL_RCC_OscConfig+0x280>)
 8100abc:	4313      	orrs	r3, r2
 8100abe:	60cb      	str	r3, [r1, #12]
 8100ac0:	e054      	b.n	8100b6c <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8100ac2:	4b52      	ldr	r3, [pc, #328]	@ (8100c0c <HAL_RCC_OscConfig+0x280>)
 8100ac4:	689b      	ldr	r3, [r3, #8]
 8100ac6:	4a51      	ldr	r2, [pc, #324]	@ (8100c0c <HAL_RCC_OscConfig+0x280>)
 8100ac8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8100acc:	6093      	str	r3, [r2, #8]
 8100ace:	4b4f      	ldr	r3, [pc, #316]	@ (8100c0c <HAL_RCC_OscConfig+0x280>)
 8100ad0:	689b      	ldr	r3, [r3, #8]
 8100ad2:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8100ad6:	687b      	ldr	r3, [r7, #4]
 8100ad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8100ada:	494c      	ldr	r1, [pc, #304]	@ (8100c0c <HAL_RCC_OscConfig+0x280>)
 8100adc:	4313      	orrs	r3, r2
 8100ade:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8100ae0:	687b      	ldr	r3, [r7, #4]
 8100ae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8100ae4:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8100ae8:	d309      	bcc.n	8100afe <HAL_RCC_OscConfig+0x172>
 8100aea:	4b48      	ldr	r3, [pc, #288]	@ (8100c0c <HAL_RCC_OscConfig+0x280>)
 8100aec:	68db      	ldr	r3, [r3, #12]
 8100aee:	f023 021f 	bic.w	r2, r3, #31
 8100af2:	687b      	ldr	r3, [r7, #4]
 8100af4:	6a1b      	ldr	r3, [r3, #32]
 8100af6:	4945      	ldr	r1, [pc, #276]	@ (8100c0c <HAL_RCC_OscConfig+0x280>)
 8100af8:	4313      	orrs	r3, r2
 8100afa:	60cb      	str	r3, [r1, #12]
 8100afc:	e028      	b.n	8100b50 <HAL_RCC_OscConfig+0x1c4>
 8100afe:	687b      	ldr	r3, [r7, #4]
 8100b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8100b02:	2b00      	cmp	r3, #0
 8100b04:	da0a      	bge.n	8100b1c <HAL_RCC_OscConfig+0x190>
 8100b06:	4b41      	ldr	r3, [pc, #260]	@ (8100c0c <HAL_RCC_OscConfig+0x280>)
 8100b08:	68db      	ldr	r3, [r3, #12]
 8100b0a:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8100b0e:	687b      	ldr	r3, [r7, #4]
 8100b10:	6a1b      	ldr	r3, [r3, #32]
 8100b12:	015b      	lsls	r3, r3, #5
 8100b14:	493d      	ldr	r1, [pc, #244]	@ (8100c0c <HAL_RCC_OscConfig+0x280>)
 8100b16:	4313      	orrs	r3, r2
 8100b18:	60cb      	str	r3, [r1, #12]
 8100b1a:	e019      	b.n	8100b50 <HAL_RCC_OscConfig+0x1c4>
 8100b1c:	687b      	ldr	r3, [r7, #4]
 8100b1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8100b20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8100b24:	d30a      	bcc.n	8100b3c <HAL_RCC_OscConfig+0x1b0>
 8100b26:	4b39      	ldr	r3, [pc, #228]	@ (8100c0c <HAL_RCC_OscConfig+0x280>)
 8100b28:	68db      	ldr	r3, [r3, #12]
 8100b2a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8100b2e:	687b      	ldr	r3, [r7, #4]
 8100b30:	6a1b      	ldr	r3, [r3, #32]
 8100b32:	029b      	lsls	r3, r3, #10
 8100b34:	4935      	ldr	r1, [pc, #212]	@ (8100c0c <HAL_RCC_OscConfig+0x280>)
 8100b36:	4313      	orrs	r3, r2
 8100b38:	60cb      	str	r3, [r1, #12]
 8100b3a:	e009      	b.n	8100b50 <HAL_RCC_OscConfig+0x1c4>
 8100b3c:	4b33      	ldr	r3, [pc, #204]	@ (8100c0c <HAL_RCC_OscConfig+0x280>)
 8100b3e:	68db      	ldr	r3, [r3, #12]
 8100b40:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8100b44:	687b      	ldr	r3, [r7, #4]
 8100b46:	6a1b      	ldr	r3, [r3, #32]
 8100b48:	03db      	lsls	r3, r3, #15
 8100b4a:	4930      	ldr	r1, [pc, #192]	@ (8100c0c <HAL_RCC_OscConfig+0x280>)
 8100b4c:	4313      	orrs	r3, r2
 8100b4e:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8100b50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8100b52:	2b00      	cmp	r3, #0
 8100b54:	d10a      	bne.n	8100b6c <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8100b56:	687b      	ldr	r3, [r7, #4]
 8100b58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8100b5a:	4618      	mov	r0, r3
 8100b5c:	f001 f900 	bl	8101d60 <RCC_SetFlashLatencyFromMSIRange>
 8100b60:	4603      	mov	r3, r0
 8100b62:	2b00      	cmp	r3, #0
 8100b64:	d002      	beq.n	8100b6c <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8100b66:	2301      	movs	r3, #1
 8100b68:	f000 bde5 	b.w	8101736 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8100b6c:	f001 f8de 	bl	8101d2c <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8100b70:	4b27      	ldr	r3, [pc, #156]	@ (8100c10 <HAL_RCC_OscConfig+0x284>)
 8100b72:	681b      	ldr	r3, [r3, #0]
 8100b74:	4618      	mov	r0, r3
 8100b76:	f7ff fc6f 	bl	8100458 <HAL_InitTick>
 8100b7a:	4603      	mov	r3, r0
 8100b7c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8100b80:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8100b84:	2b00      	cmp	r3, #0
 8100b86:	f000 808a 	beq.w	8100c9e <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8100b8a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8100b8e:	f000 bdd2 	b.w	8101736 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8100b92:	687b      	ldr	r3, [r7, #4]
 8100b94:	69db      	ldr	r3, [r3, #28]
 8100b96:	2b00      	cmp	r3, #0
 8100b98:	d066      	beq.n	8100c68 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8100b9a:	4b1c      	ldr	r3, [pc, #112]	@ (8100c0c <HAL_RCC_OscConfig+0x280>)
 8100b9c:	681b      	ldr	r3, [r3, #0]
 8100b9e:	4a1b      	ldr	r2, [pc, #108]	@ (8100c0c <HAL_RCC_OscConfig+0x280>)
 8100ba0:	f043 0301 	orr.w	r3, r3, #1
 8100ba4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8100ba6:	f7ff fce1 	bl	810056c <HAL_GetTick>
 8100baa:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8100bac:	e009      	b.n	8100bc2 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8100bae:	f7ff fcdd 	bl	810056c <HAL_GetTick>
 8100bb2:	4602      	mov	r2, r0
 8100bb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8100bb6:	1ad3      	subs	r3, r2, r3
 8100bb8:	2b02      	cmp	r3, #2
 8100bba:	d902      	bls.n	8100bc2 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8100bbc:	2303      	movs	r3, #3
 8100bbe:	f000 bdba 	b.w	8101736 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8100bc2:	4b12      	ldr	r3, [pc, #72]	@ (8100c0c <HAL_RCC_OscConfig+0x280>)
 8100bc4:	681b      	ldr	r3, [r3, #0]
 8100bc6:	f003 0304 	and.w	r3, r3, #4
 8100bca:	2b00      	cmp	r3, #0
 8100bcc:	d0ef      	beq.n	8100bae <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8100bce:	4b0f      	ldr	r3, [pc, #60]	@ (8100c0c <HAL_RCC_OscConfig+0x280>)
 8100bd0:	689b      	ldr	r3, [r3, #8]
 8100bd2:	4a0e      	ldr	r2, [pc, #56]	@ (8100c0c <HAL_RCC_OscConfig+0x280>)
 8100bd4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8100bd8:	6093      	str	r3, [r2, #8]
 8100bda:	4b0c      	ldr	r3, [pc, #48]	@ (8100c0c <HAL_RCC_OscConfig+0x280>)
 8100bdc:	689b      	ldr	r3, [r3, #8]
 8100bde:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8100be2:	687b      	ldr	r3, [r7, #4]
 8100be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8100be6:	4909      	ldr	r1, [pc, #36]	@ (8100c0c <HAL_RCC_OscConfig+0x280>)
 8100be8:	4313      	orrs	r3, r2
 8100bea:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8100bec:	687b      	ldr	r3, [r7, #4]
 8100bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8100bf0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8100bf4:	d30e      	bcc.n	8100c14 <HAL_RCC_OscConfig+0x288>
 8100bf6:	4b05      	ldr	r3, [pc, #20]	@ (8100c0c <HAL_RCC_OscConfig+0x280>)
 8100bf8:	68db      	ldr	r3, [r3, #12]
 8100bfa:	f023 021f 	bic.w	r2, r3, #31
 8100bfe:	687b      	ldr	r3, [r7, #4]
 8100c00:	6a1b      	ldr	r3, [r3, #32]
 8100c02:	4902      	ldr	r1, [pc, #8]	@ (8100c0c <HAL_RCC_OscConfig+0x280>)
 8100c04:	4313      	orrs	r3, r2
 8100c06:	60cb      	str	r3, [r1, #12]
 8100c08:	e04a      	b.n	8100ca0 <HAL_RCC_OscConfig+0x314>
 8100c0a:	bf00      	nop
 8100c0c:	46020c00 	.word	0x46020c00
 8100c10:	20040004 	.word	0x20040004
 8100c14:	687b      	ldr	r3, [r7, #4]
 8100c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8100c18:	2b00      	cmp	r3, #0
 8100c1a:	da0a      	bge.n	8100c32 <HAL_RCC_OscConfig+0x2a6>
 8100c1c:	4b98      	ldr	r3, [pc, #608]	@ (8100e80 <HAL_RCC_OscConfig+0x4f4>)
 8100c1e:	68db      	ldr	r3, [r3, #12]
 8100c20:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8100c24:	687b      	ldr	r3, [r7, #4]
 8100c26:	6a1b      	ldr	r3, [r3, #32]
 8100c28:	015b      	lsls	r3, r3, #5
 8100c2a:	4995      	ldr	r1, [pc, #596]	@ (8100e80 <HAL_RCC_OscConfig+0x4f4>)
 8100c2c:	4313      	orrs	r3, r2
 8100c2e:	60cb      	str	r3, [r1, #12]
 8100c30:	e036      	b.n	8100ca0 <HAL_RCC_OscConfig+0x314>
 8100c32:	687b      	ldr	r3, [r7, #4]
 8100c34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8100c36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8100c3a:	d30a      	bcc.n	8100c52 <HAL_RCC_OscConfig+0x2c6>
 8100c3c:	4b90      	ldr	r3, [pc, #576]	@ (8100e80 <HAL_RCC_OscConfig+0x4f4>)
 8100c3e:	68db      	ldr	r3, [r3, #12]
 8100c40:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8100c44:	687b      	ldr	r3, [r7, #4]
 8100c46:	6a1b      	ldr	r3, [r3, #32]
 8100c48:	029b      	lsls	r3, r3, #10
 8100c4a:	498d      	ldr	r1, [pc, #564]	@ (8100e80 <HAL_RCC_OscConfig+0x4f4>)
 8100c4c:	4313      	orrs	r3, r2
 8100c4e:	60cb      	str	r3, [r1, #12]
 8100c50:	e026      	b.n	8100ca0 <HAL_RCC_OscConfig+0x314>
 8100c52:	4b8b      	ldr	r3, [pc, #556]	@ (8100e80 <HAL_RCC_OscConfig+0x4f4>)
 8100c54:	68db      	ldr	r3, [r3, #12]
 8100c56:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8100c5a:	687b      	ldr	r3, [r7, #4]
 8100c5c:	6a1b      	ldr	r3, [r3, #32]
 8100c5e:	03db      	lsls	r3, r3, #15
 8100c60:	4987      	ldr	r1, [pc, #540]	@ (8100e80 <HAL_RCC_OscConfig+0x4f4>)
 8100c62:	4313      	orrs	r3, r2
 8100c64:	60cb      	str	r3, [r1, #12]
 8100c66:	e01b      	b.n	8100ca0 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8100c68:	4b85      	ldr	r3, [pc, #532]	@ (8100e80 <HAL_RCC_OscConfig+0x4f4>)
 8100c6a:	681b      	ldr	r3, [r3, #0]
 8100c6c:	4a84      	ldr	r2, [pc, #528]	@ (8100e80 <HAL_RCC_OscConfig+0x4f4>)
 8100c6e:	f023 0301 	bic.w	r3, r3, #1
 8100c72:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8100c74:	f7ff fc7a 	bl	810056c <HAL_GetTick>
 8100c78:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8100c7a:	e009      	b.n	8100c90 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8100c7c:	f7ff fc76 	bl	810056c <HAL_GetTick>
 8100c80:	4602      	mov	r2, r0
 8100c82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8100c84:	1ad3      	subs	r3, r2, r3
 8100c86:	2b02      	cmp	r3, #2
 8100c88:	d902      	bls.n	8100c90 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8100c8a:	2303      	movs	r3, #3
 8100c8c:	f000 bd53 	b.w	8101736 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8100c90:	4b7b      	ldr	r3, [pc, #492]	@ (8100e80 <HAL_RCC_OscConfig+0x4f4>)
 8100c92:	681b      	ldr	r3, [r3, #0]
 8100c94:	f003 0304 	and.w	r3, r3, #4
 8100c98:	2b00      	cmp	r3, #0
 8100c9a:	d1ef      	bne.n	8100c7c <HAL_RCC_OscConfig+0x2f0>
 8100c9c:	e000      	b.n	8100ca0 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8100c9e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8100ca0:	687b      	ldr	r3, [r7, #4]
 8100ca2:	681b      	ldr	r3, [r3, #0]
 8100ca4:	f003 0301 	and.w	r3, r3, #1
 8100ca8:	2b00      	cmp	r3, #0
 8100caa:	f000 808b 	beq.w	8100dc4 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8100cae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8100cb0:	2b08      	cmp	r3, #8
 8100cb2:	d005      	beq.n	8100cc0 <HAL_RCC_OscConfig+0x334>
 8100cb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8100cb6:	2b0c      	cmp	r3, #12
 8100cb8:	d109      	bne.n	8100cce <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8100cba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8100cbc:	2b03      	cmp	r3, #3
 8100cbe:	d106      	bne.n	8100cce <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8100cc0:	687b      	ldr	r3, [r7, #4]
 8100cc2:	685b      	ldr	r3, [r3, #4]
 8100cc4:	2b00      	cmp	r3, #0
 8100cc6:	d17d      	bne.n	8100dc4 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8100cc8:	2301      	movs	r3, #1
 8100cca:	f000 bd34 	b.w	8101736 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8100cce:	687b      	ldr	r3, [r7, #4]
 8100cd0:	685b      	ldr	r3, [r3, #4]
 8100cd2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8100cd6:	d106      	bne.n	8100ce6 <HAL_RCC_OscConfig+0x35a>
 8100cd8:	4b69      	ldr	r3, [pc, #420]	@ (8100e80 <HAL_RCC_OscConfig+0x4f4>)
 8100cda:	681b      	ldr	r3, [r3, #0]
 8100cdc:	4a68      	ldr	r2, [pc, #416]	@ (8100e80 <HAL_RCC_OscConfig+0x4f4>)
 8100cde:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8100ce2:	6013      	str	r3, [r2, #0]
 8100ce4:	e041      	b.n	8100d6a <HAL_RCC_OscConfig+0x3de>
 8100ce6:	687b      	ldr	r3, [r7, #4]
 8100ce8:	685b      	ldr	r3, [r3, #4]
 8100cea:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8100cee:	d112      	bne.n	8100d16 <HAL_RCC_OscConfig+0x38a>
 8100cf0:	4b63      	ldr	r3, [pc, #396]	@ (8100e80 <HAL_RCC_OscConfig+0x4f4>)
 8100cf2:	681b      	ldr	r3, [r3, #0]
 8100cf4:	4a62      	ldr	r2, [pc, #392]	@ (8100e80 <HAL_RCC_OscConfig+0x4f4>)
 8100cf6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8100cfa:	6013      	str	r3, [r2, #0]
 8100cfc:	4b60      	ldr	r3, [pc, #384]	@ (8100e80 <HAL_RCC_OscConfig+0x4f4>)
 8100cfe:	681b      	ldr	r3, [r3, #0]
 8100d00:	4a5f      	ldr	r2, [pc, #380]	@ (8100e80 <HAL_RCC_OscConfig+0x4f4>)
 8100d02:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8100d06:	6013      	str	r3, [r2, #0]
 8100d08:	4b5d      	ldr	r3, [pc, #372]	@ (8100e80 <HAL_RCC_OscConfig+0x4f4>)
 8100d0a:	681b      	ldr	r3, [r3, #0]
 8100d0c:	4a5c      	ldr	r2, [pc, #368]	@ (8100e80 <HAL_RCC_OscConfig+0x4f4>)
 8100d0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8100d12:	6013      	str	r3, [r2, #0]
 8100d14:	e029      	b.n	8100d6a <HAL_RCC_OscConfig+0x3de>
 8100d16:	687b      	ldr	r3, [r7, #4]
 8100d18:	685b      	ldr	r3, [r3, #4]
 8100d1a:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8100d1e:	d112      	bne.n	8100d46 <HAL_RCC_OscConfig+0x3ba>
 8100d20:	4b57      	ldr	r3, [pc, #348]	@ (8100e80 <HAL_RCC_OscConfig+0x4f4>)
 8100d22:	681b      	ldr	r3, [r3, #0]
 8100d24:	4a56      	ldr	r2, [pc, #344]	@ (8100e80 <HAL_RCC_OscConfig+0x4f4>)
 8100d26:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8100d2a:	6013      	str	r3, [r2, #0]
 8100d2c:	4b54      	ldr	r3, [pc, #336]	@ (8100e80 <HAL_RCC_OscConfig+0x4f4>)
 8100d2e:	681b      	ldr	r3, [r3, #0]
 8100d30:	4a53      	ldr	r2, [pc, #332]	@ (8100e80 <HAL_RCC_OscConfig+0x4f4>)
 8100d32:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8100d36:	6013      	str	r3, [r2, #0]
 8100d38:	4b51      	ldr	r3, [pc, #324]	@ (8100e80 <HAL_RCC_OscConfig+0x4f4>)
 8100d3a:	681b      	ldr	r3, [r3, #0]
 8100d3c:	4a50      	ldr	r2, [pc, #320]	@ (8100e80 <HAL_RCC_OscConfig+0x4f4>)
 8100d3e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8100d42:	6013      	str	r3, [r2, #0]
 8100d44:	e011      	b.n	8100d6a <HAL_RCC_OscConfig+0x3de>
 8100d46:	4b4e      	ldr	r3, [pc, #312]	@ (8100e80 <HAL_RCC_OscConfig+0x4f4>)
 8100d48:	681b      	ldr	r3, [r3, #0]
 8100d4a:	4a4d      	ldr	r2, [pc, #308]	@ (8100e80 <HAL_RCC_OscConfig+0x4f4>)
 8100d4c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8100d50:	6013      	str	r3, [r2, #0]
 8100d52:	4b4b      	ldr	r3, [pc, #300]	@ (8100e80 <HAL_RCC_OscConfig+0x4f4>)
 8100d54:	681b      	ldr	r3, [r3, #0]
 8100d56:	4a4a      	ldr	r2, [pc, #296]	@ (8100e80 <HAL_RCC_OscConfig+0x4f4>)
 8100d58:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8100d5c:	6013      	str	r3, [r2, #0]
 8100d5e:	4b48      	ldr	r3, [pc, #288]	@ (8100e80 <HAL_RCC_OscConfig+0x4f4>)
 8100d60:	681b      	ldr	r3, [r3, #0]
 8100d62:	4a47      	ldr	r2, [pc, #284]	@ (8100e80 <HAL_RCC_OscConfig+0x4f4>)
 8100d64:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8100d68:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8100d6a:	687b      	ldr	r3, [r7, #4]
 8100d6c:	685b      	ldr	r3, [r3, #4]
 8100d6e:	2b00      	cmp	r3, #0
 8100d70:	d014      	beq.n	8100d9c <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8100d72:	f7ff fbfb 	bl	810056c <HAL_GetTick>
 8100d76:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8100d78:	e009      	b.n	8100d8e <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8100d7a:	f7ff fbf7 	bl	810056c <HAL_GetTick>
 8100d7e:	4602      	mov	r2, r0
 8100d80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8100d82:	1ad3      	subs	r3, r2, r3
 8100d84:	2b64      	cmp	r3, #100	@ 0x64
 8100d86:	d902      	bls.n	8100d8e <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8100d88:	2303      	movs	r3, #3
 8100d8a:	f000 bcd4 	b.w	8101736 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8100d8e:	4b3c      	ldr	r3, [pc, #240]	@ (8100e80 <HAL_RCC_OscConfig+0x4f4>)
 8100d90:	681b      	ldr	r3, [r3, #0]
 8100d92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8100d96:	2b00      	cmp	r3, #0
 8100d98:	d0ef      	beq.n	8100d7a <HAL_RCC_OscConfig+0x3ee>
 8100d9a:	e013      	b.n	8100dc4 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8100d9c:	f7ff fbe6 	bl	810056c <HAL_GetTick>
 8100da0:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8100da2:	e009      	b.n	8100db8 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8100da4:	f7ff fbe2 	bl	810056c <HAL_GetTick>
 8100da8:	4602      	mov	r2, r0
 8100daa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8100dac:	1ad3      	subs	r3, r2, r3
 8100dae:	2b64      	cmp	r3, #100	@ 0x64
 8100db0:	d902      	bls.n	8100db8 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8100db2:	2303      	movs	r3, #3
 8100db4:	f000 bcbf 	b.w	8101736 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8100db8:	4b31      	ldr	r3, [pc, #196]	@ (8100e80 <HAL_RCC_OscConfig+0x4f4>)
 8100dba:	681b      	ldr	r3, [r3, #0]
 8100dbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8100dc0:	2b00      	cmp	r3, #0
 8100dc2:	d1ef      	bne.n	8100da4 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8100dc4:	687b      	ldr	r3, [r7, #4]
 8100dc6:	681b      	ldr	r3, [r3, #0]
 8100dc8:	f003 0302 	and.w	r3, r3, #2
 8100dcc:	2b00      	cmp	r3, #0
 8100dce:	d05f      	beq.n	8100e90 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8100dd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8100dd2:	2b04      	cmp	r3, #4
 8100dd4:	d005      	beq.n	8100de2 <HAL_RCC_OscConfig+0x456>
 8100dd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8100dd8:	2b0c      	cmp	r3, #12
 8100dda:	d114      	bne.n	8100e06 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8100ddc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8100dde:	2b02      	cmp	r3, #2
 8100de0:	d111      	bne.n	8100e06 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8100de2:	687b      	ldr	r3, [r7, #4]
 8100de4:	68db      	ldr	r3, [r3, #12]
 8100de6:	2b00      	cmp	r3, #0
 8100de8:	d102      	bne.n	8100df0 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8100dea:	2301      	movs	r3, #1
 8100dec:	f000 bca3 	b.w	8101736 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8100df0:	4b23      	ldr	r3, [pc, #140]	@ (8100e80 <HAL_RCC_OscConfig+0x4f4>)
 8100df2:	691b      	ldr	r3, [r3, #16]
 8100df4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8100df8:	687b      	ldr	r3, [r7, #4]
 8100dfa:	691b      	ldr	r3, [r3, #16]
 8100dfc:	041b      	lsls	r3, r3, #16
 8100dfe:	4920      	ldr	r1, [pc, #128]	@ (8100e80 <HAL_RCC_OscConfig+0x4f4>)
 8100e00:	4313      	orrs	r3, r2
 8100e02:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8100e04:	e044      	b.n	8100e90 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8100e06:	687b      	ldr	r3, [r7, #4]
 8100e08:	68db      	ldr	r3, [r3, #12]
 8100e0a:	2b00      	cmp	r3, #0
 8100e0c:	d024      	beq.n	8100e58 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8100e0e:	4b1c      	ldr	r3, [pc, #112]	@ (8100e80 <HAL_RCC_OscConfig+0x4f4>)
 8100e10:	681b      	ldr	r3, [r3, #0]
 8100e12:	4a1b      	ldr	r2, [pc, #108]	@ (8100e80 <HAL_RCC_OscConfig+0x4f4>)
 8100e14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8100e18:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8100e1a:	f7ff fba7 	bl	810056c <HAL_GetTick>
 8100e1e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8100e20:	e009      	b.n	8100e36 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8100e22:	f7ff fba3 	bl	810056c <HAL_GetTick>
 8100e26:	4602      	mov	r2, r0
 8100e28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8100e2a:	1ad3      	subs	r3, r2, r3
 8100e2c:	2b02      	cmp	r3, #2
 8100e2e:	d902      	bls.n	8100e36 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8100e30:	2303      	movs	r3, #3
 8100e32:	f000 bc80 	b.w	8101736 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8100e36:	4b12      	ldr	r3, [pc, #72]	@ (8100e80 <HAL_RCC_OscConfig+0x4f4>)
 8100e38:	681b      	ldr	r3, [r3, #0]
 8100e3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8100e3e:	2b00      	cmp	r3, #0
 8100e40:	d0ef      	beq.n	8100e22 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8100e42:	4b0f      	ldr	r3, [pc, #60]	@ (8100e80 <HAL_RCC_OscConfig+0x4f4>)
 8100e44:	691b      	ldr	r3, [r3, #16]
 8100e46:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8100e4a:	687b      	ldr	r3, [r7, #4]
 8100e4c:	691b      	ldr	r3, [r3, #16]
 8100e4e:	041b      	lsls	r3, r3, #16
 8100e50:	490b      	ldr	r1, [pc, #44]	@ (8100e80 <HAL_RCC_OscConfig+0x4f4>)
 8100e52:	4313      	orrs	r3, r2
 8100e54:	610b      	str	r3, [r1, #16]
 8100e56:	e01b      	b.n	8100e90 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8100e58:	4b09      	ldr	r3, [pc, #36]	@ (8100e80 <HAL_RCC_OscConfig+0x4f4>)
 8100e5a:	681b      	ldr	r3, [r3, #0]
 8100e5c:	4a08      	ldr	r2, [pc, #32]	@ (8100e80 <HAL_RCC_OscConfig+0x4f4>)
 8100e5e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8100e62:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8100e64:	f7ff fb82 	bl	810056c <HAL_GetTick>
 8100e68:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8100e6a:	e00b      	b.n	8100e84 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8100e6c:	f7ff fb7e 	bl	810056c <HAL_GetTick>
 8100e70:	4602      	mov	r2, r0
 8100e72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8100e74:	1ad3      	subs	r3, r2, r3
 8100e76:	2b02      	cmp	r3, #2
 8100e78:	d904      	bls.n	8100e84 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8100e7a:	2303      	movs	r3, #3
 8100e7c:	f000 bc5b 	b.w	8101736 <HAL_RCC_OscConfig+0xdaa>
 8100e80:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8100e84:	4baf      	ldr	r3, [pc, #700]	@ (8101144 <HAL_RCC_OscConfig+0x7b8>)
 8100e86:	681b      	ldr	r3, [r3, #0]
 8100e88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8100e8c:	2b00      	cmp	r3, #0
 8100e8e:	d1ed      	bne.n	8100e6c <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8100e90:	687b      	ldr	r3, [r7, #4]
 8100e92:	681b      	ldr	r3, [r3, #0]
 8100e94:	f003 0308 	and.w	r3, r3, #8
 8100e98:	2b00      	cmp	r3, #0
 8100e9a:	f000 80c8 	beq.w	810102e <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8100e9e:	2300      	movs	r3, #0
 8100ea0:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8100ea4:	4ba7      	ldr	r3, [pc, #668]	@ (8101144 <HAL_RCC_OscConfig+0x7b8>)
 8100ea6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8100eaa:	f003 0304 	and.w	r3, r3, #4
 8100eae:	2b00      	cmp	r3, #0
 8100eb0:	d111      	bne.n	8100ed6 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8100eb2:	4ba4      	ldr	r3, [pc, #656]	@ (8101144 <HAL_RCC_OscConfig+0x7b8>)
 8100eb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8100eb8:	4aa2      	ldr	r2, [pc, #648]	@ (8101144 <HAL_RCC_OscConfig+0x7b8>)
 8100eba:	f043 0304 	orr.w	r3, r3, #4
 8100ebe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8100ec2:	4ba0      	ldr	r3, [pc, #640]	@ (8101144 <HAL_RCC_OscConfig+0x7b8>)
 8100ec4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8100ec8:	f003 0304 	and.w	r3, r3, #4
 8100ecc:	617b      	str	r3, [r7, #20]
 8100ece:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8100ed0:	2301      	movs	r3, #1
 8100ed2:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8100ed6:	4b9c      	ldr	r3, [pc, #624]	@ (8101148 <HAL_RCC_OscConfig+0x7bc>)
 8100ed8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8100eda:	f003 0301 	and.w	r3, r3, #1
 8100ede:	2b00      	cmp	r3, #0
 8100ee0:	d119      	bne.n	8100f16 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8100ee2:	4b99      	ldr	r3, [pc, #612]	@ (8101148 <HAL_RCC_OscConfig+0x7bc>)
 8100ee4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8100ee6:	4a98      	ldr	r2, [pc, #608]	@ (8101148 <HAL_RCC_OscConfig+0x7bc>)
 8100ee8:	f043 0301 	orr.w	r3, r3, #1
 8100eec:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8100eee:	f7ff fb3d 	bl	810056c <HAL_GetTick>
 8100ef2:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8100ef4:	e009      	b.n	8100f0a <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8100ef6:	f7ff fb39 	bl	810056c <HAL_GetTick>
 8100efa:	4602      	mov	r2, r0
 8100efc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8100efe:	1ad3      	subs	r3, r2, r3
 8100f00:	2b02      	cmp	r3, #2
 8100f02:	d902      	bls.n	8100f0a <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8100f04:	2303      	movs	r3, #3
 8100f06:	f000 bc16 	b.w	8101736 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8100f0a:	4b8f      	ldr	r3, [pc, #572]	@ (8101148 <HAL_RCC_OscConfig+0x7bc>)
 8100f0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8100f0e:	f003 0301 	and.w	r3, r3, #1
 8100f12:	2b00      	cmp	r3, #0
 8100f14:	d0ef      	beq.n	8100ef6 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8100f16:	687b      	ldr	r3, [r7, #4]
 8100f18:	695b      	ldr	r3, [r3, #20]
 8100f1a:	2b00      	cmp	r3, #0
 8100f1c:	d05f      	beq.n	8100fde <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8100f1e:	4b89      	ldr	r3, [pc, #548]	@ (8101144 <HAL_RCC_OscConfig+0x7b8>)
 8100f20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8100f24:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8100f26:	687b      	ldr	r3, [r7, #4]
 8100f28:	699a      	ldr	r2, [r3, #24]
 8100f2a:	6a3b      	ldr	r3, [r7, #32]
 8100f2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8100f30:	429a      	cmp	r2, r3
 8100f32:	d037      	beq.n	8100fa4 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8100f34:	6a3b      	ldr	r3, [r7, #32]
 8100f36:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8100f3a:	2b00      	cmp	r3, #0
 8100f3c:	d006      	beq.n	8100f4c <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8100f3e:	6a3b      	ldr	r3, [r7, #32]
 8100f40:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8100f44:	2b00      	cmp	r3, #0
 8100f46:	d101      	bne.n	8100f4c <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8100f48:	2301      	movs	r3, #1
 8100f4a:	e3f4      	b.n	8101736 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8100f4c:	6a3b      	ldr	r3, [r7, #32]
 8100f4e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8100f52:	2b00      	cmp	r3, #0
 8100f54:	d01b      	beq.n	8100f8e <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8100f56:	4b7b      	ldr	r3, [pc, #492]	@ (8101144 <HAL_RCC_OscConfig+0x7b8>)
 8100f58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8100f5c:	4a79      	ldr	r2, [pc, #484]	@ (8101144 <HAL_RCC_OscConfig+0x7b8>)
 8100f5e:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8100f62:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8100f66:	f7ff fb01 	bl	810056c <HAL_GetTick>
 8100f6a:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8100f6c:	e008      	b.n	8100f80 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8100f6e:	f7ff fafd 	bl	810056c <HAL_GetTick>
 8100f72:	4602      	mov	r2, r0
 8100f74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8100f76:	1ad3      	subs	r3, r2, r3
 8100f78:	2b05      	cmp	r3, #5
 8100f7a:	d901      	bls.n	8100f80 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8100f7c:	2303      	movs	r3, #3
 8100f7e:	e3da      	b.n	8101736 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8100f80:	4b70      	ldr	r3, [pc, #448]	@ (8101144 <HAL_RCC_OscConfig+0x7b8>)
 8100f82:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8100f86:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8100f8a:	2b00      	cmp	r3, #0
 8100f8c:	d1ef      	bne.n	8100f6e <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8100f8e:	4b6d      	ldr	r3, [pc, #436]	@ (8101144 <HAL_RCC_OscConfig+0x7b8>)
 8100f90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8100f94:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8100f98:	687b      	ldr	r3, [r7, #4]
 8100f9a:	699b      	ldr	r3, [r3, #24]
 8100f9c:	4969      	ldr	r1, [pc, #420]	@ (8101144 <HAL_RCC_OscConfig+0x7b8>)
 8100f9e:	4313      	orrs	r3, r2
 8100fa0:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8100fa4:	4b67      	ldr	r3, [pc, #412]	@ (8101144 <HAL_RCC_OscConfig+0x7b8>)
 8100fa6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8100faa:	4a66      	ldr	r2, [pc, #408]	@ (8101144 <HAL_RCC_OscConfig+0x7b8>)
 8100fac:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8100fb0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8100fb4:	f7ff fada 	bl	810056c <HAL_GetTick>
 8100fb8:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8100fba:	e008      	b.n	8100fce <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8100fbc:	f7ff fad6 	bl	810056c <HAL_GetTick>
 8100fc0:	4602      	mov	r2, r0
 8100fc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8100fc4:	1ad3      	subs	r3, r2, r3
 8100fc6:	2b05      	cmp	r3, #5
 8100fc8:	d901      	bls.n	8100fce <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8100fca:	2303      	movs	r3, #3
 8100fcc:	e3b3      	b.n	8101736 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8100fce:	4b5d      	ldr	r3, [pc, #372]	@ (8101144 <HAL_RCC_OscConfig+0x7b8>)
 8100fd0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8100fd4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8100fd8:	2b00      	cmp	r3, #0
 8100fda:	d0ef      	beq.n	8100fbc <HAL_RCC_OscConfig+0x630>
 8100fdc:	e01b      	b.n	8101016 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8100fde:	4b59      	ldr	r3, [pc, #356]	@ (8101144 <HAL_RCC_OscConfig+0x7b8>)
 8100fe0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8100fe4:	4a57      	ldr	r2, [pc, #348]	@ (8101144 <HAL_RCC_OscConfig+0x7b8>)
 8100fe6:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8100fea:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8100fee:	f7ff fabd 	bl	810056c <HAL_GetTick>
 8100ff2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8100ff4:	e008      	b.n	8101008 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8100ff6:	f7ff fab9 	bl	810056c <HAL_GetTick>
 8100ffa:	4602      	mov	r2, r0
 8100ffc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8100ffe:	1ad3      	subs	r3, r2, r3
 8101000:	2b05      	cmp	r3, #5
 8101002:	d901      	bls.n	8101008 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8101004:	2303      	movs	r3, #3
 8101006:	e396      	b.n	8101736 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8101008:	4b4e      	ldr	r3, [pc, #312]	@ (8101144 <HAL_RCC_OscConfig+0x7b8>)
 810100a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 810100e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8101012:	2b00      	cmp	r3, #0
 8101014:	d1ef      	bne.n	8100ff6 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8101016:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 810101a:	2b01      	cmp	r3, #1
 810101c:	d107      	bne.n	810102e <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 810101e:	4b49      	ldr	r3, [pc, #292]	@ (8101144 <HAL_RCC_OscConfig+0x7b8>)
 8101020:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8101024:	4a47      	ldr	r2, [pc, #284]	@ (8101144 <HAL_RCC_OscConfig+0x7b8>)
 8101026:	f023 0304 	bic.w	r3, r3, #4
 810102a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 810102e:	687b      	ldr	r3, [r7, #4]
 8101030:	681b      	ldr	r3, [r3, #0]
 8101032:	f003 0304 	and.w	r3, r3, #4
 8101036:	2b00      	cmp	r3, #0
 8101038:	f000 8111 	beq.w	810125e <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 810103c:	2300      	movs	r3, #0
 810103e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8101042:	4b40      	ldr	r3, [pc, #256]	@ (8101144 <HAL_RCC_OscConfig+0x7b8>)
 8101044:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8101048:	f003 0304 	and.w	r3, r3, #4
 810104c:	2b00      	cmp	r3, #0
 810104e:	d111      	bne.n	8101074 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8101050:	4b3c      	ldr	r3, [pc, #240]	@ (8101144 <HAL_RCC_OscConfig+0x7b8>)
 8101052:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8101056:	4a3b      	ldr	r2, [pc, #236]	@ (8101144 <HAL_RCC_OscConfig+0x7b8>)
 8101058:	f043 0304 	orr.w	r3, r3, #4
 810105c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8101060:	4b38      	ldr	r3, [pc, #224]	@ (8101144 <HAL_RCC_OscConfig+0x7b8>)
 8101062:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8101066:	f003 0304 	and.w	r3, r3, #4
 810106a:	613b      	str	r3, [r7, #16]
 810106c:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 810106e:	2301      	movs	r3, #1
 8101070:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8101074:	4b34      	ldr	r3, [pc, #208]	@ (8101148 <HAL_RCC_OscConfig+0x7bc>)
 8101076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8101078:	f003 0301 	and.w	r3, r3, #1
 810107c:	2b00      	cmp	r3, #0
 810107e:	d118      	bne.n	81010b2 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8101080:	4b31      	ldr	r3, [pc, #196]	@ (8101148 <HAL_RCC_OscConfig+0x7bc>)
 8101082:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8101084:	4a30      	ldr	r2, [pc, #192]	@ (8101148 <HAL_RCC_OscConfig+0x7bc>)
 8101086:	f043 0301 	orr.w	r3, r3, #1
 810108a:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 810108c:	f7ff fa6e 	bl	810056c <HAL_GetTick>
 8101090:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8101092:	e008      	b.n	81010a6 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8101094:	f7ff fa6a 	bl	810056c <HAL_GetTick>
 8101098:	4602      	mov	r2, r0
 810109a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810109c:	1ad3      	subs	r3, r2, r3
 810109e:	2b02      	cmp	r3, #2
 81010a0:	d901      	bls.n	81010a6 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 81010a2:	2303      	movs	r3, #3
 81010a4:	e347      	b.n	8101736 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 81010a6:	4b28      	ldr	r3, [pc, #160]	@ (8101148 <HAL_RCC_OscConfig+0x7bc>)
 81010a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81010aa:	f003 0301 	and.w	r3, r3, #1
 81010ae:	2b00      	cmp	r3, #0
 81010b0:	d0f0      	beq.n	8101094 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 81010b2:	687b      	ldr	r3, [r7, #4]
 81010b4:	689b      	ldr	r3, [r3, #8]
 81010b6:	f003 0301 	and.w	r3, r3, #1
 81010ba:	2b00      	cmp	r3, #0
 81010bc:	d01f      	beq.n	81010fe <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 81010be:	687b      	ldr	r3, [r7, #4]
 81010c0:	689b      	ldr	r3, [r3, #8]
 81010c2:	f003 0304 	and.w	r3, r3, #4
 81010c6:	2b00      	cmp	r3, #0
 81010c8:	d010      	beq.n	81010ec <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 81010ca:	4b1e      	ldr	r3, [pc, #120]	@ (8101144 <HAL_RCC_OscConfig+0x7b8>)
 81010cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 81010d0:	4a1c      	ldr	r2, [pc, #112]	@ (8101144 <HAL_RCC_OscConfig+0x7b8>)
 81010d2:	f043 0304 	orr.w	r3, r3, #4
 81010d6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 81010da:	4b1a      	ldr	r3, [pc, #104]	@ (8101144 <HAL_RCC_OscConfig+0x7b8>)
 81010dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 81010e0:	4a18      	ldr	r2, [pc, #96]	@ (8101144 <HAL_RCC_OscConfig+0x7b8>)
 81010e2:	f043 0301 	orr.w	r3, r3, #1
 81010e6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 81010ea:	e018      	b.n	810111e <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 81010ec:	4b15      	ldr	r3, [pc, #84]	@ (8101144 <HAL_RCC_OscConfig+0x7b8>)
 81010ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 81010f2:	4a14      	ldr	r2, [pc, #80]	@ (8101144 <HAL_RCC_OscConfig+0x7b8>)
 81010f4:	f043 0301 	orr.w	r3, r3, #1
 81010f8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 81010fc:	e00f      	b.n	810111e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 81010fe:	4b11      	ldr	r3, [pc, #68]	@ (8101144 <HAL_RCC_OscConfig+0x7b8>)
 8101100:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8101104:	4a0f      	ldr	r2, [pc, #60]	@ (8101144 <HAL_RCC_OscConfig+0x7b8>)
 8101106:	f023 0301 	bic.w	r3, r3, #1
 810110a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 810110e:	4b0d      	ldr	r3, [pc, #52]	@ (8101144 <HAL_RCC_OscConfig+0x7b8>)
 8101110:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8101114:	4a0b      	ldr	r2, [pc, #44]	@ (8101144 <HAL_RCC_OscConfig+0x7b8>)
 8101116:	f023 0304 	bic.w	r3, r3, #4
 810111a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 810111e:	687b      	ldr	r3, [r7, #4]
 8101120:	689b      	ldr	r3, [r3, #8]
 8101122:	2b00      	cmp	r3, #0
 8101124:	d057      	beq.n	81011d6 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8101126:	f7ff fa21 	bl	810056c <HAL_GetTick>
 810112a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 810112c:	e00e      	b.n	810114c <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 810112e:	f7ff fa1d 	bl	810056c <HAL_GetTick>
 8101132:	4602      	mov	r2, r0
 8101134:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8101136:	1ad3      	subs	r3, r2, r3
 8101138:	f241 3288 	movw	r2, #5000	@ 0x1388
 810113c:	4293      	cmp	r3, r2
 810113e:	d905      	bls.n	810114c <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8101140:	2303      	movs	r3, #3
 8101142:	e2f8      	b.n	8101736 <HAL_RCC_OscConfig+0xdaa>
 8101144:	46020c00 	.word	0x46020c00
 8101148:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 810114c:	4b9c      	ldr	r3, [pc, #624]	@ (81013c0 <HAL_RCC_OscConfig+0xa34>)
 810114e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8101152:	f003 0302 	and.w	r3, r3, #2
 8101156:	2b00      	cmp	r3, #0
 8101158:	d0e9      	beq.n	810112e <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 810115a:	687b      	ldr	r3, [r7, #4]
 810115c:	689b      	ldr	r3, [r3, #8]
 810115e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8101162:	2b00      	cmp	r3, #0
 8101164:	d01b      	beq.n	810119e <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8101166:	4b96      	ldr	r3, [pc, #600]	@ (81013c0 <HAL_RCC_OscConfig+0xa34>)
 8101168:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 810116c:	4a94      	ldr	r2, [pc, #592]	@ (81013c0 <HAL_RCC_OscConfig+0xa34>)
 810116e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8101172:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8101176:	e00a      	b.n	810118e <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8101178:	f7ff f9f8 	bl	810056c <HAL_GetTick>
 810117c:	4602      	mov	r2, r0
 810117e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8101180:	1ad3      	subs	r3, r2, r3
 8101182:	f241 3288 	movw	r2, #5000	@ 0x1388
 8101186:	4293      	cmp	r3, r2
 8101188:	d901      	bls.n	810118e <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 810118a:	2303      	movs	r3, #3
 810118c:	e2d3      	b.n	8101736 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 810118e:	4b8c      	ldr	r3, [pc, #560]	@ (81013c0 <HAL_RCC_OscConfig+0xa34>)
 8101190:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8101194:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8101198:	2b00      	cmp	r3, #0
 810119a:	d0ed      	beq.n	8101178 <HAL_RCC_OscConfig+0x7ec>
 810119c:	e053      	b.n	8101246 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 810119e:	4b88      	ldr	r3, [pc, #544]	@ (81013c0 <HAL_RCC_OscConfig+0xa34>)
 81011a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 81011a4:	4a86      	ldr	r2, [pc, #536]	@ (81013c0 <HAL_RCC_OscConfig+0xa34>)
 81011a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 81011aa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 81011ae:	e00a      	b.n	81011c6 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 81011b0:	f7ff f9dc 	bl	810056c <HAL_GetTick>
 81011b4:	4602      	mov	r2, r0
 81011b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81011b8:	1ad3      	subs	r3, r2, r3
 81011ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 81011be:	4293      	cmp	r3, r2
 81011c0:	d901      	bls.n	81011c6 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 81011c2:	2303      	movs	r3, #3
 81011c4:	e2b7      	b.n	8101736 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 81011c6:	4b7e      	ldr	r3, [pc, #504]	@ (81013c0 <HAL_RCC_OscConfig+0xa34>)
 81011c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 81011cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 81011d0:	2b00      	cmp	r3, #0
 81011d2:	d1ed      	bne.n	81011b0 <HAL_RCC_OscConfig+0x824>
 81011d4:	e037      	b.n	8101246 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 81011d6:	f7ff f9c9 	bl	810056c <HAL_GetTick>
 81011da:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 81011dc:	e00a      	b.n	81011f4 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 81011de:	f7ff f9c5 	bl	810056c <HAL_GetTick>
 81011e2:	4602      	mov	r2, r0
 81011e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81011e6:	1ad3      	subs	r3, r2, r3
 81011e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 81011ec:	4293      	cmp	r3, r2
 81011ee:	d901      	bls.n	81011f4 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 81011f0:	2303      	movs	r3, #3
 81011f2:	e2a0      	b.n	8101736 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 81011f4:	4b72      	ldr	r3, [pc, #456]	@ (81013c0 <HAL_RCC_OscConfig+0xa34>)
 81011f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 81011fa:	f003 0302 	and.w	r3, r3, #2
 81011fe:	2b00      	cmp	r3, #0
 8101200:	d1ed      	bne.n	81011de <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8101202:	4b6f      	ldr	r3, [pc, #444]	@ (81013c0 <HAL_RCC_OscConfig+0xa34>)
 8101204:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8101208:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810120c:	2b00      	cmp	r3, #0
 810120e:	d01a      	beq.n	8101246 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8101210:	4b6b      	ldr	r3, [pc, #428]	@ (81013c0 <HAL_RCC_OscConfig+0xa34>)
 8101212:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8101216:	4a6a      	ldr	r2, [pc, #424]	@ (81013c0 <HAL_RCC_OscConfig+0xa34>)
 8101218:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 810121c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8101220:	e00a      	b.n	8101238 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8101222:	f7ff f9a3 	bl	810056c <HAL_GetTick>
 8101226:	4602      	mov	r2, r0
 8101228:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810122a:	1ad3      	subs	r3, r2, r3
 810122c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8101230:	4293      	cmp	r3, r2
 8101232:	d901      	bls.n	8101238 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8101234:	2303      	movs	r3, #3
 8101236:	e27e      	b.n	8101736 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8101238:	4b61      	ldr	r3, [pc, #388]	@ (81013c0 <HAL_RCC_OscConfig+0xa34>)
 810123a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 810123e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8101242:	2b00      	cmp	r3, #0
 8101244:	d1ed      	bne.n	8101222 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8101246:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 810124a:	2b01      	cmp	r3, #1
 810124c:	d107      	bne.n	810125e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 810124e:	4b5c      	ldr	r3, [pc, #368]	@ (81013c0 <HAL_RCC_OscConfig+0xa34>)
 8101250:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8101254:	4a5a      	ldr	r2, [pc, #360]	@ (81013c0 <HAL_RCC_OscConfig+0xa34>)
 8101256:	f023 0304 	bic.w	r3, r3, #4
 810125a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 810125e:	687b      	ldr	r3, [r7, #4]
 8101260:	681b      	ldr	r3, [r3, #0]
 8101262:	f003 0320 	and.w	r3, r3, #32
 8101266:	2b00      	cmp	r3, #0
 8101268:	d036      	beq.n	81012d8 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 810126a:	687b      	ldr	r3, [r7, #4]
 810126c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810126e:	2b00      	cmp	r3, #0
 8101270:	d019      	beq.n	81012a6 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8101272:	4b53      	ldr	r3, [pc, #332]	@ (81013c0 <HAL_RCC_OscConfig+0xa34>)
 8101274:	681b      	ldr	r3, [r3, #0]
 8101276:	4a52      	ldr	r2, [pc, #328]	@ (81013c0 <HAL_RCC_OscConfig+0xa34>)
 8101278:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 810127c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 810127e:	f7ff f975 	bl	810056c <HAL_GetTick>
 8101282:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8101284:	e008      	b.n	8101298 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8101286:	f7ff f971 	bl	810056c <HAL_GetTick>
 810128a:	4602      	mov	r2, r0
 810128c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810128e:	1ad3      	subs	r3, r2, r3
 8101290:	2b02      	cmp	r3, #2
 8101292:	d901      	bls.n	8101298 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8101294:	2303      	movs	r3, #3
 8101296:	e24e      	b.n	8101736 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8101298:	4b49      	ldr	r3, [pc, #292]	@ (81013c0 <HAL_RCC_OscConfig+0xa34>)
 810129a:	681b      	ldr	r3, [r3, #0]
 810129c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 81012a0:	2b00      	cmp	r3, #0
 81012a2:	d0f0      	beq.n	8101286 <HAL_RCC_OscConfig+0x8fa>
 81012a4:	e018      	b.n	81012d8 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 81012a6:	4b46      	ldr	r3, [pc, #280]	@ (81013c0 <HAL_RCC_OscConfig+0xa34>)
 81012a8:	681b      	ldr	r3, [r3, #0]
 81012aa:	4a45      	ldr	r2, [pc, #276]	@ (81013c0 <HAL_RCC_OscConfig+0xa34>)
 81012ac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 81012b0:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 81012b2:	f7ff f95b 	bl	810056c <HAL_GetTick>
 81012b6:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 81012b8:	e008      	b.n	81012cc <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 81012ba:	f7ff f957 	bl	810056c <HAL_GetTick>
 81012be:	4602      	mov	r2, r0
 81012c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81012c2:	1ad3      	subs	r3, r2, r3
 81012c4:	2b02      	cmp	r3, #2
 81012c6:	d901      	bls.n	81012cc <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 81012c8:	2303      	movs	r3, #3
 81012ca:	e234      	b.n	8101736 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 81012cc:	4b3c      	ldr	r3, [pc, #240]	@ (81013c0 <HAL_RCC_OscConfig+0xa34>)
 81012ce:	681b      	ldr	r3, [r3, #0]
 81012d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 81012d4:	2b00      	cmp	r3, #0
 81012d6:	d1f0      	bne.n	81012ba <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 81012d8:	687b      	ldr	r3, [r7, #4]
 81012da:	681b      	ldr	r3, [r3, #0]
 81012dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 81012e0:	2b00      	cmp	r3, #0
 81012e2:	d036      	beq.n	8101352 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 81012e4:	687b      	ldr	r3, [r7, #4]
 81012e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81012e8:	2b00      	cmp	r3, #0
 81012ea:	d019      	beq.n	8101320 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 81012ec:	4b34      	ldr	r3, [pc, #208]	@ (81013c0 <HAL_RCC_OscConfig+0xa34>)
 81012ee:	681b      	ldr	r3, [r3, #0]
 81012f0:	4a33      	ldr	r2, [pc, #204]	@ (81013c0 <HAL_RCC_OscConfig+0xa34>)
 81012f2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 81012f6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 81012f8:	f7ff f938 	bl	810056c <HAL_GetTick>
 81012fc:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 81012fe:	e008      	b.n	8101312 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8101300:	f7ff f934 	bl	810056c <HAL_GetTick>
 8101304:	4602      	mov	r2, r0
 8101306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8101308:	1ad3      	subs	r3, r2, r3
 810130a:	2b02      	cmp	r3, #2
 810130c:	d901      	bls.n	8101312 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 810130e:	2303      	movs	r3, #3
 8101310:	e211      	b.n	8101736 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8101312:	4b2b      	ldr	r3, [pc, #172]	@ (81013c0 <HAL_RCC_OscConfig+0xa34>)
 8101314:	681b      	ldr	r3, [r3, #0]
 8101316:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 810131a:	2b00      	cmp	r3, #0
 810131c:	d0f0      	beq.n	8101300 <HAL_RCC_OscConfig+0x974>
 810131e:	e018      	b.n	8101352 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8101320:	4b27      	ldr	r3, [pc, #156]	@ (81013c0 <HAL_RCC_OscConfig+0xa34>)
 8101322:	681b      	ldr	r3, [r3, #0]
 8101324:	4a26      	ldr	r2, [pc, #152]	@ (81013c0 <HAL_RCC_OscConfig+0xa34>)
 8101326:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 810132a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 810132c:	f7ff f91e 	bl	810056c <HAL_GetTick>
 8101330:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8101332:	e008      	b.n	8101346 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8101334:	f7ff f91a 	bl	810056c <HAL_GetTick>
 8101338:	4602      	mov	r2, r0
 810133a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810133c:	1ad3      	subs	r3, r2, r3
 810133e:	2b02      	cmp	r3, #2
 8101340:	d901      	bls.n	8101346 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8101342:	2303      	movs	r3, #3
 8101344:	e1f7      	b.n	8101736 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8101346:	4b1e      	ldr	r3, [pc, #120]	@ (81013c0 <HAL_RCC_OscConfig+0xa34>)
 8101348:	681b      	ldr	r3, [r3, #0]
 810134a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 810134e:	2b00      	cmp	r3, #0
 8101350:	d1f0      	bne.n	8101334 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8101352:	687b      	ldr	r3, [r7, #4]
 8101354:	681b      	ldr	r3, [r3, #0]
 8101356:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810135a:	2b00      	cmp	r3, #0
 810135c:	d07f      	beq.n	810145e <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 810135e:	687b      	ldr	r3, [r7, #4]
 8101360:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8101362:	2b00      	cmp	r3, #0
 8101364:	d062      	beq.n	810142c <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8101366:	4b16      	ldr	r3, [pc, #88]	@ (81013c0 <HAL_RCC_OscConfig+0xa34>)
 8101368:	689b      	ldr	r3, [r3, #8]
 810136a:	4a15      	ldr	r2, [pc, #84]	@ (81013c0 <HAL_RCC_OscConfig+0xa34>)
 810136c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8101370:	6093      	str	r3, [r2, #8]
 8101372:	4b13      	ldr	r3, [pc, #76]	@ (81013c0 <HAL_RCC_OscConfig+0xa34>)
 8101374:	689b      	ldr	r3, [r3, #8]
 8101376:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 810137a:	687b      	ldr	r3, [r7, #4]
 810137c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810137e:	4910      	ldr	r1, [pc, #64]	@ (81013c0 <HAL_RCC_OscConfig+0xa34>)
 8101380:	4313      	orrs	r3, r2
 8101382:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8101384:	687b      	ldr	r3, [r7, #4]
 8101386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8101388:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 810138c:	d309      	bcc.n	81013a2 <HAL_RCC_OscConfig+0xa16>
 810138e:	4b0c      	ldr	r3, [pc, #48]	@ (81013c0 <HAL_RCC_OscConfig+0xa34>)
 8101390:	68db      	ldr	r3, [r3, #12]
 8101392:	f023 021f 	bic.w	r2, r3, #31
 8101396:	687b      	ldr	r3, [r7, #4]
 8101398:	6a1b      	ldr	r3, [r3, #32]
 810139a:	4909      	ldr	r1, [pc, #36]	@ (81013c0 <HAL_RCC_OscConfig+0xa34>)
 810139c:	4313      	orrs	r3, r2
 810139e:	60cb      	str	r3, [r1, #12]
 81013a0:	e02a      	b.n	81013f8 <HAL_RCC_OscConfig+0xa6c>
 81013a2:	687b      	ldr	r3, [r7, #4]
 81013a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81013a6:	2b00      	cmp	r3, #0
 81013a8:	da0c      	bge.n	81013c4 <HAL_RCC_OscConfig+0xa38>
 81013aa:	4b05      	ldr	r3, [pc, #20]	@ (81013c0 <HAL_RCC_OscConfig+0xa34>)
 81013ac:	68db      	ldr	r3, [r3, #12]
 81013ae:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 81013b2:	687b      	ldr	r3, [r7, #4]
 81013b4:	6a1b      	ldr	r3, [r3, #32]
 81013b6:	015b      	lsls	r3, r3, #5
 81013b8:	4901      	ldr	r1, [pc, #4]	@ (81013c0 <HAL_RCC_OscConfig+0xa34>)
 81013ba:	4313      	orrs	r3, r2
 81013bc:	60cb      	str	r3, [r1, #12]
 81013be:	e01b      	b.n	81013f8 <HAL_RCC_OscConfig+0xa6c>
 81013c0:	46020c00 	.word	0x46020c00
 81013c4:	687b      	ldr	r3, [r7, #4]
 81013c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81013c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81013cc:	d30a      	bcc.n	81013e4 <HAL_RCC_OscConfig+0xa58>
 81013ce:	4ba1      	ldr	r3, [pc, #644]	@ (8101654 <HAL_RCC_OscConfig+0xcc8>)
 81013d0:	68db      	ldr	r3, [r3, #12]
 81013d2:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 81013d6:	687b      	ldr	r3, [r7, #4]
 81013d8:	6a1b      	ldr	r3, [r3, #32]
 81013da:	029b      	lsls	r3, r3, #10
 81013dc:	499d      	ldr	r1, [pc, #628]	@ (8101654 <HAL_RCC_OscConfig+0xcc8>)
 81013de:	4313      	orrs	r3, r2
 81013e0:	60cb      	str	r3, [r1, #12]
 81013e2:	e009      	b.n	81013f8 <HAL_RCC_OscConfig+0xa6c>
 81013e4:	4b9b      	ldr	r3, [pc, #620]	@ (8101654 <HAL_RCC_OscConfig+0xcc8>)
 81013e6:	68db      	ldr	r3, [r3, #12]
 81013e8:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 81013ec:	687b      	ldr	r3, [r7, #4]
 81013ee:	6a1b      	ldr	r3, [r3, #32]
 81013f0:	03db      	lsls	r3, r3, #15
 81013f2:	4998      	ldr	r1, [pc, #608]	@ (8101654 <HAL_RCC_OscConfig+0xcc8>)
 81013f4:	4313      	orrs	r3, r2
 81013f6:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 81013f8:	4b96      	ldr	r3, [pc, #600]	@ (8101654 <HAL_RCC_OscConfig+0xcc8>)
 81013fa:	681b      	ldr	r3, [r3, #0]
 81013fc:	4a95      	ldr	r2, [pc, #596]	@ (8101654 <HAL_RCC_OscConfig+0xcc8>)
 81013fe:	f043 0310 	orr.w	r3, r3, #16
 8101402:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8101404:	f7ff f8b2 	bl	810056c <HAL_GetTick>
 8101408:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 810140a:	e008      	b.n	810141e <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 810140c:	f7ff f8ae 	bl	810056c <HAL_GetTick>
 8101410:	4602      	mov	r2, r0
 8101412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8101414:	1ad3      	subs	r3, r2, r3
 8101416:	2b02      	cmp	r3, #2
 8101418:	d901      	bls.n	810141e <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 810141a:	2303      	movs	r3, #3
 810141c:	e18b      	b.n	8101736 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 810141e:	4b8d      	ldr	r3, [pc, #564]	@ (8101654 <HAL_RCC_OscConfig+0xcc8>)
 8101420:	681b      	ldr	r3, [r3, #0]
 8101422:	f003 0320 	and.w	r3, r3, #32
 8101426:	2b00      	cmp	r3, #0
 8101428:	d0f0      	beq.n	810140c <HAL_RCC_OscConfig+0xa80>
 810142a:	e018      	b.n	810145e <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 810142c:	4b89      	ldr	r3, [pc, #548]	@ (8101654 <HAL_RCC_OscConfig+0xcc8>)
 810142e:	681b      	ldr	r3, [r3, #0]
 8101430:	4a88      	ldr	r2, [pc, #544]	@ (8101654 <HAL_RCC_OscConfig+0xcc8>)
 8101432:	f023 0310 	bic.w	r3, r3, #16
 8101436:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8101438:	f7ff f898 	bl	810056c <HAL_GetTick>
 810143c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 810143e:	e008      	b.n	8101452 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8101440:	f7ff f894 	bl	810056c <HAL_GetTick>
 8101444:	4602      	mov	r2, r0
 8101446:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8101448:	1ad3      	subs	r3, r2, r3
 810144a:	2b02      	cmp	r3, #2
 810144c:	d901      	bls.n	8101452 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 810144e:	2303      	movs	r3, #3
 8101450:	e171      	b.n	8101736 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8101452:	4b80      	ldr	r3, [pc, #512]	@ (8101654 <HAL_RCC_OscConfig+0xcc8>)
 8101454:	681b      	ldr	r3, [r3, #0]
 8101456:	f003 0320 	and.w	r3, r3, #32
 810145a:	2b00      	cmp	r3, #0
 810145c:	d1f0      	bne.n	8101440 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 810145e:	687b      	ldr	r3, [r7, #4]
 8101460:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8101462:	2b00      	cmp	r3, #0
 8101464:	f000 8166 	beq.w	8101734 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8101468:	2300      	movs	r3, #0
 810146a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 810146e:	4b79      	ldr	r3, [pc, #484]	@ (8101654 <HAL_RCC_OscConfig+0xcc8>)
 8101470:	69db      	ldr	r3, [r3, #28]
 8101472:	f003 030c 	and.w	r3, r3, #12
 8101476:	2b0c      	cmp	r3, #12
 8101478:	f000 80f2 	beq.w	8101660 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 810147c:	687b      	ldr	r3, [r7, #4]
 810147e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8101480:	2b02      	cmp	r3, #2
 8101482:	f040 80c5 	bne.w	8101610 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8101486:	4b73      	ldr	r3, [pc, #460]	@ (8101654 <HAL_RCC_OscConfig+0xcc8>)
 8101488:	681b      	ldr	r3, [r3, #0]
 810148a:	4a72      	ldr	r2, [pc, #456]	@ (8101654 <HAL_RCC_OscConfig+0xcc8>)
 810148c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8101490:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8101492:	f7ff f86b 	bl	810056c <HAL_GetTick>
 8101496:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8101498:	e008      	b.n	81014ac <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 810149a:	f7ff f867 	bl	810056c <HAL_GetTick>
 810149e:	4602      	mov	r2, r0
 81014a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81014a2:	1ad3      	subs	r3, r2, r3
 81014a4:	2b02      	cmp	r3, #2
 81014a6:	d901      	bls.n	81014ac <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 81014a8:	2303      	movs	r3, #3
 81014aa:	e144      	b.n	8101736 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 81014ac:	4b69      	ldr	r3, [pc, #420]	@ (8101654 <HAL_RCC_OscConfig+0xcc8>)
 81014ae:	681b      	ldr	r3, [r3, #0]
 81014b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 81014b4:	2b00      	cmp	r3, #0
 81014b6:	d1f0      	bne.n	810149a <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 81014b8:	4b66      	ldr	r3, [pc, #408]	@ (8101654 <HAL_RCC_OscConfig+0xcc8>)
 81014ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 81014be:	f003 0304 	and.w	r3, r3, #4
 81014c2:	2b00      	cmp	r3, #0
 81014c4:	d111      	bne.n	81014ea <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 81014c6:	4b63      	ldr	r3, [pc, #396]	@ (8101654 <HAL_RCC_OscConfig+0xcc8>)
 81014c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 81014cc:	4a61      	ldr	r2, [pc, #388]	@ (8101654 <HAL_RCC_OscConfig+0xcc8>)
 81014ce:	f043 0304 	orr.w	r3, r3, #4
 81014d2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 81014d6:	4b5f      	ldr	r3, [pc, #380]	@ (8101654 <HAL_RCC_OscConfig+0xcc8>)
 81014d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 81014dc:	f003 0304 	and.w	r3, r3, #4
 81014e0:	60fb      	str	r3, [r7, #12]
 81014e2:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 81014e4:	2301      	movs	r3, #1
 81014e6:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 81014ea:	4b5b      	ldr	r3, [pc, #364]	@ (8101658 <HAL_RCC_OscConfig+0xccc>)
 81014ec:	68db      	ldr	r3, [r3, #12]
 81014ee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 81014f2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 81014f6:	d102      	bne.n	81014fe <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 81014f8:	2301      	movs	r3, #1
 81014fa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 81014fe:	4b56      	ldr	r3, [pc, #344]	@ (8101658 <HAL_RCC_OscConfig+0xccc>)
 8101500:	68db      	ldr	r3, [r3, #12]
 8101502:	4a55      	ldr	r2, [pc, #340]	@ (8101658 <HAL_RCC_OscConfig+0xccc>)
 8101504:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8101508:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 810150a:	4b52      	ldr	r3, [pc, #328]	@ (8101654 <HAL_RCC_OscConfig+0xcc8>)
 810150c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810150e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8101512:	f023 0303 	bic.w	r3, r3, #3
 8101516:	687a      	ldr	r2, [r7, #4]
 8101518:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 810151a:	687a      	ldr	r2, [r7, #4]
 810151c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 810151e:	3a01      	subs	r2, #1
 8101520:	0212      	lsls	r2, r2, #8
 8101522:	4311      	orrs	r1, r2
 8101524:	687a      	ldr	r2, [r7, #4]
 8101526:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8101528:	430a      	orrs	r2, r1
 810152a:	494a      	ldr	r1, [pc, #296]	@ (8101654 <HAL_RCC_OscConfig+0xcc8>)
 810152c:	4313      	orrs	r3, r2
 810152e:	628b      	str	r3, [r1, #40]	@ 0x28
 8101530:	4b48      	ldr	r3, [pc, #288]	@ (8101654 <HAL_RCC_OscConfig+0xcc8>)
 8101532:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8101534:	4b49      	ldr	r3, [pc, #292]	@ (810165c <HAL_RCC_OscConfig+0xcd0>)
 8101536:	4013      	ands	r3, r2
 8101538:	687a      	ldr	r2, [r7, #4]
 810153a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 810153c:	3a01      	subs	r2, #1
 810153e:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8101542:	687a      	ldr	r2, [r7, #4]
 8101544:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8101546:	3a01      	subs	r2, #1
 8101548:	0252      	lsls	r2, r2, #9
 810154a:	b292      	uxth	r2, r2
 810154c:	4311      	orrs	r1, r2
 810154e:	687a      	ldr	r2, [r7, #4]
 8101550:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8101552:	3a01      	subs	r2, #1
 8101554:	0412      	lsls	r2, r2, #16
 8101556:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 810155a:	4311      	orrs	r1, r2
 810155c:	687a      	ldr	r2, [r7, #4]
 810155e:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8101560:	3a01      	subs	r2, #1
 8101562:	0612      	lsls	r2, r2, #24
 8101564:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8101568:	430a      	orrs	r2, r1
 810156a:	493a      	ldr	r1, [pc, #232]	@ (8101654 <HAL_RCC_OscConfig+0xcc8>)
 810156c:	4313      	orrs	r3, r2
 810156e:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8101570:	4b38      	ldr	r3, [pc, #224]	@ (8101654 <HAL_RCC_OscConfig+0xcc8>)
 8101572:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8101574:	4a37      	ldr	r2, [pc, #220]	@ (8101654 <HAL_RCC_OscConfig+0xcc8>)
 8101576:	f023 0310 	bic.w	r3, r3, #16
 810157a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 810157c:	687b      	ldr	r3, [r7, #4]
 810157e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8101580:	4a34      	ldr	r2, [pc, #208]	@ (8101654 <HAL_RCC_OscConfig+0xcc8>)
 8101582:	00db      	lsls	r3, r3, #3
 8101584:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8101586:	4b33      	ldr	r3, [pc, #204]	@ (8101654 <HAL_RCC_OscConfig+0xcc8>)
 8101588:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810158a:	4a32      	ldr	r2, [pc, #200]	@ (8101654 <HAL_RCC_OscConfig+0xcc8>)
 810158c:	f043 0310 	orr.w	r3, r3, #16
 8101590:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8101592:	4b30      	ldr	r3, [pc, #192]	@ (8101654 <HAL_RCC_OscConfig+0xcc8>)
 8101594:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8101596:	f023 020c 	bic.w	r2, r3, #12
 810159a:	687b      	ldr	r3, [r7, #4]
 810159c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810159e:	492d      	ldr	r1, [pc, #180]	@ (8101654 <HAL_RCC_OscConfig+0xcc8>)
 81015a0:	4313      	orrs	r3, r2
 81015a2:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 81015a4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 81015a8:	2b01      	cmp	r3, #1
 81015aa:	d105      	bne.n	81015b8 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 81015ac:	4b2a      	ldr	r3, [pc, #168]	@ (8101658 <HAL_RCC_OscConfig+0xccc>)
 81015ae:	68db      	ldr	r3, [r3, #12]
 81015b0:	4a29      	ldr	r2, [pc, #164]	@ (8101658 <HAL_RCC_OscConfig+0xccc>)
 81015b2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 81015b6:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 81015b8:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 81015bc:	2b01      	cmp	r3, #1
 81015be:	d107      	bne.n	81015d0 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 81015c0:	4b24      	ldr	r3, [pc, #144]	@ (8101654 <HAL_RCC_OscConfig+0xcc8>)
 81015c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 81015c6:	4a23      	ldr	r2, [pc, #140]	@ (8101654 <HAL_RCC_OscConfig+0xcc8>)
 81015c8:	f023 0304 	bic.w	r3, r3, #4
 81015cc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 81015d0:	4b20      	ldr	r3, [pc, #128]	@ (8101654 <HAL_RCC_OscConfig+0xcc8>)
 81015d2:	681b      	ldr	r3, [r3, #0]
 81015d4:	4a1f      	ldr	r2, [pc, #124]	@ (8101654 <HAL_RCC_OscConfig+0xcc8>)
 81015d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 81015da:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 81015dc:	f7fe ffc6 	bl	810056c <HAL_GetTick>
 81015e0:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 81015e2:	e008      	b.n	81015f6 <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 81015e4:	f7fe ffc2 	bl	810056c <HAL_GetTick>
 81015e8:	4602      	mov	r2, r0
 81015ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81015ec:	1ad3      	subs	r3, r2, r3
 81015ee:	2b02      	cmp	r3, #2
 81015f0:	d901      	bls.n	81015f6 <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 81015f2:	2303      	movs	r3, #3
 81015f4:	e09f      	b.n	8101736 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 81015f6:	4b17      	ldr	r3, [pc, #92]	@ (8101654 <HAL_RCC_OscConfig+0xcc8>)
 81015f8:	681b      	ldr	r3, [r3, #0]
 81015fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 81015fe:	2b00      	cmp	r3, #0
 8101600:	d0f0      	beq.n	81015e4 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8101602:	4b14      	ldr	r3, [pc, #80]	@ (8101654 <HAL_RCC_OscConfig+0xcc8>)
 8101604:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8101606:	4a13      	ldr	r2, [pc, #76]	@ (8101654 <HAL_RCC_OscConfig+0xcc8>)
 8101608:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 810160c:	6293      	str	r3, [r2, #40]	@ 0x28
 810160e:	e091      	b.n	8101734 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8101610:	4b10      	ldr	r3, [pc, #64]	@ (8101654 <HAL_RCC_OscConfig+0xcc8>)
 8101612:	681b      	ldr	r3, [r3, #0]
 8101614:	4a0f      	ldr	r2, [pc, #60]	@ (8101654 <HAL_RCC_OscConfig+0xcc8>)
 8101616:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 810161a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 810161c:	f7fe ffa6 	bl	810056c <HAL_GetTick>
 8101620:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8101622:	e008      	b.n	8101636 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8101624:	f7fe ffa2 	bl	810056c <HAL_GetTick>
 8101628:	4602      	mov	r2, r0
 810162a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810162c:	1ad3      	subs	r3, r2, r3
 810162e:	2b02      	cmp	r3, #2
 8101630:	d901      	bls.n	8101636 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8101632:	2303      	movs	r3, #3
 8101634:	e07f      	b.n	8101736 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8101636:	4b07      	ldr	r3, [pc, #28]	@ (8101654 <HAL_RCC_OscConfig+0xcc8>)
 8101638:	681b      	ldr	r3, [r3, #0]
 810163a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 810163e:	2b00      	cmp	r3, #0
 8101640:	d1f0      	bne.n	8101624 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8101642:	4b04      	ldr	r3, [pc, #16]	@ (8101654 <HAL_RCC_OscConfig+0xcc8>)
 8101644:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8101646:	4a03      	ldr	r2, [pc, #12]	@ (8101654 <HAL_RCC_OscConfig+0xcc8>)
 8101648:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 810164c:	f023 0303 	bic.w	r3, r3, #3
 8101650:	6293      	str	r3, [r2, #40]	@ 0x28
 8101652:	e06f      	b.n	8101734 <HAL_RCC_OscConfig+0xda8>
 8101654:	46020c00 	.word	0x46020c00
 8101658:	46020800 	.word	0x46020800
 810165c:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8101660:	4b37      	ldr	r3, [pc, #220]	@ (8101740 <HAL_RCC_OscConfig+0xdb4>)
 8101662:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8101664:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8101666:	4b36      	ldr	r3, [pc, #216]	@ (8101740 <HAL_RCC_OscConfig+0xdb4>)
 8101668:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810166a:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 810166c:	687b      	ldr	r3, [r7, #4]
 810166e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8101670:	2b01      	cmp	r3, #1
 8101672:	d039      	beq.n	81016e8 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8101674:	69fb      	ldr	r3, [r7, #28]
 8101676:	f003 0203 	and.w	r2, r3, #3
 810167a:	687b      	ldr	r3, [r7, #4]
 810167c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 810167e:	429a      	cmp	r2, r3
 8101680:	d132      	bne.n	81016e8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8101682:	69fb      	ldr	r3, [r7, #28]
 8101684:	0a1b      	lsrs	r3, r3, #8
 8101686:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 810168a:	687b      	ldr	r3, [r7, #4]
 810168c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810168e:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8101690:	429a      	cmp	r2, r3
 8101692:	d129      	bne.n	81016e8 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8101694:	69fb      	ldr	r3, [r7, #28]
 8101696:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 810169a:	687b      	ldr	r3, [r7, #4]
 810169c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 810169e:	429a      	cmp	r2, r3
 81016a0:	d122      	bne.n	81016e8 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 81016a2:	69bb      	ldr	r3, [r7, #24]
 81016a4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 81016a8:	687b      	ldr	r3, [r7, #4]
 81016aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 81016ac:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 81016ae:	429a      	cmp	r2, r3
 81016b0:	d11a      	bne.n	81016e8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 81016b2:	69bb      	ldr	r3, [r7, #24]
 81016b4:	0a5b      	lsrs	r3, r3, #9
 81016b6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 81016ba:	687b      	ldr	r3, [r7, #4]
 81016bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81016be:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 81016c0:	429a      	cmp	r2, r3
 81016c2:	d111      	bne.n	81016e8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 81016c4:	69bb      	ldr	r3, [r7, #24]
 81016c6:	0c1b      	lsrs	r3, r3, #16
 81016c8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 81016cc:	687b      	ldr	r3, [r7, #4]
 81016ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81016d0:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 81016d2:	429a      	cmp	r2, r3
 81016d4:	d108      	bne.n	81016e8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 81016d6:	69bb      	ldr	r3, [r7, #24]
 81016d8:	0e1b      	lsrs	r3, r3, #24
 81016da:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 81016de:	687b      	ldr	r3, [r7, #4]
 81016e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81016e2:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 81016e4:	429a      	cmp	r2, r3
 81016e6:	d001      	beq.n	81016ec <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 81016e8:	2301      	movs	r3, #1
 81016ea:	e024      	b.n	8101736 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 81016ec:	4b14      	ldr	r3, [pc, #80]	@ (8101740 <HAL_RCC_OscConfig+0xdb4>)
 81016ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81016f0:	08db      	lsrs	r3, r3, #3
 81016f2:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 81016f6:	687b      	ldr	r3, [r7, #4]
 81016f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 81016fa:	429a      	cmp	r2, r3
 81016fc:	d01a      	beq.n	8101734 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 81016fe:	4b10      	ldr	r3, [pc, #64]	@ (8101740 <HAL_RCC_OscConfig+0xdb4>)
 8101700:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8101702:	4a0f      	ldr	r2, [pc, #60]	@ (8101740 <HAL_RCC_OscConfig+0xdb4>)
 8101704:	f023 0310 	bic.w	r3, r3, #16
 8101708:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 810170a:	f7fe ff2f 	bl	810056c <HAL_GetTick>
 810170e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8101710:	bf00      	nop
 8101712:	f7fe ff2b 	bl	810056c <HAL_GetTick>
 8101716:	4602      	mov	r2, r0
 8101718:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810171a:	4293      	cmp	r3, r2
 810171c:	d0f9      	beq.n	8101712 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 810171e:	687b      	ldr	r3, [r7, #4]
 8101720:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8101722:	4a07      	ldr	r2, [pc, #28]	@ (8101740 <HAL_RCC_OscConfig+0xdb4>)
 8101724:	00db      	lsls	r3, r3, #3
 8101726:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8101728:	4b05      	ldr	r3, [pc, #20]	@ (8101740 <HAL_RCC_OscConfig+0xdb4>)
 810172a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810172c:	4a04      	ldr	r2, [pc, #16]	@ (8101740 <HAL_RCC_OscConfig+0xdb4>)
 810172e:	f043 0310 	orr.w	r3, r3, #16
 8101732:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8101734:	2300      	movs	r3, #0
}
 8101736:	4618      	mov	r0, r3
 8101738:	3738      	adds	r7, #56	@ 0x38
 810173a:	46bd      	mov	sp, r7
 810173c:	bd80      	pop	{r7, pc}
 810173e:	bf00      	nop
 8101740:	46020c00 	.word	0x46020c00

08101744 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8101744:	b580      	push	{r7, lr}
 8101746:	b086      	sub	sp, #24
 8101748:	af00      	add	r7, sp, #0
 810174a:	6078      	str	r0, [r7, #4]
 810174c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 810174e:	687b      	ldr	r3, [r7, #4]
 8101750:	2b00      	cmp	r3, #0
 8101752:	d101      	bne.n	8101758 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8101754:	2301      	movs	r3, #1
 8101756:	e1d9      	b.n	8101b0c <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8101758:	4b9b      	ldr	r3, [pc, #620]	@ (81019c8 <HAL_RCC_ClockConfig+0x284>)
 810175a:	681b      	ldr	r3, [r3, #0]
 810175c:	f003 030f 	and.w	r3, r3, #15
 8101760:	683a      	ldr	r2, [r7, #0]
 8101762:	429a      	cmp	r2, r3
 8101764:	d910      	bls.n	8101788 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8101766:	4b98      	ldr	r3, [pc, #608]	@ (81019c8 <HAL_RCC_ClockConfig+0x284>)
 8101768:	681b      	ldr	r3, [r3, #0]
 810176a:	f023 020f 	bic.w	r2, r3, #15
 810176e:	4996      	ldr	r1, [pc, #600]	@ (81019c8 <HAL_RCC_ClockConfig+0x284>)
 8101770:	683b      	ldr	r3, [r7, #0]
 8101772:	4313      	orrs	r3, r2
 8101774:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8101776:	4b94      	ldr	r3, [pc, #592]	@ (81019c8 <HAL_RCC_ClockConfig+0x284>)
 8101778:	681b      	ldr	r3, [r3, #0]
 810177a:	f003 030f 	and.w	r3, r3, #15
 810177e:	683a      	ldr	r2, [r7, #0]
 8101780:	429a      	cmp	r2, r3
 8101782:	d001      	beq.n	8101788 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8101784:	2301      	movs	r3, #1
 8101786:	e1c1      	b.n	8101b0c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8101788:	687b      	ldr	r3, [r7, #4]
 810178a:	681b      	ldr	r3, [r3, #0]
 810178c:	f003 0310 	and.w	r3, r3, #16
 8101790:	2b00      	cmp	r3, #0
 8101792:	d010      	beq.n	81017b6 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8101794:	687b      	ldr	r3, [r7, #4]
 8101796:	695a      	ldr	r2, [r3, #20]
 8101798:	4b8c      	ldr	r3, [pc, #560]	@ (81019cc <HAL_RCC_ClockConfig+0x288>)
 810179a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810179c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 81017a0:	429a      	cmp	r2, r3
 81017a2:	d908      	bls.n	81017b6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 81017a4:	4b89      	ldr	r3, [pc, #548]	@ (81019cc <HAL_RCC_ClockConfig+0x288>)
 81017a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81017a8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 81017ac:	687b      	ldr	r3, [r7, #4]
 81017ae:	695b      	ldr	r3, [r3, #20]
 81017b0:	4986      	ldr	r1, [pc, #536]	@ (81019cc <HAL_RCC_ClockConfig+0x288>)
 81017b2:	4313      	orrs	r3, r2
 81017b4:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 81017b6:	687b      	ldr	r3, [r7, #4]
 81017b8:	681b      	ldr	r3, [r3, #0]
 81017ba:	f003 0308 	and.w	r3, r3, #8
 81017be:	2b00      	cmp	r3, #0
 81017c0:	d012      	beq.n	81017e8 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 81017c2:	687b      	ldr	r3, [r7, #4]
 81017c4:	691a      	ldr	r2, [r3, #16]
 81017c6:	4b81      	ldr	r3, [pc, #516]	@ (81019cc <HAL_RCC_ClockConfig+0x288>)
 81017c8:	6a1b      	ldr	r3, [r3, #32]
 81017ca:	091b      	lsrs	r3, r3, #4
 81017cc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 81017d0:	429a      	cmp	r2, r3
 81017d2:	d909      	bls.n	81017e8 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 81017d4:	4b7d      	ldr	r3, [pc, #500]	@ (81019cc <HAL_RCC_ClockConfig+0x288>)
 81017d6:	6a1b      	ldr	r3, [r3, #32]
 81017d8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 81017dc:	687b      	ldr	r3, [r7, #4]
 81017de:	691b      	ldr	r3, [r3, #16]
 81017e0:	011b      	lsls	r3, r3, #4
 81017e2:	497a      	ldr	r1, [pc, #488]	@ (81019cc <HAL_RCC_ClockConfig+0x288>)
 81017e4:	4313      	orrs	r3, r2
 81017e6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 81017e8:	687b      	ldr	r3, [r7, #4]
 81017ea:	681b      	ldr	r3, [r3, #0]
 81017ec:	f003 0304 	and.w	r3, r3, #4
 81017f0:	2b00      	cmp	r3, #0
 81017f2:	d010      	beq.n	8101816 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 81017f4:	687b      	ldr	r3, [r7, #4]
 81017f6:	68da      	ldr	r2, [r3, #12]
 81017f8:	4b74      	ldr	r3, [pc, #464]	@ (81019cc <HAL_RCC_ClockConfig+0x288>)
 81017fa:	6a1b      	ldr	r3, [r3, #32]
 81017fc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8101800:	429a      	cmp	r2, r3
 8101802:	d908      	bls.n	8101816 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8101804:	4b71      	ldr	r3, [pc, #452]	@ (81019cc <HAL_RCC_ClockConfig+0x288>)
 8101806:	6a1b      	ldr	r3, [r3, #32]
 8101808:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 810180c:	687b      	ldr	r3, [r7, #4]
 810180e:	68db      	ldr	r3, [r3, #12]
 8101810:	496e      	ldr	r1, [pc, #440]	@ (81019cc <HAL_RCC_ClockConfig+0x288>)
 8101812:	4313      	orrs	r3, r2
 8101814:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8101816:	687b      	ldr	r3, [r7, #4]
 8101818:	681b      	ldr	r3, [r3, #0]
 810181a:	f003 0302 	and.w	r3, r3, #2
 810181e:	2b00      	cmp	r3, #0
 8101820:	d010      	beq.n	8101844 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8101822:	687b      	ldr	r3, [r7, #4]
 8101824:	689a      	ldr	r2, [r3, #8]
 8101826:	4b69      	ldr	r3, [pc, #420]	@ (81019cc <HAL_RCC_ClockConfig+0x288>)
 8101828:	6a1b      	ldr	r3, [r3, #32]
 810182a:	f003 030f 	and.w	r3, r3, #15
 810182e:	429a      	cmp	r2, r3
 8101830:	d908      	bls.n	8101844 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8101832:	4b66      	ldr	r3, [pc, #408]	@ (81019cc <HAL_RCC_ClockConfig+0x288>)
 8101834:	6a1b      	ldr	r3, [r3, #32]
 8101836:	f023 020f 	bic.w	r2, r3, #15
 810183a:	687b      	ldr	r3, [r7, #4]
 810183c:	689b      	ldr	r3, [r3, #8]
 810183e:	4963      	ldr	r1, [pc, #396]	@ (81019cc <HAL_RCC_ClockConfig+0x288>)
 8101840:	4313      	orrs	r3, r2
 8101842:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8101844:	687b      	ldr	r3, [r7, #4]
 8101846:	681b      	ldr	r3, [r3, #0]
 8101848:	f003 0301 	and.w	r3, r3, #1
 810184c:	2b00      	cmp	r3, #0
 810184e:	f000 80d2 	beq.w	81019f6 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8101852:	2300      	movs	r3, #0
 8101854:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8101856:	687b      	ldr	r3, [r7, #4]
 8101858:	685b      	ldr	r3, [r3, #4]
 810185a:	2b03      	cmp	r3, #3
 810185c:	d143      	bne.n	81018e6 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 810185e:	4b5b      	ldr	r3, [pc, #364]	@ (81019cc <HAL_RCC_ClockConfig+0x288>)
 8101860:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8101864:	f003 0304 	and.w	r3, r3, #4
 8101868:	2b00      	cmp	r3, #0
 810186a:	d110      	bne.n	810188e <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 810186c:	4b57      	ldr	r3, [pc, #348]	@ (81019cc <HAL_RCC_ClockConfig+0x288>)
 810186e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8101872:	4a56      	ldr	r2, [pc, #344]	@ (81019cc <HAL_RCC_ClockConfig+0x288>)
 8101874:	f043 0304 	orr.w	r3, r3, #4
 8101878:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 810187c:	4b53      	ldr	r3, [pc, #332]	@ (81019cc <HAL_RCC_ClockConfig+0x288>)
 810187e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8101882:	f003 0304 	and.w	r3, r3, #4
 8101886:	60bb      	str	r3, [r7, #8]
 8101888:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 810188a:	2301      	movs	r3, #1
 810188c:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 810188e:	f7fe fe6d 	bl	810056c <HAL_GetTick>
 8101892:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8101894:	4b4e      	ldr	r3, [pc, #312]	@ (81019d0 <HAL_RCC_ClockConfig+0x28c>)
 8101896:	68db      	ldr	r3, [r3, #12]
 8101898:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 810189c:	2b00      	cmp	r3, #0
 810189e:	d00f      	beq.n	81018c0 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 81018a0:	e008      	b.n	81018b4 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 81018a2:	f7fe fe63 	bl	810056c <HAL_GetTick>
 81018a6:	4602      	mov	r2, r0
 81018a8:	693b      	ldr	r3, [r7, #16]
 81018aa:	1ad3      	subs	r3, r2, r3
 81018ac:	2b02      	cmp	r3, #2
 81018ae:	d901      	bls.n	81018b4 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 81018b0:	2303      	movs	r3, #3
 81018b2:	e12b      	b.n	8101b0c <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 81018b4:	4b46      	ldr	r3, [pc, #280]	@ (81019d0 <HAL_RCC_ClockConfig+0x28c>)
 81018b6:	68db      	ldr	r3, [r3, #12]
 81018b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 81018bc:	2b00      	cmp	r3, #0
 81018be:	d0f0      	beq.n	81018a2 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 81018c0:	7dfb      	ldrb	r3, [r7, #23]
 81018c2:	2b01      	cmp	r3, #1
 81018c4:	d107      	bne.n	81018d6 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 81018c6:	4b41      	ldr	r3, [pc, #260]	@ (81019cc <HAL_RCC_ClockConfig+0x288>)
 81018c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 81018cc:	4a3f      	ldr	r2, [pc, #252]	@ (81019cc <HAL_RCC_ClockConfig+0x288>)
 81018ce:	f023 0304 	bic.w	r3, r3, #4
 81018d2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 81018d6:	4b3d      	ldr	r3, [pc, #244]	@ (81019cc <HAL_RCC_ClockConfig+0x288>)
 81018d8:	681b      	ldr	r3, [r3, #0]
 81018da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 81018de:	2b00      	cmp	r3, #0
 81018e0:	d121      	bne.n	8101926 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 81018e2:	2301      	movs	r3, #1
 81018e4:	e112      	b.n	8101b0c <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 81018e6:	687b      	ldr	r3, [r7, #4]
 81018e8:	685b      	ldr	r3, [r3, #4]
 81018ea:	2b02      	cmp	r3, #2
 81018ec:	d107      	bne.n	81018fe <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 81018ee:	4b37      	ldr	r3, [pc, #220]	@ (81019cc <HAL_RCC_ClockConfig+0x288>)
 81018f0:	681b      	ldr	r3, [r3, #0]
 81018f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 81018f6:	2b00      	cmp	r3, #0
 81018f8:	d115      	bne.n	8101926 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 81018fa:	2301      	movs	r3, #1
 81018fc:	e106      	b.n	8101b0c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 81018fe:	687b      	ldr	r3, [r7, #4]
 8101900:	685b      	ldr	r3, [r3, #4]
 8101902:	2b00      	cmp	r3, #0
 8101904:	d107      	bne.n	8101916 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8101906:	4b31      	ldr	r3, [pc, #196]	@ (81019cc <HAL_RCC_ClockConfig+0x288>)
 8101908:	681b      	ldr	r3, [r3, #0]
 810190a:	f003 0304 	and.w	r3, r3, #4
 810190e:	2b00      	cmp	r3, #0
 8101910:	d109      	bne.n	8101926 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8101912:	2301      	movs	r3, #1
 8101914:	e0fa      	b.n	8101b0c <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8101916:	4b2d      	ldr	r3, [pc, #180]	@ (81019cc <HAL_RCC_ClockConfig+0x288>)
 8101918:	681b      	ldr	r3, [r3, #0]
 810191a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 810191e:	2b00      	cmp	r3, #0
 8101920:	d101      	bne.n	8101926 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8101922:	2301      	movs	r3, #1
 8101924:	e0f2      	b.n	8101b0c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8101926:	4b29      	ldr	r3, [pc, #164]	@ (81019cc <HAL_RCC_ClockConfig+0x288>)
 8101928:	69db      	ldr	r3, [r3, #28]
 810192a:	f023 0203 	bic.w	r2, r3, #3
 810192e:	687b      	ldr	r3, [r7, #4]
 8101930:	685b      	ldr	r3, [r3, #4]
 8101932:	4926      	ldr	r1, [pc, #152]	@ (81019cc <HAL_RCC_ClockConfig+0x288>)
 8101934:	4313      	orrs	r3, r2
 8101936:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8101938:	f7fe fe18 	bl	810056c <HAL_GetTick>
 810193c:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 810193e:	687b      	ldr	r3, [r7, #4]
 8101940:	685b      	ldr	r3, [r3, #4]
 8101942:	2b03      	cmp	r3, #3
 8101944:	d112      	bne.n	810196c <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8101946:	e00a      	b.n	810195e <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8101948:	f7fe fe10 	bl	810056c <HAL_GetTick>
 810194c:	4602      	mov	r2, r0
 810194e:	693b      	ldr	r3, [r7, #16]
 8101950:	1ad3      	subs	r3, r2, r3
 8101952:	f241 3288 	movw	r2, #5000	@ 0x1388
 8101956:	4293      	cmp	r3, r2
 8101958:	d901      	bls.n	810195e <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 810195a:	2303      	movs	r3, #3
 810195c:	e0d6      	b.n	8101b0c <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 810195e:	4b1b      	ldr	r3, [pc, #108]	@ (81019cc <HAL_RCC_ClockConfig+0x288>)
 8101960:	69db      	ldr	r3, [r3, #28]
 8101962:	f003 030c 	and.w	r3, r3, #12
 8101966:	2b0c      	cmp	r3, #12
 8101968:	d1ee      	bne.n	8101948 <HAL_RCC_ClockConfig+0x204>
 810196a:	e044      	b.n	81019f6 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 810196c:	687b      	ldr	r3, [r7, #4]
 810196e:	685b      	ldr	r3, [r3, #4]
 8101970:	2b02      	cmp	r3, #2
 8101972:	d112      	bne.n	810199a <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8101974:	e00a      	b.n	810198c <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8101976:	f7fe fdf9 	bl	810056c <HAL_GetTick>
 810197a:	4602      	mov	r2, r0
 810197c:	693b      	ldr	r3, [r7, #16]
 810197e:	1ad3      	subs	r3, r2, r3
 8101980:	f241 3288 	movw	r2, #5000	@ 0x1388
 8101984:	4293      	cmp	r3, r2
 8101986:	d901      	bls.n	810198c <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8101988:	2303      	movs	r3, #3
 810198a:	e0bf      	b.n	8101b0c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 810198c:	4b0f      	ldr	r3, [pc, #60]	@ (81019cc <HAL_RCC_ClockConfig+0x288>)
 810198e:	69db      	ldr	r3, [r3, #28]
 8101990:	f003 030c 	and.w	r3, r3, #12
 8101994:	2b08      	cmp	r3, #8
 8101996:	d1ee      	bne.n	8101976 <HAL_RCC_ClockConfig+0x232>
 8101998:	e02d      	b.n	81019f6 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 810199a:	687b      	ldr	r3, [r7, #4]
 810199c:	685b      	ldr	r3, [r3, #4]
 810199e:	2b00      	cmp	r3, #0
 81019a0:	d123      	bne.n	81019ea <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 81019a2:	e00a      	b.n	81019ba <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 81019a4:	f7fe fde2 	bl	810056c <HAL_GetTick>
 81019a8:	4602      	mov	r2, r0
 81019aa:	693b      	ldr	r3, [r7, #16]
 81019ac:	1ad3      	subs	r3, r2, r3
 81019ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 81019b2:	4293      	cmp	r3, r2
 81019b4:	d901      	bls.n	81019ba <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 81019b6:	2303      	movs	r3, #3
 81019b8:	e0a8      	b.n	8101b0c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 81019ba:	4b04      	ldr	r3, [pc, #16]	@ (81019cc <HAL_RCC_ClockConfig+0x288>)
 81019bc:	69db      	ldr	r3, [r3, #28]
 81019be:	f003 030c 	and.w	r3, r3, #12
 81019c2:	2b00      	cmp	r3, #0
 81019c4:	d1ee      	bne.n	81019a4 <HAL_RCC_ClockConfig+0x260>
 81019c6:	e016      	b.n	81019f6 <HAL_RCC_ClockConfig+0x2b2>
 81019c8:	40022000 	.word	0x40022000
 81019cc:	46020c00 	.word	0x46020c00
 81019d0:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 81019d4:	f7fe fdca 	bl	810056c <HAL_GetTick>
 81019d8:	4602      	mov	r2, r0
 81019da:	693b      	ldr	r3, [r7, #16]
 81019dc:	1ad3      	subs	r3, r2, r3
 81019de:	f241 3288 	movw	r2, #5000	@ 0x1388
 81019e2:	4293      	cmp	r3, r2
 81019e4:	d901      	bls.n	81019ea <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 81019e6:	2303      	movs	r3, #3
 81019e8:	e090      	b.n	8101b0c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 81019ea:	4b4a      	ldr	r3, [pc, #296]	@ (8101b14 <HAL_RCC_ClockConfig+0x3d0>)
 81019ec:	69db      	ldr	r3, [r3, #28]
 81019ee:	f003 030c 	and.w	r3, r3, #12
 81019f2:	2b04      	cmp	r3, #4
 81019f4:	d1ee      	bne.n	81019d4 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 81019f6:	687b      	ldr	r3, [r7, #4]
 81019f8:	681b      	ldr	r3, [r3, #0]
 81019fa:	f003 0302 	and.w	r3, r3, #2
 81019fe:	2b00      	cmp	r3, #0
 8101a00:	d010      	beq.n	8101a24 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8101a02:	687b      	ldr	r3, [r7, #4]
 8101a04:	689a      	ldr	r2, [r3, #8]
 8101a06:	4b43      	ldr	r3, [pc, #268]	@ (8101b14 <HAL_RCC_ClockConfig+0x3d0>)
 8101a08:	6a1b      	ldr	r3, [r3, #32]
 8101a0a:	f003 030f 	and.w	r3, r3, #15
 8101a0e:	429a      	cmp	r2, r3
 8101a10:	d208      	bcs.n	8101a24 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8101a12:	4b40      	ldr	r3, [pc, #256]	@ (8101b14 <HAL_RCC_ClockConfig+0x3d0>)
 8101a14:	6a1b      	ldr	r3, [r3, #32]
 8101a16:	f023 020f 	bic.w	r2, r3, #15
 8101a1a:	687b      	ldr	r3, [r7, #4]
 8101a1c:	689b      	ldr	r3, [r3, #8]
 8101a1e:	493d      	ldr	r1, [pc, #244]	@ (8101b14 <HAL_RCC_ClockConfig+0x3d0>)
 8101a20:	4313      	orrs	r3, r2
 8101a22:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8101a24:	4b3c      	ldr	r3, [pc, #240]	@ (8101b18 <HAL_RCC_ClockConfig+0x3d4>)
 8101a26:	681b      	ldr	r3, [r3, #0]
 8101a28:	f003 030f 	and.w	r3, r3, #15
 8101a2c:	683a      	ldr	r2, [r7, #0]
 8101a2e:	429a      	cmp	r2, r3
 8101a30:	d210      	bcs.n	8101a54 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8101a32:	4b39      	ldr	r3, [pc, #228]	@ (8101b18 <HAL_RCC_ClockConfig+0x3d4>)
 8101a34:	681b      	ldr	r3, [r3, #0]
 8101a36:	f023 020f 	bic.w	r2, r3, #15
 8101a3a:	4937      	ldr	r1, [pc, #220]	@ (8101b18 <HAL_RCC_ClockConfig+0x3d4>)
 8101a3c:	683b      	ldr	r3, [r7, #0]
 8101a3e:	4313      	orrs	r3, r2
 8101a40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8101a42:	4b35      	ldr	r3, [pc, #212]	@ (8101b18 <HAL_RCC_ClockConfig+0x3d4>)
 8101a44:	681b      	ldr	r3, [r3, #0]
 8101a46:	f003 030f 	and.w	r3, r3, #15
 8101a4a:	683a      	ldr	r2, [r7, #0]
 8101a4c:	429a      	cmp	r2, r3
 8101a4e:	d001      	beq.n	8101a54 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8101a50:	2301      	movs	r3, #1
 8101a52:	e05b      	b.n	8101b0c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8101a54:	687b      	ldr	r3, [r7, #4]
 8101a56:	681b      	ldr	r3, [r3, #0]
 8101a58:	f003 0304 	and.w	r3, r3, #4
 8101a5c:	2b00      	cmp	r3, #0
 8101a5e:	d010      	beq.n	8101a82 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8101a60:	687b      	ldr	r3, [r7, #4]
 8101a62:	68da      	ldr	r2, [r3, #12]
 8101a64:	4b2b      	ldr	r3, [pc, #172]	@ (8101b14 <HAL_RCC_ClockConfig+0x3d0>)
 8101a66:	6a1b      	ldr	r3, [r3, #32]
 8101a68:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8101a6c:	429a      	cmp	r2, r3
 8101a6e:	d208      	bcs.n	8101a82 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8101a70:	4b28      	ldr	r3, [pc, #160]	@ (8101b14 <HAL_RCC_ClockConfig+0x3d0>)
 8101a72:	6a1b      	ldr	r3, [r3, #32]
 8101a74:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8101a78:	687b      	ldr	r3, [r7, #4]
 8101a7a:	68db      	ldr	r3, [r3, #12]
 8101a7c:	4925      	ldr	r1, [pc, #148]	@ (8101b14 <HAL_RCC_ClockConfig+0x3d0>)
 8101a7e:	4313      	orrs	r3, r2
 8101a80:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8101a82:	687b      	ldr	r3, [r7, #4]
 8101a84:	681b      	ldr	r3, [r3, #0]
 8101a86:	f003 0308 	and.w	r3, r3, #8
 8101a8a:	2b00      	cmp	r3, #0
 8101a8c:	d012      	beq.n	8101ab4 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8101a8e:	687b      	ldr	r3, [r7, #4]
 8101a90:	691a      	ldr	r2, [r3, #16]
 8101a92:	4b20      	ldr	r3, [pc, #128]	@ (8101b14 <HAL_RCC_ClockConfig+0x3d0>)
 8101a94:	6a1b      	ldr	r3, [r3, #32]
 8101a96:	091b      	lsrs	r3, r3, #4
 8101a98:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8101a9c:	429a      	cmp	r2, r3
 8101a9e:	d209      	bcs.n	8101ab4 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8101aa0:	4b1c      	ldr	r3, [pc, #112]	@ (8101b14 <HAL_RCC_ClockConfig+0x3d0>)
 8101aa2:	6a1b      	ldr	r3, [r3, #32]
 8101aa4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8101aa8:	687b      	ldr	r3, [r7, #4]
 8101aaa:	691b      	ldr	r3, [r3, #16]
 8101aac:	011b      	lsls	r3, r3, #4
 8101aae:	4919      	ldr	r1, [pc, #100]	@ (8101b14 <HAL_RCC_ClockConfig+0x3d0>)
 8101ab0:	4313      	orrs	r3, r2
 8101ab2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8101ab4:	687b      	ldr	r3, [r7, #4]
 8101ab6:	681b      	ldr	r3, [r3, #0]
 8101ab8:	f003 0310 	and.w	r3, r3, #16
 8101abc:	2b00      	cmp	r3, #0
 8101abe:	d010      	beq.n	8101ae2 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8101ac0:	687b      	ldr	r3, [r7, #4]
 8101ac2:	695a      	ldr	r2, [r3, #20]
 8101ac4:	4b13      	ldr	r3, [pc, #76]	@ (8101b14 <HAL_RCC_ClockConfig+0x3d0>)
 8101ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8101ac8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8101acc:	429a      	cmp	r2, r3
 8101ace:	d208      	bcs.n	8101ae2 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8101ad0:	4b10      	ldr	r3, [pc, #64]	@ (8101b14 <HAL_RCC_ClockConfig+0x3d0>)
 8101ad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8101ad4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8101ad8:	687b      	ldr	r3, [r7, #4]
 8101ada:	695b      	ldr	r3, [r3, #20]
 8101adc:	490d      	ldr	r1, [pc, #52]	@ (8101b14 <HAL_RCC_ClockConfig+0x3d0>)
 8101ade:	4313      	orrs	r3, r2
 8101ae0:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8101ae2:	f000 f821 	bl	8101b28 <HAL_RCC_GetSysClockFreq>
 8101ae6:	4602      	mov	r2, r0
 8101ae8:	4b0a      	ldr	r3, [pc, #40]	@ (8101b14 <HAL_RCC_ClockConfig+0x3d0>)
 8101aea:	6a1b      	ldr	r3, [r3, #32]
 8101aec:	f003 030f 	and.w	r3, r3, #15
 8101af0:	490a      	ldr	r1, [pc, #40]	@ (8101b1c <HAL_RCC_ClockConfig+0x3d8>)
 8101af2:	5ccb      	ldrb	r3, [r1, r3]
 8101af4:	fa22 f303 	lsr.w	r3, r2, r3
 8101af8:	4a09      	ldr	r2, [pc, #36]	@ (8101b20 <HAL_RCC_ClockConfig+0x3dc>)
 8101afa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8101afc:	4b09      	ldr	r3, [pc, #36]	@ (8101b24 <HAL_RCC_ClockConfig+0x3e0>)
 8101afe:	681b      	ldr	r3, [r3, #0]
 8101b00:	4618      	mov	r0, r3
 8101b02:	f7fe fca9 	bl	8100458 <HAL_InitTick>
 8101b06:	4603      	mov	r3, r0
 8101b08:	73fb      	strb	r3, [r7, #15]

  return status;
 8101b0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8101b0c:	4618      	mov	r0, r3
 8101b0e:	3718      	adds	r7, #24
 8101b10:	46bd      	mov	sp, r7
 8101b12:	bd80      	pop	{r7, pc}
 8101b14:	46020c00 	.word	0x46020c00
 8101b18:	40022000 	.word	0x40022000
 8101b1c:	08101edc 	.word	0x08101edc
 8101b20:	20040000 	.word	0x20040000
 8101b24:	20040004 	.word	0x20040004

08101b28 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8101b28:	b480      	push	{r7}
 8101b2a:	b08b      	sub	sp, #44	@ 0x2c
 8101b2c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8101b2e:	2300      	movs	r3, #0
 8101b30:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8101b32:	2300      	movs	r3, #0
 8101b34:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8101b36:	4b78      	ldr	r3, [pc, #480]	@ (8101d18 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8101b38:	69db      	ldr	r3, [r3, #28]
 8101b3a:	f003 030c 	and.w	r3, r3, #12
 8101b3e:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8101b40:	4b75      	ldr	r3, [pc, #468]	@ (8101d18 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8101b42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8101b44:	f003 0303 	and.w	r3, r3, #3
 8101b48:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8101b4a:	69bb      	ldr	r3, [r7, #24]
 8101b4c:	2b00      	cmp	r3, #0
 8101b4e:	d005      	beq.n	8101b5c <HAL_RCC_GetSysClockFreq+0x34>
 8101b50:	69bb      	ldr	r3, [r7, #24]
 8101b52:	2b0c      	cmp	r3, #12
 8101b54:	d121      	bne.n	8101b9a <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8101b56:	697b      	ldr	r3, [r7, #20]
 8101b58:	2b01      	cmp	r3, #1
 8101b5a:	d11e      	bne.n	8101b9a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8101b5c:	4b6e      	ldr	r3, [pc, #440]	@ (8101d18 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8101b5e:	689b      	ldr	r3, [r3, #8]
 8101b60:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8101b64:	2b00      	cmp	r3, #0
 8101b66:	d107      	bne.n	8101b78 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8101b68:	4b6b      	ldr	r3, [pc, #428]	@ (8101d18 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8101b6a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8101b6e:	0b1b      	lsrs	r3, r3, #12
 8101b70:	f003 030f 	and.w	r3, r3, #15
 8101b74:	627b      	str	r3, [r7, #36]	@ 0x24
 8101b76:	e005      	b.n	8101b84 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8101b78:	4b67      	ldr	r3, [pc, #412]	@ (8101d18 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8101b7a:	689b      	ldr	r3, [r3, #8]
 8101b7c:	0f1b      	lsrs	r3, r3, #28
 8101b7e:	f003 030f 	and.w	r3, r3, #15
 8101b82:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8101b84:	4a65      	ldr	r2, [pc, #404]	@ (8101d1c <HAL_RCC_GetSysClockFreq+0x1f4>)
 8101b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8101b88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8101b8c:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8101b8e:	69bb      	ldr	r3, [r7, #24]
 8101b90:	2b00      	cmp	r3, #0
 8101b92:	d110      	bne.n	8101bb6 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8101b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8101b96:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8101b98:	e00d      	b.n	8101bb6 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8101b9a:	4b5f      	ldr	r3, [pc, #380]	@ (8101d18 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8101b9c:	69db      	ldr	r3, [r3, #28]
 8101b9e:	f003 030c 	and.w	r3, r3, #12
 8101ba2:	2b04      	cmp	r3, #4
 8101ba4:	d102      	bne.n	8101bac <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8101ba6:	4b5e      	ldr	r3, [pc, #376]	@ (8101d20 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8101ba8:	623b      	str	r3, [r7, #32]
 8101baa:	e004      	b.n	8101bb6 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8101bac:	69bb      	ldr	r3, [r7, #24]
 8101bae:	2b08      	cmp	r3, #8
 8101bb0:	d101      	bne.n	8101bb6 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8101bb2:	4b5b      	ldr	r3, [pc, #364]	@ (8101d20 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8101bb4:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8101bb6:	69bb      	ldr	r3, [r7, #24]
 8101bb8:	2b0c      	cmp	r3, #12
 8101bba:	f040 80a5 	bne.w	8101d08 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8101bbe:	4b56      	ldr	r3, [pc, #344]	@ (8101d18 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8101bc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8101bc2:	f003 0303 	and.w	r3, r3, #3
 8101bc6:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8101bc8:	4b53      	ldr	r3, [pc, #332]	@ (8101d18 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8101bca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8101bcc:	0a1b      	lsrs	r3, r3, #8
 8101bce:	f003 030f 	and.w	r3, r3, #15
 8101bd2:	3301      	adds	r3, #1
 8101bd4:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8101bd6:	4b50      	ldr	r3, [pc, #320]	@ (8101d18 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8101bd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8101bda:	091b      	lsrs	r3, r3, #4
 8101bdc:	f003 0301 	and.w	r3, r3, #1
 8101be0:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8101be2:	4b4d      	ldr	r3, [pc, #308]	@ (8101d18 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8101be4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8101be6:	08db      	lsrs	r3, r3, #3
 8101be8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8101bec:	68ba      	ldr	r2, [r7, #8]
 8101bee:	fb02 f303 	mul.w	r3, r2, r3
 8101bf2:	ee07 3a90 	vmov	s15, r3
 8101bf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101bfa:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8101bfe:	693b      	ldr	r3, [r7, #16]
 8101c00:	2b02      	cmp	r3, #2
 8101c02:	d003      	beq.n	8101c0c <HAL_RCC_GetSysClockFreq+0xe4>
 8101c04:	693b      	ldr	r3, [r7, #16]
 8101c06:	2b03      	cmp	r3, #3
 8101c08:	d022      	beq.n	8101c50 <HAL_RCC_GetSysClockFreq+0x128>
 8101c0a:	e043      	b.n	8101c94 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8101c0c:	68fb      	ldr	r3, [r7, #12]
 8101c0e:	ee07 3a90 	vmov	s15, r3
 8101c12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101c16:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8101d24 <HAL_RCC_GetSysClockFreq+0x1fc>
 8101c1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101c1e:	4b3e      	ldr	r3, [pc, #248]	@ (8101d18 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8101c20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8101c22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101c26:	ee07 3a90 	vmov	s15, r3
 8101c2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8101c2e:	ed97 6a01 	vldr	s12, [r7, #4]
 8101c32:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8101d28 <HAL_RCC_GetSysClockFreq+0x200>
 8101c36:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8101c3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8101c3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8101c42:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8101c46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101c4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8101c4e:	e046      	b.n	8101cde <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8101c50:	68fb      	ldr	r3, [r7, #12]
 8101c52:	ee07 3a90 	vmov	s15, r3
 8101c56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101c5a:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8101d24 <HAL_RCC_GetSysClockFreq+0x1fc>
 8101c5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101c62:	4b2d      	ldr	r3, [pc, #180]	@ (8101d18 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8101c64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8101c66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101c6a:	ee07 3a90 	vmov	s15, r3
 8101c6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8101c72:	ed97 6a01 	vldr	s12, [r7, #4]
 8101c76:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8101d28 <HAL_RCC_GetSysClockFreq+0x200>
 8101c7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8101c7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8101c82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8101c86:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8101c8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101c8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8101c92:	e024      	b.n	8101cde <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8101c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8101c96:	ee07 3a90 	vmov	s15, r3
 8101c9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101c9e:	68fb      	ldr	r3, [r7, #12]
 8101ca0:	ee07 3a90 	vmov	s15, r3
 8101ca4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101ca8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101cac:	4b1a      	ldr	r3, [pc, #104]	@ (8101d18 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8101cae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8101cb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101cb4:	ee07 3a90 	vmov	s15, r3
 8101cb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8101cbc:	ed97 6a01 	vldr	s12, [r7, #4]
 8101cc0:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8101d28 <HAL_RCC_GetSysClockFreq+0x200>
 8101cc4:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8101cc8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8101ccc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8101cd0:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8101cd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101cd8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8101cdc:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8101cde:	4b0e      	ldr	r3, [pc, #56]	@ (8101d18 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8101ce0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8101ce2:	0e1b      	lsrs	r3, r3, #24
 8101ce4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8101ce8:	3301      	adds	r3, #1
 8101cea:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8101cec:	683b      	ldr	r3, [r7, #0]
 8101cee:	ee07 3a90 	vmov	s15, r3
 8101cf2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8101cf6:	edd7 6a07 	vldr	s13, [r7, #28]
 8101cfa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8101cfe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8101d02:	ee17 3a90 	vmov	r3, s15
 8101d06:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8101d08:	6a3b      	ldr	r3, [r7, #32]
}
 8101d0a:	4618      	mov	r0, r3
 8101d0c:	372c      	adds	r7, #44	@ 0x2c
 8101d0e:	46bd      	mov	sp, r7
 8101d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d14:	4770      	bx	lr
 8101d16:	bf00      	nop
 8101d18:	46020c00 	.word	0x46020c00
 8101d1c:	08101eec 	.word	0x08101eec
 8101d20:	00f42400 	.word	0x00f42400
 8101d24:	4b742400 	.word	0x4b742400
 8101d28:	46000000 	.word	0x46000000

08101d2c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8101d2c:	b580      	push	{r7, lr}
 8101d2e:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8101d30:	f7ff fefa 	bl	8101b28 <HAL_RCC_GetSysClockFreq>
 8101d34:	4602      	mov	r2, r0
 8101d36:	4b07      	ldr	r3, [pc, #28]	@ (8101d54 <HAL_RCC_GetHCLKFreq+0x28>)
 8101d38:	6a1b      	ldr	r3, [r3, #32]
 8101d3a:	f003 030f 	and.w	r3, r3, #15
 8101d3e:	4906      	ldr	r1, [pc, #24]	@ (8101d58 <HAL_RCC_GetHCLKFreq+0x2c>)
 8101d40:	5ccb      	ldrb	r3, [r1, r3]
 8101d42:	fa22 f303 	lsr.w	r3, r2, r3
 8101d46:	4a05      	ldr	r2, [pc, #20]	@ (8101d5c <HAL_RCC_GetHCLKFreq+0x30>)
 8101d48:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8101d4a:	4b04      	ldr	r3, [pc, #16]	@ (8101d5c <HAL_RCC_GetHCLKFreq+0x30>)
 8101d4c:	681b      	ldr	r3, [r3, #0]
}
 8101d4e:	4618      	mov	r0, r3
 8101d50:	bd80      	pop	{r7, pc}
 8101d52:	bf00      	nop
 8101d54:	46020c00 	.word	0x46020c00
 8101d58:	08101edc 	.word	0x08101edc
 8101d5c:	20040000 	.word	0x20040000

08101d60 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8101d60:	b580      	push	{r7, lr}
 8101d62:	b086      	sub	sp, #24
 8101d64:	af00      	add	r7, sp, #0
 8101d66:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8101d68:	4b3e      	ldr	r3, [pc, #248]	@ (8101e64 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8101d6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8101d6e:	f003 0304 	and.w	r3, r3, #4
 8101d72:	2b00      	cmp	r3, #0
 8101d74:	d003      	beq.n	8101d7e <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8101d76:	f7fe fdeb 	bl	8100950 <HAL_PWREx_GetVoltageRange>
 8101d7a:	6178      	str	r0, [r7, #20]
 8101d7c:	e019      	b.n	8101db2 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8101d7e:	4b39      	ldr	r3, [pc, #228]	@ (8101e64 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8101d80:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8101d84:	4a37      	ldr	r2, [pc, #220]	@ (8101e64 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8101d86:	f043 0304 	orr.w	r3, r3, #4
 8101d8a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8101d8e:	4b35      	ldr	r3, [pc, #212]	@ (8101e64 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8101d90:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8101d94:	f003 0304 	and.w	r3, r3, #4
 8101d98:	60fb      	str	r3, [r7, #12]
 8101d9a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8101d9c:	f7fe fdd8 	bl	8100950 <HAL_PWREx_GetVoltageRange>
 8101da0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8101da2:	4b30      	ldr	r3, [pc, #192]	@ (8101e64 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8101da4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8101da8:	4a2e      	ldr	r2, [pc, #184]	@ (8101e64 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8101daa:	f023 0304 	bic.w	r3, r3, #4
 8101dae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8101db2:	697b      	ldr	r3, [r7, #20]
 8101db4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8101db8:	d003      	beq.n	8101dc2 <RCC_SetFlashLatencyFromMSIRange+0x62>
 8101dba:	697b      	ldr	r3, [r7, #20]
 8101dbc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8101dc0:	d109      	bne.n	8101dd6 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8101dc2:	687b      	ldr	r3, [r7, #4]
 8101dc4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8101dc8:	d202      	bcs.n	8101dd0 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8101dca:	2301      	movs	r3, #1
 8101dcc:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8101dce:	e033      	b.n	8101e38 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8101dd0:	2300      	movs	r3, #0
 8101dd2:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8101dd4:	e030      	b.n	8101e38 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8101dd6:	687b      	ldr	r3, [r7, #4]
 8101dd8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8101ddc:	d208      	bcs.n	8101df0 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8101dde:	697b      	ldr	r3, [r7, #20]
 8101de0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8101de4:	d102      	bne.n	8101dec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8101de6:	2303      	movs	r3, #3
 8101de8:	613b      	str	r3, [r7, #16]
 8101dea:	e025      	b.n	8101e38 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8101dec:	2301      	movs	r3, #1
 8101dee:	e035      	b.n	8101e5c <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8101df0:	687b      	ldr	r3, [r7, #4]
 8101df2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8101df6:	d90f      	bls.n	8101e18 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8101df8:	697b      	ldr	r3, [r7, #20]
 8101dfa:	2b00      	cmp	r3, #0
 8101dfc:	d109      	bne.n	8101e12 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8101dfe:	687b      	ldr	r3, [r7, #4]
 8101e00:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8101e04:	d902      	bls.n	8101e0c <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8101e06:	2300      	movs	r3, #0
 8101e08:	613b      	str	r3, [r7, #16]
 8101e0a:	e015      	b.n	8101e38 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8101e0c:	2301      	movs	r3, #1
 8101e0e:	613b      	str	r3, [r7, #16]
 8101e10:	e012      	b.n	8101e38 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8101e12:	2300      	movs	r3, #0
 8101e14:	613b      	str	r3, [r7, #16]
 8101e16:	e00f      	b.n	8101e38 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8101e18:	687b      	ldr	r3, [r7, #4]
 8101e1a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8101e1e:	d109      	bne.n	8101e34 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8101e20:	697b      	ldr	r3, [r7, #20]
 8101e22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8101e26:	d102      	bne.n	8101e2e <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8101e28:	2301      	movs	r3, #1
 8101e2a:	613b      	str	r3, [r7, #16]
 8101e2c:	e004      	b.n	8101e38 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8101e2e:	2302      	movs	r3, #2
 8101e30:	613b      	str	r3, [r7, #16]
 8101e32:	e001      	b.n	8101e38 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8101e34:	2301      	movs	r3, #1
 8101e36:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8101e38:	4b0b      	ldr	r3, [pc, #44]	@ (8101e68 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8101e3a:	681b      	ldr	r3, [r3, #0]
 8101e3c:	f023 020f 	bic.w	r2, r3, #15
 8101e40:	4909      	ldr	r1, [pc, #36]	@ (8101e68 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8101e42:	693b      	ldr	r3, [r7, #16]
 8101e44:	4313      	orrs	r3, r2
 8101e46:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8101e48:	4b07      	ldr	r3, [pc, #28]	@ (8101e68 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8101e4a:	681b      	ldr	r3, [r3, #0]
 8101e4c:	f003 030f 	and.w	r3, r3, #15
 8101e50:	693a      	ldr	r2, [r7, #16]
 8101e52:	429a      	cmp	r2, r3
 8101e54:	d001      	beq.n	8101e5a <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8101e56:	2301      	movs	r3, #1
 8101e58:	e000      	b.n	8101e5c <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8101e5a:	2300      	movs	r3, #0
}
 8101e5c:	4618      	mov	r0, r3
 8101e5e:	3718      	adds	r7, #24
 8101e60:	46bd      	mov	sp, r7
 8101e62:	bd80      	pop	{r7, pc}
 8101e64:	46020c00 	.word	0x46020c00
 8101e68:	40022000 	.word	0x40022000

08101e6c <memset>:
 8101e6c:	4402      	add	r2, r0
 8101e6e:	4603      	mov	r3, r0
 8101e70:	4293      	cmp	r3, r2
 8101e72:	d100      	bne.n	8101e76 <memset+0xa>
 8101e74:	4770      	bx	lr
 8101e76:	f803 1b01 	strb.w	r1, [r3], #1
 8101e7a:	e7f9      	b.n	8101e70 <memset+0x4>

08101e7c <__libc_init_array>:
 8101e7c:	b570      	push	{r4, r5, r6, lr}
 8101e7e:	4d0d      	ldr	r5, [pc, #52]	@ (8101eb4 <__libc_init_array+0x38>)
 8101e80:	2600      	movs	r6, #0
 8101e82:	4c0d      	ldr	r4, [pc, #52]	@ (8101eb8 <__libc_init_array+0x3c>)
 8101e84:	1b64      	subs	r4, r4, r5
 8101e86:	10a4      	asrs	r4, r4, #2
 8101e88:	42a6      	cmp	r6, r4
 8101e8a:	d109      	bne.n	8101ea0 <__libc_init_array+0x24>
 8101e8c:	4d0b      	ldr	r5, [pc, #44]	@ (8101ebc <__libc_init_array+0x40>)
 8101e8e:	2600      	movs	r6, #0
 8101e90:	4c0b      	ldr	r4, [pc, #44]	@ (8101ec0 <__libc_init_array+0x44>)
 8101e92:	f000 f817 	bl	8101ec4 <_init>
 8101e96:	1b64      	subs	r4, r4, r5
 8101e98:	10a4      	asrs	r4, r4, #2
 8101e9a:	42a6      	cmp	r6, r4
 8101e9c:	d105      	bne.n	8101eaa <__libc_init_array+0x2e>
 8101e9e:	bd70      	pop	{r4, r5, r6, pc}
 8101ea0:	f855 3b04 	ldr.w	r3, [r5], #4
 8101ea4:	3601      	adds	r6, #1
 8101ea6:	4798      	blx	r3
 8101ea8:	e7ee      	b.n	8101e88 <__libc_init_array+0xc>
 8101eaa:	f855 3b04 	ldr.w	r3, [r5], #4
 8101eae:	3601      	adds	r6, #1
 8101eb0:	4798      	blx	r3
 8101eb2:	e7f2      	b.n	8101e9a <__libc_init_array+0x1e>
 8101eb4:	08101f2c 	.word	0x08101f2c
 8101eb8:	08101f2c 	.word	0x08101f2c
 8101ebc:	08101f2c 	.word	0x08101f2c
 8101ec0:	08101f30 	.word	0x08101f30

08101ec4 <_init>:
 8101ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8101ec6:	bf00      	nop
 8101ec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8101eca:	bc08      	pop	{r3}
 8101ecc:	469e      	mov	lr, r3
 8101ece:	4770      	bx	lr

08101ed0 <_fini>:
 8101ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8101ed2:	bf00      	nop
 8101ed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8101ed6:	bc08      	pop	{r3}
 8101ed8:	469e      	mov	lr, r3
 8101eda:	4770      	bx	lr
