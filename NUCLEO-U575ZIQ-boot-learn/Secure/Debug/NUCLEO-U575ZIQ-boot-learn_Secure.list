
NUCLEO-U575ZIQ-boot-learn_Secure.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  0c000000  0c000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001b88  0c000238  0c000238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  0c001dc0  0c001dc0  00002dc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0c001e90  0c001e90  00002e90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  0c001e94  0c001e94  00002e94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000009  30000000  0c001e98  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .gnu.sgstubs  00000020  0c0fe000  0c0fe000  00004000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  7 .bss          00000028  3000000c  3000000c  0000500c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  30000034  30000034  0000500c  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00004020  2**0
                  CONTENTS, READONLY
 10 .debug_info   000082ca  00000000  00000000  00004056  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000017ad  00000000  00000000  0000c320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000008b0  00000000  00000000  0000dad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000678  00000000  00000000  0000e380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000307de  00000000  00000000  0000e9f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000ab7c  00000000  00000000  0003f1d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0012e883  00000000  00000000  00049d52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001785d5  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000021c0  00000000  00000000  00178618  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000007c  00000000  00000000  0017a7d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0c000238 <__do_global_dtors_aux>:
 c000238:	b510      	push	{r4, lr}
 c00023a:	4c05      	ldr	r4, [pc, #20]	@ (c000250 <__do_global_dtors_aux+0x18>)
 c00023c:	7823      	ldrb	r3, [r4, #0]
 c00023e:	b933      	cbnz	r3, c00024e <__do_global_dtors_aux+0x16>
 c000240:	4b04      	ldr	r3, [pc, #16]	@ (c000254 <__do_global_dtors_aux+0x1c>)
 c000242:	b113      	cbz	r3, c00024a <__do_global_dtors_aux+0x12>
 c000244:	4804      	ldr	r0, [pc, #16]	@ (c000258 <__do_global_dtors_aux+0x20>)
 c000246:	f3af 8000 	nop.w
 c00024a:	2301      	movs	r3, #1
 c00024c:	7023      	strb	r3, [r4, #0]
 c00024e:	bd10      	pop	{r4, pc}
 c000250:	3000000c 	.word	0x3000000c
 c000254:	00000000 	.word	0x00000000
 c000258:	0c001da8 	.word	0x0c001da8

0c00025c <frame_dummy>:
 c00025c:	b508      	push	{r3, lr}
 c00025e:	4b03      	ldr	r3, [pc, #12]	@ (c00026c <frame_dummy+0x10>)
 c000260:	b11b      	cbz	r3, c00026a <frame_dummy+0xe>
 c000262:	4903      	ldr	r1, [pc, #12]	@ (c000270 <frame_dummy+0x14>)
 c000264:	4803      	ldr	r0, [pc, #12]	@ (c000274 <frame_dummy+0x18>)
 c000266:	f3af 8000 	nop.w
 c00026a:	bd08      	pop	{r3, pc}
 c00026c:	00000000 	.word	0x00000000
 c000270:	30000010 	.word	0x30000010
 c000274:	0c001da8 	.word	0x0c001da8

0c000278 <__gnu_cmse_nonsecure_call>:
 c000278:	e92d 4fe0 	stmdb	sp!, {r5, r6, r7, r8, r9, sl, fp, lr}
 c00027c:	4627      	mov	r7, r4
 c00027e:	46a0      	mov	r8, r4
 c000280:	46a1      	mov	r9, r4
 c000282:	46a2      	mov	sl, r4
 c000284:	46a3      	mov	fp, r4
 c000286:	46a4      	mov	ip, r4
 c000288:	ed2d 8b10 	vpush	{d8-d15}
 c00028c:	f04f 0500 	mov.w	r5, #0
 c000290:	ec45 5b18 	vmov	d8, r5, r5
 c000294:	ec45 5a19 	vmov	s18, s19, r5, r5
 c000298:	ec45 5a1a 	vmov	s20, s21, r5, r5
 c00029c:	ec45 5a1b 	vmov	s22, s23, r5, r5
 c0002a0:	ec45 5a1c 	vmov	s24, s25, r5, r5
 c0002a4:	ec45 5a1d 	vmov	s26, s27, r5, r5
 c0002a8:	ec45 5a1e 	vmov	s28, s29, r5, r5
 c0002ac:	ec45 5a1f 	vmov	s30, s31, r5, r5
 c0002b0:	eef1 5a10 	vmrs	r5, fpscr
 c0002b4:	f64f 7660 	movw	r6, #65376	@ 0xff60
 c0002b8:	f6c0 76ff 	movt	r6, #4095	@ 0xfff
 c0002bc:	4035      	ands	r5, r6
 c0002be:	eee1 5a10 	vmsr	fpscr, r5
 c0002c2:	f384 8800 	msr	CPSR_f, r4
 c0002c6:	4625      	mov	r5, r4
 c0002c8:	4626      	mov	r6, r4
 c0002ca:	47a4      	blxns	r4
 c0002cc:	ecbd 8b10 	vpop	{d8-d15}
 c0002d0:	e8bd 8fe0 	ldmia.w	sp!, {r5, r6, r7, r8, r9, sl, fp, pc}

0c0002d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 c0002d4:	b580      	push	{r7, lr}
 c0002d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 c0002d8:	f000 fd64 	bl	c000da4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the System Power */
  SystemPower_Config();
 c0002dc:	f000 f84e 	bl	c00037c <SystemPower_Config>
  /* GTZC initialisation */
  MX_GTZC_S_Init();
 c0002e0:	f000 f85c 	bl	c00039c <MX_GTZC_S_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 c0002e4:	f000 fa7e 	bl	c0007e4 <MX_GPIO_Init>
  MX_ICACHE_Init();
 c0002e8:	f000 fa68 	bl	c0007bc <MX_ICACHE_Init>

  /* USER CODE END 2 */

  /*************** Setup and jump to non-secure *******************************/

  NonSecure_Init();
 c0002ec:	f000 f802 	bl	c0002f4 <NonSecure_Init>

  /* Non-secure software does not return, this code is not executed */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 c0002f0:	bf00      	nop
 c0002f2:	e7fd      	b.n	c0002f0 <main+0x1c>

0c0002f4 <NonSecure_Init>:
  *         This function is responsible for Non-secure initialization and switch
  *         to non-secure state
  * @retval None
  */
static void NonSecure_Init(void)
{
 c0002f4:	b590      	push	{r4, r7, lr}
 c0002f6:	b083      	sub	sp, #12
 c0002f8:	af00      	add	r7, sp, #0
  funcptr_NS NonSecure_ResetHandler;

  SCB_NS->VTOR = VTOR_TABLE_NS_START_ADDR;
 c0002fa:	4b1e      	ldr	r3, [pc, #120]	@ (c000374 <NonSecure_Init+0x80>)
 c0002fc:	f04f 6201 	mov.w	r2, #135266304	@ 0x8100000
 c000300:	609a      	str	r2, [r3, #8]

  /* Set non-secure main stack (MSP_NS) */
  __TZ_set_MSP_NS((*(uint32_t *)VTOR_TABLE_NS_START_ADDR));
 c000302:	f04f 6301 	mov.w	r3, #135266304	@ 0x8100000
 c000306:	681b      	ldr	r3, [r3, #0]
 c000308:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 c00030a:	683b      	ldr	r3, [r7, #0]
 c00030c:	f383 8888 	msr	MSP_NS, r3
}
 c000310:	bf00      	nop

  /* Get non-secure reset handler */
  NonSecure_ResetHandler = (funcptr_NS)(*((uint32_t *)((VTOR_TABLE_NS_START_ADDR) + 4U)));
 c000312:	4b19      	ldr	r3, [pc, #100]	@ (c000378 <NonSecure_Init+0x84>)
 c000314:	681b      	ldr	r3, [r3, #0]
 c000316:	607b      	str	r3, [r7, #4]

  /* Start non-secure state software application */
  NonSecure_ResetHandler();
 c000318:	687b      	ldr	r3, [r7, #4]
 c00031a:	461c      	mov	r4, r3
 c00031c:	0864      	lsrs	r4, r4, #1
 c00031e:	0064      	lsls	r4, r4, #1
 c000320:	4620      	mov	r0, r4
 c000322:	4621      	mov	r1, r4
 c000324:	4622      	mov	r2, r4
 c000326:	4623      	mov	r3, r4
 c000328:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 c00032c:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 c000330:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 c000334:	eef7 1a00 	vmov.f32	s3, #112	@ 0x3f800000  1.0
 c000338:	eeb7 2a00 	vmov.f32	s4, #112	@ 0x3f800000  1.0
 c00033c:	eef7 2a00 	vmov.f32	s5, #112	@ 0x3f800000  1.0
 c000340:	eeb7 3a00 	vmov.f32	s6, #112	@ 0x3f800000  1.0
 c000344:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 c000348:	eeb7 4a00 	vmov.f32	s8, #112	@ 0x3f800000  1.0
 c00034c:	eef7 4a00 	vmov.f32	s9, #112	@ 0x3f800000  1.0
 c000350:	eeb7 5a00 	vmov.f32	s10, #112	@ 0x3f800000  1.0
 c000354:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 c000358:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 c00035c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 c000360:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 c000364:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 c000368:	f7ff ff86 	bl	c000278 <__gnu_cmse_nonsecure_call>
}
 c00036c:	bf00      	nop
 c00036e:	370c      	adds	r7, #12
 c000370:	46bd      	mov	sp, r7
 c000372:	bd90      	pop	{r4, r7, pc}
 c000374:	e002ed00 	.word	0xe002ed00
 c000378:	08100004 	.word	0x08100004

0c00037c <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 c00037c:	b580      	push	{r7, lr}
 c00037e:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 c000380:	f001 fbc4 	bl	c001b0c <HAL_PWREx_EnableVddIO2>

  /*
   * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_PWREx_DisableUCPDDeadBattery();
 c000384:	f001 fbd2 	bl	c001b2c <HAL_PWREx_DisableUCPDDeadBattery>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 c000388:	2002      	movs	r0, #2
 c00038a:	f001 fb6f 	bl	c001a6c <HAL_PWREx_ConfigSupply>
 c00038e:	4603      	mov	r3, r0
 c000390:	2b00      	cmp	r3, #0
 c000392:	d001      	beq.n	c000398 <SystemPower_Config+0x1c>
  {
    Error_Handler();
 c000394:	f000 fa78 	bl	c000888 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 c000398:	bf00      	nop
 c00039a:	bd80      	pop	{r7, pc}

0c00039c <MX_GTZC_S_Init>:
  * @brief GTZC_S Initialization Function
  * @param None
  * @retval None
  */
static void MX_GTZC_S_Init(void)
{
 c00039c:	b580      	push	{r7, lr}
 c00039e:	b0c4      	sub	sp, #272	@ 0x110
 c0003a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN GTZC_S_Init 0 */

  /* USER CODE END GTZC_S_Init 0 */

  MPCBB_ConfigTypeDef MPCBB_Area_Desc = {0};
 c0003a2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c0003a6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c0003aa:	4618      	mov	r0, r3
 c0003ac:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 c0003b0:	461a      	mov	r2, r3
 c0003b2:	2100      	movs	r1, #0
 c0003b4:	f001 fccc 	bl	c001d50 <memset>

  /* USER CODE BEGIN GTZC_S_Init 1 */

  /* USER CODE END GTZC_S_Init 1 */
  if (HAL_GTZC_TZSC_ConfigPeriphAttributes(GTZC_PERIPH_UCPD1, GTZC_TZSC_PERIPH_SEC|GTZC_TZSC_PERIPH_NPRIV) != HAL_OK)
 c0003b8:	f240 3101 	movw	r1, #769	@ 0x301
 c0003bc:	2013      	movs	r0, #19
 c0003be:	f001 f8eb 	bl	c001598 <HAL_GTZC_TZSC_ConfigPeriphAttributes>
 c0003c2:	4603      	mov	r3, r0
 c0003c4:	2b00      	cmp	r3, #0
 c0003c6:	d001      	beq.n	c0003cc <MX_GTZC_S_Init+0x30>
  {
    Error_Handler();
 c0003c8:	f000 fa5e 	bl	c000888 <Error_Handler>
  }
  if (HAL_GTZC_TZSC_ConfigPeriphAttributes(GTZC_PERIPH_USART1, GTZC_TZSC_PERIPH_SEC|GTZC_TZSC_PERIPH_NPRIV) != HAL_OK)
 c0003cc:	f240 3101 	movw	r1, #769	@ 0x301
 c0003d0:	4813      	ldr	r0, [pc, #76]	@ (c000420 <MX_GTZC_S_Init+0x84>)
 c0003d2:	f001 f8e1 	bl	c001598 <HAL_GTZC_TZSC_ConfigPeriphAttributes>
 c0003d6:	4603      	mov	r3, r0
 c0003d8:	2b00      	cmp	r3, #0
 c0003da:	d001      	beq.n	c0003e0 <MX_GTZC_S_Init+0x44>
  {
    Error_Handler();
 c0003dc:	f000 fa54 	bl	c000888 <Error_Handler>
  }
  if (HAL_GTZC_TZSC_ConfigPeriphAttributes(GTZC_PERIPH_ICACHE_REG, GTZC_TZSC_PERIPH_SEC|GTZC_TZSC_PERIPH_NPRIV) != HAL_OK)
 c0003e0:	f240 3101 	movw	r1, #769	@ 0x301
 c0003e4:	480f      	ldr	r0, [pc, #60]	@ (c000424 <MX_GTZC_S_Init+0x88>)
 c0003e6:	f001 f8d7 	bl	c001598 <HAL_GTZC_TZSC_ConfigPeriphAttributes>
 c0003ea:	4603      	mov	r3, r0
 c0003ec:	2b00      	cmp	r3, #0
 c0003ee:	d001      	beq.n	c0003f4 <MX_GTZC_S_Init+0x58>
  {
    Error_Handler();
 c0003f0:	f000 fa4a 	bl	c000888 <Error_Handler>
  }
  if (HAL_GTZC_TZSC_ConfigPeriphAttributes(GTZC_PERIPH_ADC12, GTZC_TZSC_PERIPH_SEC|GTZC_TZSC_PERIPH_NPRIV) != HAL_OK)
 c0003f4:	f240 3101 	movw	r1, #769	@ 0x301
 c0003f8:	480b      	ldr	r0, [pc, #44]	@ (c000428 <MX_GTZC_S_Init+0x8c>)
 c0003fa:	f001 f8cd 	bl	c001598 <HAL_GTZC_TZSC_ConfigPeriphAttributes>
 c0003fe:	4603      	mov	r3, r0
 c000400:	2b00      	cmp	r3, #0
 c000402:	d001      	beq.n	c000408 <MX_GTZC_S_Init+0x6c>
  {
    Error_Handler();
 c000404:	f000 fa40 	bl	c000888 <Error_Handler>
  }
  if (HAL_GTZC_TZSC_ConfigPeriphAttributes(GTZC_PERIPH_OTG, GTZC_TZSC_PERIPH_SEC|GTZC_TZSC_PERIPH_NPRIV) != HAL_OK)
 c000408:	f240 3101 	movw	r1, #769	@ 0x301
 c00040c:	4807      	ldr	r0, [pc, #28]	@ (c00042c <MX_GTZC_S_Init+0x90>)
 c00040e:	f001 f8c3 	bl	c001598 <HAL_GTZC_TZSC_ConfigPeriphAttributes>
 c000412:	4603      	mov	r3, r0
 c000414:	2b00      	cmp	r3, #0
 c000416:	d00b      	beq.n	c000430 <MX_GTZC_S_Init+0x94>
  {
    Error_Handler();
 c000418:	f000 fa36 	bl	c000888 <Error_Handler>
 c00041c:	e008      	b.n	c000430 <MX_GTZC_S_Init+0x94>
 c00041e:	bf00      	nop
 c000420:	10000003 	.word	0x10000003
 c000424:	20000006 	.word	0x20000006
 c000428:	20000008 	.word	0x20000008
 c00042c:	2000000a 	.word	0x2000000a
  }
  MPCBB_Area_Desc.SecureRWIllegalMode = GTZC_MPCBB_SRWILADIS_ENABLE;
 c000430:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000434:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000438:	2200      	movs	r2, #0
 c00043a:	601a      	str	r2, [r3, #0]
  MPCBB_Area_Desc.InvertSecureState = GTZC_MPCBB_INVSECSTATE_NOT_INVERTED;
 c00043c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000440:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000444:	2200      	movs	r2, #0
 c000446:	605a      	str	r2, [r3, #4]
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[0] =   0x00000000;
 c000448:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c00044c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000450:	2200      	movs	r2, #0
 c000452:	609a      	str	r2, [r3, #8]
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[1] =   0x00000000;
 c000454:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000458:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c00045c:	2200      	movs	r2, #0
 c00045e:	60da      	str	r2, [r3, #12]
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[2] =   0x00000000;
 c000460:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000464:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000468:	2200      	movs	r2, #0
 c00046a:	611a      	str	r2, [r3, #16]
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[3] =   0x00000000;
 c00046c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000470:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000474:	2200      	movs	r2, #0
 c000476:	615a      	str	r2, [r3, #20]
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[4] =   0x00000000;
 c000478:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c00047c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000480:	2200      	movs	r2, #0
 c000482:	619a      	str	r2, [r3, #24]
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[5] =   0x00000000;
 c000484:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000488:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c00048c:	2200      	movs	r2, #0
 c00048e:	61da      	str	r2, [r3, #28]
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[6] =   0x00000000;
 c000490:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000494:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000498:	2200      	movs	r2, #0
 c00049a:	621a      	str	r2, [r3, #32]
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[7] =   0x00000000;
 c00049c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c0004a0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c0004a4:	2200      	movs	r2, #0
 c0004a6:	625a      	str	r2, [r3, #36]	@ 0x24
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[8] =   0x00000000;
 c0004a8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c0004ac:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c0004b0:	2200      	movs	r2, #0
 c0004b2:	629a      	str	r2, [r3, #40]	@ 0x28
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[9] =   0x00000000;
 c0004b4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c0004b8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c0004bc:	2200      	movs	r2, #0
 c0004be:	62da      	str	r2, [r3, #44]	@ 0x2c
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[10] =   0x00000000;
 c0004c0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c0004c4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c0004c8:	2200      	movs	r2, #0
 c0004ca:	631a      	str	r2, [r3, #48]	@ 0x30
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[11] =   0x00000000;
 c0004cc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c0004d0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c0004d4:	2200      	movs	r2, #0
 c0004d6:	635a      	str	r2, [r3, #52]	@ 0x34
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[12] =   0x00000000;
 c0004d8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c0004dc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c0004e0:	2200      	movs	r2, #0
 c0004e2:	639a      	str	r2, [r3, #56]	@ 0x38
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[13] =   0x00000000;
 c0004e4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c0004e8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c0004ec:	2200      	movs	r2, #0
 c0004ee:	63da      	str	r2, [r3, #60]	@ 0x3c
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[14] =   0x00000000;
 c0004f0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c0004f4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c0004f8:	2200      	movs	r2, #0
 c0004fa:	641a      	str	r2, [r3, #64]	@ 0x40
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[15] =   0x00000000;
 c0004fc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000500:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000504:	2200      	movs	r2, #0
 c000506:	645a      	str	r2, [r3, #68]	@ 0x44
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[16] =   0x00000000;
 c000508:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c00050c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000510:	2200      	movs	r2, #0
 c000512:	649a      	str	r2, [r3, #72]	@ 0x48
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[17] =   0x00000000;
 c000514:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000518:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c00051c:	2200      	movs	r2, #0
 c00051e:	64da      	str	r2, [r3, #76]	@ 0x4c
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[18] =   0x00000000;
 c000520:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000524:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000528:	2200      	movs	r2, #0
 c00052a:	651a      	str	r2, [r3, #80]	@ 0x50
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[19] =   0x00000000;
 c00052c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000530:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000534:	2200      	movs	r2, #0
 c000536:	655a      	str	r2, [r3, #84]	@ 0x54
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[20] =   0x00000000;
 c000538:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c00053c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000540:	2200      	movs	r2, #0
 c000542:	659a      	str	r2, [r3, #88]	@ 0x58
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[21] =   0x00000000;
 c000544:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000548:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c00054c:	2200      	movs	r2, #0
 c00054e:	65da      	str	r2, [r3, #92]	@ 0x5c
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[22] =   0x00000000;
 c000550:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000554:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000558:	2200      	movs	r2, #0
 c00055a:	661a      	str	r2, [r3, #96]	@ 0x60
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[23] =   0x00000000;
 c00055c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000560:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000564:	2200      	movs	r2, #0
 c000566:	665a      	str	r2, [r3, #100]	@ 0x64
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[24] =   0x00000000;
 c000568:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c00056c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000570:	2200      	movs	r2, #0
 c000572:	669a      	str	r2, [r3, #104]	@ 0x68
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[25] =   0x00000000;
 c000574:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000578:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c00057c:	2200      	movs	r2, #0
 c00057e:	66da      	str	r2, [r3, #108]	@ 0x6c
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[26] =   0x00000000;
 c000580:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000584:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000588:	2200      	movs	r2, #0
 c00058a:	671a      	str	r2, [r3, #112]	@ 0x70
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[27] =   0x00000000;
 c00058c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000590:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000594:	2200      	movs	r2, #0
 c000596:	675a      	str	r2, [r3, #116]	@ 0x74
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[28] =   0x00000000;
 c000598:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c00059c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c0005a0:	2200      	movs	r2, #0
 c0005a2:	679a      	str	r2, [r3, #120]	@ 0x78
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[29] =   0x00000000;
 c0005a4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c0005a8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c0005ac:	2200      	movs	r2, #0
 c0005ae:	67da      	str	r2, [r3, #124]	@ 0x7c
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[30] =   0x00000000;
 c0005b0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c0005b4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c0005b8:	2200      	movs	r2, #0
 c0005ba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[31] =   0x00000000;
 c0005be:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c0005c2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c0005c6:	2200      	movs	r2, #0
 c0005c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[0] =   0x00000000;
 c0005cc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c0005d0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c0005d4:	2200      	movs	r2, #0
 c0005d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[1] =   0x00000000;
 c0005da:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c0005de:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c0005e2:	2200      	movs	r2, #0
 c0005e4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[2] =   0x00000000;
 c0005e8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c0005ec:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c0005f0:	2200      	movs	r2, #0
 c0005f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[3] =   0x00000000;
 c0005f6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c0005fa:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c0005fe:	2200      	movs	r2, #0
 c000600:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[4] =   0x00000000;
 c000604:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000608:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c00060c:	2200      	movs	r2, #0
 c00060e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[5] =   0x00000000;
 c000612:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000616:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c00061a:	2200      	movs	r2, #0
 c00061c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[6] =   0x00000000;
 c000620:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000624:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000628:	2200      	movs	r2, #0
 c00062a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[7] =   0x00000000;
 c00062e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000632:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000636:	2200      	movs	r2, #0
 c000638:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[8] =   0x00000000;
 c00063c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000640:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000644:	2200      	movs	r2, #0
 c000646:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[9] =   0x00000000;
 c00064a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c00064e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000652:	2200      	movs	r2, #0
 c000654:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[10] =   0x00000000;
 c000658:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c00065c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000660:	2200      	movs	r2, #0
 c000662:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[11] =   0x00000000;
 c000666:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c00066a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c00066e:	2200      	movs	r2, #0
 c000670:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[12] =   0x00000000;
 c000674:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000678:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c00067c:	2200      	movs	r2, #0
 c00067e:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[13] =   0x00000000;
 c000682:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000686:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c00068a:	2200      	movs	r2, #0
 c00068c:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[14] =   0x00000000;
 c000690:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000694:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000698:	2200      	movs	r2, #0
 c00069a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[15] =   0x00000000;
 c00069e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c0006a2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c0006a6:	2200      	movs	r2, #0
 c0006a8:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[16] =   0x00000000;
 c0006ac:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c0006b0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c0006b4:	2200      	movs	r2, #0
 c0006b6:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[17] =   0x00000000;
 c0006ba:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c0006be:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c0006c2:	2200      	movs	r2, #0
 c0006c4:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[18] =   0x00000000;
 c0006c8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c0006cc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c0006d0:	2200      	movs	r2, #0
 c0006d2:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[19] =   0x00000000;
 c0006d6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c0006da:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c0006de:	2200      	movs	r2, #0
 c0006e0:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[20] =   0x00000000;
 c0006e4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c0006e8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c0006ec:	2200      	movs	r2, #0
 c0006ee:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[21] =   0x00000000;
 c0006f2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c0006f6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c0006fa:	2200      	movs	r2, #0
 c0006fc:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[22] =   0x00000000;
 c000700:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000704:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000708:	2200      	movs	r2, #0
 c00070a:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[23] =   0x00000000;
 c00070e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000712:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000716:	2200      	movs	r2, #0
 c000718:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[24] =   0x00000000;
 c00071c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000720:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000724:	2200      	movs	r2, #0
 c000726:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[25] =   0x00000000;
 c00072a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c00072e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000732:	2200      	movs	r2, #0
 c000734:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[26] =   0x00000000;
 c000738:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c00073c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000740:	2200      	movs	r2, #0
 c000742:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[27] =   0x00000000;
 c000746:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c00074a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c00074e:	2200      	movs	r2, #0
 c000750:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[28] =   0x00000000;
 c000754:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000758:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c00075c:	2200      	movs	r2, #0
 c00075e:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[29] =   0x00000000;
 c000762:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000766:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c00076a:	2200      	movs	r2, #0
 c00076c:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[30] =   0x00000000;
 c000770:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000774:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000778:	2200      	movs	r2, #0
 c00077a:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[31] =   0x00000000;
 c00077e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000782:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000786:	2200      	movs	r2, #0
 c000788:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
  MPCBB_Area_Desc.AttributeConfig.MPCBB_LockConfig_array[0] =   0x00000000;
 c00078c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000790:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000794:	2200      	movs	r2, #0
 c000796:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
  if (HAL_GTZC_MPCBB_ConfigMem(SRAM3_BASE, &MPCBB_Area_Desc) != HAL_OK)
 c00079a:	1d3b      	adds	r3, r7, #4
 c00079c:	4619      	mov	r1, r3
 c00079e:	4806      	ldr	r0, [pc, #24]	@ (c0007b8 <MX_GTZC_S_Init+0x41c>)
 c0007a0:	f001 f85c 	bl	c00185c <HAL_GTZC_MPCBB_ConfigMem>
 c0007a4:	4603      	mov	r3, r0
 c0007a6:	2b00      	cmp	r3, #0
 c0007a8:	d001      	beq.n	c0007ae <MX_GTZC_S_Init+0x412>
  {
    Error_Handler();
 c0007aa:	f000 f86d 	bl	c000888 <Error_Handler>
  }
  /* USER CODE BEGIN GTZC_S_Init 2 */

  /* USER CODE END GTZC_S_Init 2 */

}
 c0007ae:	bf00      	nop
 c0007b0:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 c0007b4:	46bd      	mov	sp, r7
 c0007b6:	bd80      	pop	{r7, pc}
 c0007b8:	30040000 	.word	0x30040000

0c0007bc <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 c0007bc:	b580      	push	{r7, lr}
 c0007be:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 c0007c0:	2000      	movs	r0, #0
 c0007c2:	f001 f923 	bl	c001a0c <HAL_ICACHE_ConfigAssociativityMode>
 c0007c6:	4603      	mov	r3, r0
 c0007c8:	2b00      	cmp	r3, #0
 c0007ca:	d001      	beq.n	c0007d0 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 c0007cc:	f000 f85c 	bl	c000888 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 c0007d0:	f001 f93c 	bl	c001a4c <HAL_ICACHE_Enable>
 c0007d4:	4603      	mov	r3, r0
 c0007d6:	2b00      	cmp	r3, #0
 c0007d8:	d001      	beq.n	c0007de <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 c0007da:	f000 f855 	bl	c000888 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 c0007de:	bf00      	nop
 c0007e0:	bd80      	pop	{r7, pc}
	...

0c0007e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 c0007e4:	b580      	push	{r7, lr}
 c0007e6:	b088      	sub	sp, #32
 c0007e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 c0007ea:	f107 030c 	add.w	r3, r7, #12
 c0007ee:	2200      	movs	r2, #0
 c0007f0:	601a      	str	r2, [r3, #0]
 c0007f2:	605a      	str	r2, [r3, #4]
 c0007f4:	609a      	str	r2, [r3, #8]
 c0007f6:	60da      	str	r2, [r3, #12]
 c0007f8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 c0007fa:	4b21      	ldr	r3, [pc, #132]	@ (c000880 <MX_GPIO_Init+0x9c>)
 c0007fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c000800:	4a1f      	ldr	r2, [pc, #124]	@ (c000880 <MX_GPIO_Init+0x9c>)
 c000802:	f043 0304 	orr.w	r3, r3, #4
 c000806:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 c00080a:	4b1d      	ldr	r3, [pc, #116]	@ (c000880 <MX_GPIO_Init+0x9c>)
 c00080c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c000810:	f003 0304 	and.w	r3, r3, #4
 c000814:	60bb      	str	r3, [r7, #8]
 c000816:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 c000818:	4b19      	ldr	r3, [pc, #100]	@ (c000880 <MX_GPIO_Init+0x9c>)
 c00081a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c00081e:	4a18      	ldr	r2, [pc, #96]	@ (c000880 <MX_GPIO_Init+0x9c>)
 c000820:	f043 0301 	orr.w	r3, r3, #1
 c000824:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 c000828:	4b15      	ldr	r3, [pc, #84]	@ (c000880 <MX_GPIO_Init+0x9c>)
 c00082a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c00082e:	f003 0301 	and.w	r3, r3, #1
 c000832:	607b      	str	r3, [r7, #4]
 c000834:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 c000836:	4b12      	ldr	r3, [pc, #72]	@ (c000880 <MX_GPIO_Init+0x9c>)
 c000838:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c00083c:	4a10      	ldr	r2, [pc, #64]	@ (c000880 <MX_GPIO_Init+0x9c>)
 c00083e:	f043 0302 	orr.w	r3, r3, #2
 c000842:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 c000846:	4b0e      	ldr	r3, [pc, #56]	@ (c000880 <MX_GPIO_Init+0x9c>)
 c000848:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c00084c:	f003 0302 	and.w	r3, r3, #2
 c000850:	603b      	str	r3, [r7, #0]
 c000852:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 c000854:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 c000858:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 c00085a:	2302      	movs	r3, #2
 c00085c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 c00085e:	2300      	movs	r3, #0
 c000860:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 c000862:	2300      	movs	r3, #0
 c000864:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 c000866:	2307      	movs	r3, #7
 c000868:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 c00086a:	f107 030c 	add.w	r3, r7, #12
 c00086e:	4619      	mov	r1, r3
 c000870:	4804      	ldr	r0, [pc, #16]	@ (c000884 <MX_GPIO_Init+0xa0>)
 c000872:	f000 fcb9 	bl	c0011e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 c000876:	bf00      	nop
 c000878:	3720      	adds	r7, #32
 c00087a:	46bd      	mov	sp, r7
 c00087c:	bd80      	pop	{r7, pc}
 c00087e:	bf00      	nop
 c000880:	56020c00 	.word	0x56020c00
 c000884:	52020000 	.word	0x52020000

0c000888 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 c000888:	b480      	push	{r7}
 c00088a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 c00088c:	b672      	cpsid	i
}
 c00088e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 c000890:	bf00      	nop
 c000892:	e7fd      	b.n	c000890 <Error_Handler+0x8>

0c000894 <__acle_se_SECURE_RegisterCallback>:
  * @param  CallbackId  callback identifier
  * @param  func        pointer to non-secure function
  * @retval None
  */
CMSE_NS_ENTRY void SECURE_RegisterCallback(SECURE_CallbackIDTypeDef CallbackId, void *func)
{
 c000894:	b2c0      	uxtb	r0, r0
 c000896:	b480      	push	{r7}
 c000898:	b083      	sub	sp, #12
 c00089a:	af00      	add	r7, sp, #0
 c00089c:	4603      	mov	r3, r0
 c00089e:	6039      	str	r1, [r7, #0]
 c0008a0:	71fb      	strb	r3, [r7, #7]
  if(func != NULL)
 c0008a2:	683b      	ldr	r3, [r7, #0]
 c0008a4:	2b00      	cmp	r3, #0
 c0008a6:	d00d      	beq.n	c0008c4 <__acle_se_SECURE_RegisterCallback+0x30>
  {
    switch(CallbackId)
 c0008a8:	79fb      	ldrb	r3, [r7, #7]
 c0008aa:	2b00      	cmp	r3, #0
 c0008ac:	d002      	beq.n	c0008b4 <__acle_se_SECURE_RegisterCallback+0x20>
 c0008ae:	2b01      	cmp	r3, #1
 c0008b0:	d004      	beq.n	c0008bc <__acle_se_SECURE_RegisterCallback+0x28>
      case GTZC_ERROR_CB_ID:             /* GTZC Interrupt occurred */
        pSecureErrorCallback = func;
        break;
      default:
        /* unknown */
        break;
 c0008b2:	e007      	b.n	c0008c4 <__acle_se_SECURE_RegisterCallback+0x30>
        pSecureFaultCallback = func;
 c0008b4:	4a20      	ldr	r2, [pc, #128]	@ (c000938 <__acle_se_SECURE_RegisterCallback+0xa4>)
 c0008b6:	683b      	ldr	r3, [r7, #0]
 c0008b8:	6013      	str	r3, [r2, #0]
        break;
 c0008ba:	e003      	b.n	c0008c4 <__acle_se_SECURE_RegisterCallback+0x30>
        pSecureErrorCallback = func;
 c0008bc:	4a1f      	ldr	r2, [pc, #124]	@ (c00093c <__acle_se_SECURE_RegisterCallback+0xa8>)
 c0008be:	683b      	ldr	r3, [r7, #0]
 c0008c0:	6013      	str	r3, [r2, #0]
        break;
 c0008c2:	bf00      	nop
    }
  }
}
 c0008c4:	bf00      	nop
 c0008c6:	370c      	adds	r7, #12
 c0008c8:	46bd      	mov	sp, r7
 c0008ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0008ce:	4670      	mov	r0, lr
 c0008d0:	4671      	mov	r1, lr
 c0008d2:	4672      	mov	r2, lr
 c0008d4:	4673      	mov	r3, lr
 c0008d6:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 c0008da:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 c0008de:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 c0008e2:	eef7 1a00 	vmov.f32	s3, #112	@ 0x3f800000  1.0
 c0008e6:	eeb7 2a00 	vmov.f32	s4, #112	@ 0x3f800000  1.0
 c0008ea:	eef7 2a00 	vmov.f32	s5, #112	@ 0x3f800000  1.0
 c0008ee:	eeb7 3a00 	vmov.f32	s6, #112	@ 0x3f800000  1.0
 c0008f2:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 c0008f6:	eeb7 4a00 	vmov.f32	s8, #112	@ 0x3f800000  1.0
 c0008fa:	eef7 4a00 	vmov.f32	s9, #112	@ 0x3f800000  1.0
 c0008fe:	eeb7 5a00 	vmov.f32	s10, #112	@ 0x3f800000  1.0
 c000902:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 c000906:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 c00090a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 c00090e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 c000912:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 c000916:	f38e 8c00 	msr	CPSR_fs, lr
 c00091a:	b410      	push	{r4}
 c00091c:	eef1 ca10 	vmrs	ip, fpscr
 c000920:	f64f 7460 	movw	r4, #65376	@ 0xff60
 c000924:	f6c0 74ff 	movt	r4, #4095	@ 0xfff
 c000928:	ea0c 0c04 	and.w	ip, ip, r4
 c00092c:	eee1 ca10 	vmsr	fpscr, ip
 c000930:	bc10      	pop	{r4}
 c000932:	46f4      	mov	ip, lr
 c000934:	4774      	bxns	lr
 c000936:	bf00      	nop
 c000938:	30000028 	.word	0x30000028
 c00093c:	3000002c 	.word	0x3000002c

0c000940 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 c000940:	b580      	push	{r7, lr}
 c000942:	b082      	sub	sp, #8
 c000944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 c000946:	4b12      	ldr	r3, [pc, #72]	@ (c000990 <HAL_MspInit+0x50>)
 c000948:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c00094c:	4a10      	ldr	r2, [pc, #64]	@ (c000990 <HAL_MspInit+0x50>)
 c00094e:	f043 0304 	orr.w	r3, r3, #4
 c000952:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 c000956:	4b0e      	ldr	r3, [pc, #56]	@ (c000990 <HAL_MspInit+0x50>)
 c000958:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c00095c:	f003 0304 	and.w	r3, r3, #4
 c000960:	607b      	str	r3, [r7, #4]
 c000962:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GTZC1_CLK_ENABLE();
 c000964:	4b0a      	ldr	r3, [pc, #40]	@ (c000990 <HAL_MspInit+0x50>)
 c000966:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 c00096a:	4a09      	ldr	r2, [pc, #36]	@ (c000990 <HAL_MspInit+0x50>)
 c00096c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 c000970:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 c000974:	4b06      	ldr	r3, [pc, #24]	@ (c000990 <HAL_MspInit+0x50>)
 c000976:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 c00097a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 c00097e:	603b      	str	r3, [r7, #0]
 c000980:	683b      	ldr	r3, [r7, #0]
  HAL_PWREx_EnableVddIO2();
 c000982:	f001 f8c3 	bl	c001b0c <HAL_PWREx_EnableVddIO2>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 c000986:	bf00      	nop
 c000988:	3708      	adds	r7, #8
 c00098a:	46bd      	mov	sp, r7
 c00098c:	bd80      	pop	{r7, pc}
 c00098e:	bf00      	nop
 c000990:	56020c00 	.word	0x56020c00

0c000994 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 c000994:	b480      	push	{r7}
 c000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 c000998:	bf00      	nop
 c00099a:	e7fd      	b.n	c000998 <NMI_Handler+0x4>

0c00099c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 c00099c:	b480      	push	{r7}
 c00099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 c0009a0:	bf00      	nop
 c0009a2:	e7fd      	b.n	c0009a0 <HardFault_Handler+0x4>

0c0009a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 c0009a4:	b480      	push	{r7}
 c0009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 c0009a8:	bf00      	nop
 c0009aa:	e7fd      	b.n	c0009a8 <MemManage_Handler+0x4>

0c0009ac <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 c0009ac:	b480      	push	{r7}
 c0009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 c0009b0:	bf00      	nop
 c0009b2:	e7fd      	b.n	c0009b0 <BusFault_Handler+0x4>

0c0009b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 c0009b4:	b480      	push	{r7}
 c0009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 c0009b8:	bf00      	nop
 c0009ba:	e7fd      	b.n	c0009b8 <UsageFault_Handler+0x4>

0c0009bc <SecureFault_Handler>:

/**
  * @brief This function handles Secure fault.
  */
void SecureFault_Handler(void)
{
 c0009bc:	b480      	push	{r7}
 c0009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SecureFault_IRQn 0 */

  /* USER CODE END SecureFault_IRQn 0 */
  while (1)
 c0009c0:	bf00      	nop
 c0009c2:	e7fd      	b.n	c0009c0 <SecureFault_Handler+0x4>

0c0009c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 c0009c4:	b480      	push	{r7}
 c0009c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 c0009c8:	bf00      	nop
 c0009ca:	46bd      	mov	sp, r7
 c0009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0009d0:	4770      	bx	lr

0c0009d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 c0009d2:	b480      	push	{r7}
 c0009d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 c0009d6:	bf00      	nop
 c0009d8:	46bd      	mov	sp, r7
 c0009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0009de:	4770      	bx	lr

0c0009e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 c0009e0:	b480      	push	{r7}
 c0009e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 c0009e4:	bf00      	nop
 c0009e6:	46bd      	mov	sp, r7
 c0009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0009ec:	4770      	bx	lr

0c0009ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 c0009ee:	b580      	push	{r7, lr}
 c0009f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 c0009f2:	f000 fa7d 	bl	c000ef0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 c0009f6:	bf00      	nop
 c0009f8:	bd80      	pop	{r7, pc}
	...

0c0009fc <TZ_SAU_Setup>:
  \brief   Setup a SAU Region
  \details Writes the region information contained in SAU_Region to the
           registers SAU_RNR, SAU_RBAR, and SAU_RLAR
 */
__STATIC_INLINE void TZ_SAU_Setup (void)
{
 c0009fc:	b480      	push	{r7}
 c0009fe:	af00      	add	r7, sp, #0
  /* repeat this for all possible SAU regions */

#endif /* defined (__SAUREGION_PRESENT) && (__SAUREGION_PRESENT == 1U) */

  #if defined (SAU_INIT_CTRL) && (SAU_INIT_CTRL == 1U)
    SAU->CTRL = ((SAU_INIT_CTRL_ENABLE << SAU_CTRL_ENABLE_Pos) & SAU_CTRL_ENABLE_Msk) |
 c000a00:	4b13      	ldr	r3, [pc, #76]	@ (c000a50 <TZ_SAU_Setup+0x54>)
 c000a02:	2202      	movs	r2, #2
 c000a04:	601a      	str	r2, [r3, #0]
  #endif /* defined (SCB_CSR_AIRCR_INIT) && (SCB_CSR_AIRCR_INIT == 1U) */

  #if defined (__FPU_USED) && (__FPU_USED == 1U) && \
      defined (TZ_FPU_NS_USAGE) && (TZ_FPU_NS_USAGE == 1U)

    SCB->NSACR = (SCB->NSACR & ~(SCB_NSACR_CP10_Msk | SCB_NSACR_CP11_Msk)) |
 c000a06:	4b13      	ldr	r3, [pc, #76]	@ (c000a54 <TZ_SAU_Setup+0x58>)
 c000a08:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c000a0c:	4a11      	ldr	r2, [pc, #68]	@ (c000a54 <TZ_SAU_Setup+0x58>)
 c000a0e:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 c000a12:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                   ((SCB_NSACR_CP10_11_VAL << SCB_NSACR_CP10_Pos) & (SCB_NSACR_CP10_Msk | SCB_NSACR_CP11_Msk));

    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c000a16:	4b10      	ldr	r3, [pc, #64]	@ (c000a58 <TZ_SAU_Setup+0x5c>)
 c000a18:	685b      	ldr	r3, [r3, #4]
                   ((FPU_FPCCR_TS_VAL        << FPU_FPCCR_TS_Pos       ) & FPU_FPCCR_TS_Msk       ) |
 c000a1a:	f023 53e0 	bic.w	r3, r3, #469762048	@ 0x1c000000
    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c000a1e:	4a0e      	ldr	r2, [pc, #56]	@ (c000a58 <TZ_SAU_Setup+0x5c>)
                   ((FPU_FPCCR_CLRONRETS_VAL << FPU_FPCCR_CLRONRETS_Pos) & FPU_FPCCR_CLRONRETS_Msk) |
 c000a20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c000a24:	6053      	str	r3, [r2, #4]
                   ((FPU_FPCCR_CLRONRET_VAL  << FPU_FPCCR_CLRONRET_Pos ) & FPU_FPCCR_CLRONRET_Msk );
  #endif

  #if defined (NVIC_INIT_ITNS0) && (NVIC_INIT_ITNS0 == 1U)
    NVIC->ITNS[0] = NVIC_INIT_ITNS0_VAL;
 c000a26:	4b0d      	ldr	r3, [pc, #52]	@ (c000a5c <TZ_SAU_Setup+0x60>)
 c000a28:	2200      	movs	r2, #0
 c000a2a:	f8c3 2280 	str.w	r2, [r3, #640]	@ 0x280
  #endif

  #if defined (NVIC_INIT_ITNS1) && (NVIC_INIT_ITNS1 == 1U)
    NVIC->ITNS[1] = NVIC_INIT_ITNS1_VAL;
 c000a2e:	4b0b      	ldr	r3, [pc, #44]	@ (c000a5c <TZ_SAU_Setup+0x60>)
 c000a30:	2200      	movs	r2, #0
 c000a32:	f8c3 2284 	str.w	r2, [r3, #644]	@ 0x284
  #endif

  #if defined (NVIC_INIT_ITNS2) && (NVIC_INIT_ITNS2 == 1U)
    NVIC->ITNS[2] = NVIC_INIT_ITNS2_VAL;
 c000a36:	4b09      	ldr	r3, [pc, #36]	@ (c000a5c <TZ_SAU_Setup+0x60>)
 c000a38:	2200      	movs	r2, #0
 c000a3a:	f8c3 2288 	str.w	r2, [r3, #648]	@ 0x288
  #endif

  #if defined (NVIC_INIT_ITNS3) && (NVIC_INIT_ITNS3 == 1U)
    NVIC->ITNS[3] = NVIC_INIT_ITNS3_VAL;
 c000a3e:	4b07      	ldr	r3, [pc, #28]	@ (c000a5c <TZ_SAU_Setup+0x60>)
 c000a40:	2200      	movs	r2, #0
 c000a42:	f8c3 228c 	str.w	r2, [r3, #652]	@ 0x28c
  #endif

}
 c000a46:	bf00      	nop
 c000a48:	46bd      	mov	sp, r7
 c000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000a4e:	4770      	bx	lr
 c000a50:	e000edd0 	.word	0xe000edd0
 c000a54:	e000ed00 	.word	0xe000ed00
 c000a58:	e000ef30 	.word	0xe000ef30
 c000a5c:	e000e100 	.word	0xe000e100

0c000a60 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 c000a60:	b580      	push	{r7, lr}
 c000a62:	af00      	add	r7, sp, #0
  /* SAU/IDAU, FPU and Interrupts secure/non-secure allocation settings */
  TZ_SAU_Setup();
 c000a64:	f7ff ffca 	bl	c0009fc <TZ_SAU_Setup>

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));     /* set CP10 and CP11 Full Access */
 c000a68:	4b1a      	ldr	r3, [pc, #104]	@ (c000ad4 <SystemInit+0x74>)
 c000a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 c000a6e:	4a19      	ldr	r2, [pc, #100]	@ (c000ad4 <SystemInit+0x74>)
 c000a70:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 c000a74:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

    SCB_NS->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 c000a78:	4b17      	ldr	r3, [pc, #92]	@ (c000ad8 <SystemInit+0x78>)
 c000a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 c000a7e:	4a16      	ldr	r2, [pc, #88]	@ (c000ad8 <SystemInit+0x78>)
 c000a80:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 c000a84:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 c000a88:	4b14      	ldr	r3, [pc, #80]	@ (c000adc <SystemInit+0x7c>)
 c000a8a:	2201      	movs	r2, #1
 c000a8c:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 c000a8e:	4b13      	ldr	r3, [pc, #76]	@ (c000adc <SystemInit+0x7c>)
 c000a90:	2200      	movs	r2, #0
 c000a92:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 c000a94:	4b11      	ldr	r3, [pc, #68]	@ (c000adc <SystemInit+0x7c>)
 c000a96:	2200      	movs	r2, #0
 c000a98:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 c000a9a:	4b10      	ldr	r3, [pc, #64]	@ (c000adc <SystemInit+0x7c>)
 c000a9c:	2200      	movs	r2, #0
 c000a9e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 c000aa0:	4b0e      	ldr	r3, [pc, #56]	@ (c000adc <SystemInit+0x7c>)
 c000aa2:	681b      	ldr	r3, [r3, #0]
 c000aa4:	4a0d      	ldr	r2, [pc, #52]	@ (c000adc <SystemInit+0x7c>)
 c000aa6:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 c000aaa:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 c000aae:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 c000ab0:	4b0a      	ldr	r3, [pc, #40]	@ (c000adc <SystemInit+0x7c>)
 c000ab2:	2200      	movs	r2, #0
 c000ab4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 c000ab6:	4b09      	ldr	r3, [pc, #36]	@ (c000adc <SystemInit+0x7c>)
 c000ab8:	681b      	ldr	r3, [r3, #0]
 c000aba:	4a08      	ldr	r2, [pc, #32]	@ (c000adc <SystemInit+0x7c>)
 c000abc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 c000ac0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 c000ac2:	4b06      	ldr	r3, [pc, #24]	@ (c000adc <SystemInit+0x7c>)
 c000ac4:	2200      	movs	r2, #0
 c000ac6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 c000ac8:	4b02      	ldr	r3, [pc, #8]	@ (c000ad4 <SystemInit+0x74>)
 c000aca:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 c000ace:	609a      	str	r2, [r3, #8]
#endif
}
 c000ad0:	bf00      	nop
 c000ad2:	bd80      	pop	{r7, pc}
 c000ad4:	e000ed00 	.word	0xe000ed00
 c000ad8:	e002ed00 	.word	0xe002ed00
 c000adc:	56020c00 	.word	0x56020c00

0c000ae0 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 c000ae0:	b480      	push	{r7}
 c000ae2:	b089      	sub	sp, #36	@ 0x24
 c000ae4:	af00      	add	r7, sp, #0
  uint32_t pllr, pllsource, pllm , tmp, pllfracen, msirange;
  float_t fracn1, pllvco;

  /* Get MSI Range frequency--------------------------------------------------*/
  if(READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 c000ae6:	4b73      	ldr	r3, [pc, #460]	@ (c000cb4 <SystemCoreClockUpdate+0x1d4>)
 c000ae8:	689b      	ldr	r3, [r3, #8]
 c000aea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 c000aee:	2b00      	cmp	r3, #0
 c000af0:	d107      	bne.n	c000b02 <SystemCoreClockUpdate+0x22>
  {
    /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 c000af2:	4b70      	ldr	r3, [pc, #448]	@ (c000cb4 <SystemCoreClockUpdate+0x1d4>)
 c000af4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 c000af8:	0b1b      	lsrs	r3, r3, #12
 c000afa:	f003 030f 	and.w	r3, r3, #15
 c000afe:	61fb      	str	r3, [r7, #28]
 c000b00:	e005      	b.n	c000b0e <SystemCoreClockUpdate+0x2e>
  }
  else
  {
    /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 c000b02:	4b6c      	ldr	r3, [pc, #432]	@ (c000cb4 <SystemCoreClockUpdate+0x1d4>)
 c000b04:	689b      	ldr	r3, [r3, #8]
 c000b06:	0f1b      	lsrs	r3, r3, #28
 c000b08:	f003 030f 	and.w	r3, r3, #15
 c000b0c:	61fb      	str	r3, [r7, #28]
  }

  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 c000b0e:	4a6a      	ldr	r2, [pc, #424]	@ (c000cb8 <SystemCoreClockUpdate+0x1d8>)
 c000b10:	69fb      	ldr	r3, [r7, #28]
 c000b12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c000b16:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR1 & RCC_CFGR1_SWS)
 c000b18:	4b66      	ldr	r3, [pc, #408]	@ (c000cb4 <SystemCoreClockUpdate+0x1d4>)
 c000b1a:	69db      	ldr	r3, [r3, #28]
 c000b1c:	f003 030c 	and.w	r3, r3, #12
 c000b20:	2b0c      	cmp	r3, #12
 c000b22:	f200 80ae 	bhi.w	c000c82 <SystemCoreClockUpdate+0x1a2>
 c000b26:	a201      	add	r2, pc, #4	@ (adr r2, c000b2c <SystemCoreClockUpdate+0x4c>)
 c000b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c000b2c:	0c000b61 	.word	0x0c000b61
 c000b30:	0c000c83 	.word	0x0c000c83
 c000b34:	0c000c83 	.word	0x0c000c83
 c000b38:	0c000c83 	.word	0x0c000c83
 c000b3c:	0c000b69 	.word	0x0c000b69
 c000b40:	0c000c83 	.word	0x0c000c83
 c000b44:	0c000c83 	.word	0x0c000c83
 c000b48:	0c000c83 	.word	0x0c000c83
 c000b4c:	0c000b71 	.word	0x0c000b71
 c000b50:	0c000c83 	.word	0x0c000c83
 c000b54:	0c000c83 	.word	0x0c000c83
 c000b58:	0c000c83 	.word	0x0c000c83
 c000b5c:	0c000b79 	.word	0x0c000b79
  {
  case 0x00:  /* MSI used as system clock source */
    SystemCoreClock = msirange;
 c000b60:	4a56      	ldr	r2, [pc, #344]	@ (c000cbc <SystemCoreClockUpdate+0x1dc>)
 c000b62:	69fb      	ldr	r3, [r7, #28]
 c000b64:	6013      	str	r3, [r2, #0]
    break;
 c000b66:	e090      	b.n	c000c8a <SystemCoreClockUpdate+0x1aa>

  case 0x04:  /* HSI used as system clock source */
    SystemCoreClock = HSI_VALUE;
 c000b68:	4b54      	ldr	r3, [pc, #336]	@ (c000cbc <SystemCoreClockUpdate+0x1dc>)
 c000b6a:	4a55      	ldr	r2, [pc, #340]	@ (c000cc0 <SystemCoreClockUpdate+0x1e0>)
 c000b6c:	601a      	str	r2, [r3, #0]
    break;
 c000b6e:	e08c      	b.n	c000c8a <SystemCoreClockUpdate+0x1aa>

  case 0x08:  /* HSE used as system clock source */
    SystemCoreClock = HSE_VALUE;
 c000b70:	4b52      	ldr	r3, [pc, #328]	@ (c000cbc <SystemCoreClockUpdate+0x1dc>)
 c000b72:	4a53      	ldr	r2, [pc, #332]	@ (c000cc0 <SystemCoreClockUpdate+0x1e0>)
 c000b74:	601a      	str	r2, [r3, #0]
    break;
 c000b76:	e088      	b.n	c000c8a <SystemCoreClockUpdate+0x1aa>

  case 0x0C:  /* PLL used as system clock source */
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 c000b78:	4b4e      	ldr	r3, [pc, #312]	@ (c000cb4 <SystemCoreClockUpdate+0x1d4>)
 c000b7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c000b7c:	f003 0303 	and.w	r3, r3, #3
 c000b80:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M)>> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 c000b82:	4b4c      	ldr	r3, [pc, #304]	@ (c000cb4 <SystemCoreClockUpdate+0x1d4>)
 c000b84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c000b86:	0a1b      	lsrs	r3, r3, #8
 c000b88:	f003 030f 	and.w	r3, r3, #15
 c000b8c:	3301      	adds	r3, #1
 c000b8e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN)>>RCC_PLL1CFGR_PLL1FRACEN_Pos);
 c000b90:	4b48      	ldr	r3, [pc, #288]	@ (c000cb4 <SystemCoreClockUpdate+0x1d4>)
 c000b92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c000b94:	091b      	lsrs	r3, r3, #4
 c000b96:	f003 0301 	and.w	r3, r3, #1
 c000b9a:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN)>> RCC_PLL1FRACR_PLL1FRACN_Pos));
 c000b9c:	4b45      	ldr	r3, [pc, #276]	@ (c000cb4 <SystemCoreClockUpdate+0x1d4>)
 c000b9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 c000ba0:	08db      	lsrs	r3, r3, #3
 c000ba2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 c000ba6:	68fa      	ldr	r2, [r7, #12]
 c000ba8:	fb02 f303 	mul.w	r3, r2, r3
 c000bac:	ee07 3a90 	vmov	s15, r3
 c000bb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c000bb4:	edc7 7a02 	vstr	s15, [r7, #8]

      switch (pllsource)
 c000bb8:	697b      	ldr	r3, [r7, #20]
 c000bba:	2b03      	cmp	r3, #3
 c000bbc:	d019      	beq.n	c000bf2 <SystemCoreClockUpdate+0x112>
 c000bbe:	697b      	ldr	r3, [r7, #20]
 c000bc0:	2b03      	cmp	r3, #3
 c000bc2:	d822      	bhi.n	c000c0a <SystemCoreClockUpdate+0x12a>
 c000bc4:	697b      	ldr	r3, [r7, #20]
 c000bc6:	2b00      	cmp	r3, #0
 c000bc8:	d003      	beq.n	c000bd2 <SystemCoreClockUpdate+0xf2>
 c000bca:	697b      	ldr	r3, [r7, #20]
 c000bcc:	2b02      	cmp	r3, #2
 c000bce:	d004      	beq.n	c000bda <SystemCoreClockUpdate+0xfa>
 c000bd0:	e01b      	b.n	c000c0a <SystemCoreClockUpdate+0x12a>
      {
      case 0x00:  /* No clock sent to PLL*/
        pllvco = (float_t)0U;
 c000bd2:	f04f 0300 	mov.w	r3, #0
 c000bd6:	61bb      	str	r3, [r7, #24]
        break;
 c000bd8:	e026      	b.n	c000c28 <SystemCoreClockUpdate+0x148>

      case 0x02:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm);
 c000bda:	693b      	ldr	r3, [r7, #16]
 c000bdc:	ee07 3a90 	vmov	s15, r3
 c000be0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 c000be4:	eddf 6a37 	vldr	s13, [pc, #220]	@ c000cc4 <SystemCoreClockUpdate+0x1e4>
 c000be8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 c000bec:	edc7 7a06 	vstr	s15, [r7, #24]
        break;
 c000bf0:	e01a      	b.n	c000c28 <SystemCoreClockUpdate+0x148>

      case 0x03:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm);
 c000bf2:	693b      	ldr	r3, [r7, #16]
 c000bf4:	ee07 3a90 	vmov	s15, r3
 c000bf8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 c000bfc:	eddf 6a31 	vldr	s13, [pc, #196]	@ c000cc4 <SystemCoreClockUpdate+0x1e4>
 c000c00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 c000c04:	edc7 7a06 	vstr	s15, [r7, #24]
        break;
 c000c08:	e00e      	b.n	c000c28 <SystemCoreClockUpdate+0x148>

      default:    /* MSI used as PLL clock source */
        pllvco = ((float_t)msirange / (float_t)pllm);
 c000c0a:	69fb      	ldr	r3, [r7, #28]
 c000c0c:	ee07 3a90 	vmov	s15, r3
 c000c10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 c000c14:	693b      	ldr	r3, [r7, #16]
 c000c16:	ee07 3a90 	vmov	s15, r3
 c000c1a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 c000c1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 c000c22:	edc7 7a06 	vstr	s15, [r7, #24]
        break;
 c000c26:	bf00      	nop
      }

      pllvco = pllvco * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + (fracn1/(float_t)0x2000) + (float_t)1U);
 c000c28:	4b22      	ldr	r3, [pc, #136]	@ (c000cb4 <SystemCoreClockUpdate+0x1d4>)
 c000c2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 c000c2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 c000c30:	ee07 3a90 	vmov	s15, r3
 c000c34:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 c000c38:	edd7 6a02 	vldr	s13, [r7, #8]
 c000c3c:	ed9f 6a22 	vldr	s12, [pc, #136]	@ c000cc8 <SystemCoreClockUpdate+0x1e8>
 c000c40:	eec6 7a86 	vdiv.f32	s15, s13, s12
 c000c44:	ee77 7a27 	vadd.f32	s15, s14, s15
 c000c48:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 c000c4c:	ee77 7a87 	vadd.f32	s15, s15, s14
 c000c50:	ed97 7a06 	vldr	s14, [r7, #24]
 c000c54:	ee67 7a27 	vmul.f32	s15, s14, s15
 c000c58:	edc7 7a06 	vstr	s15, [r7, #24]
      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U );
 c000c5c:	4b15      	ldr	r3, [pc, #84]	@ (c000cb4 <SystemCoreClockUpdate+0x1d4>)
 c000c5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 c000c60:	0e1b      	lsrs	r3, r3, #24
 c000c62:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 c000c66:	3301      	adds	r3, #1
 c000c68:	607b      	str	r3, [r7, #4]
      SystemCoreClock = (uint32_t)((uint32_t)pllvco/pllr);
 c000c6a:	edd7 7a06 	vldr	s15, [r7, #24]
 c000c6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 c000c72:	ee17 2a90 	vmov	r2, s15
 c000c76:	687b      	ldr	r3, [r7, #4]
 c000c78:	fbb2 f3f3 	udiv	r3, r2, r3
 c000c7c:	4a0f      	ldr	r2, [pc, #60]	@ (c000cbc <SystemCoreClockUpdate+0x1dc>)
 c000c7e:	6013      	str	r3, [r2, #0]
      break;
 c000c80:	e003      	b.n	c000c8a <SystemCoreClockUpdate+0x1aa>

  default:
    SystemCoreClock = msirange;
 c000c82:	4a0e      	ldr	r2, [pc, #56]	@ (c000cbc <SystemCoreClockUpdate+0x1dc>)
 c000c84:	69fb      	ldr	r3, [r7, #28]
 c000c86:	6013      	str	r3, [r2, #0]
    break;
 c000c88:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos)];
 c000c8a:	4b0a      	ldr	r3, [pc, #40]	@ (c000cb4 <SystemCoreClockUpdate+0x1d4>)
 c000c8c:	6a1b      	ldr	r3, [r3, #32]
 c000c8e:	f003 030f 	and.w	r3, r3, #15
 c000c92:	4a0e      	ldr	r2, [pc, #56]	@ (c000ccc <SystemCoreClockUpdate+0x1ec>)
 c000c94:	5cd3      	ldrb	r3, [r2, r3]
 c000c96:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 c000c98:	4b08      	ldr	r3, [pc, #32]	@ (c000cbc <SystemCoreClockUpdate+0x1dc>)
 c000c9a:	681a      	ldr	r2, [r3, #0]
 c000c9c:	683b      	ldr	r3, [r7, #0]
 c000c9e:	fa22 f303 	lsr.w	r3, r2, r3
 c000ca2:	4a06      	ldr	r2, [pc, #24]	@ (c000cbc <SystemCoreClockUpdate+0x1dc>)
 c000ca4:	6013      	str	r3, [r2, #0]
}
 c000ca6:	bf00      	nop
 c000ca8:	3724      	adds	r7, #36	@ 0x24
 c000caa:	46bd      	mov	sp, r7
 c000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000cb0:	4770      	bx	lr
 c000cb2:	bf00      	nop
 c000cb4:	56020c00 	.word	0x56020c00
 c000cb8:	0c001dd0 	.word	0x0c001dd0
 c000cbc:	30000000 	.word	0x30000000
 c000cc0:	00f42400 	.word	0x00f42400
 c000cc4:	4b742400 	.word	0x4b742400
 c000cc8:	46000000 	.word	0x46000000
 c000ccc:	0c001dc0 	.word	0x0c001dc0

0c000cd0 <__acle_se_SECURE_SystemCoreClockUpdate>:
  *         be used by the user application to setup the SysTick timer or configure
  *         other parameters.
  * @retval SystemCoreClock value (HCLK)
  */
CMSE_NS_ENTRY uint32_t SECURE_SystemCoreClockUpdate(void)
{
 c000cd0:	b580      	push	{r7, lr}
 c000cd2:	af00      	add	r7, sp, #0
  SystemCoreClockUpdate();
 c000cd4:	f7ff ff04 	bl	c000ae0 <SystemCoreClockUpdate>

  return SystemCoreClock;
 c000cd8:	4b1c      	ldr	r3, [pc, #112]	@ (c000d4c <__acle_se_SECURE_SystemCoreClockUpdate+0x7c>)
 c000cda:	681b      	ldr	r3, [r3, #0]
}
 c000cdc:	4618      	mov	r0, r3
 c000cde:	46bd      	mov	sp, r7
 c000ce0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c000ce4:	4671      	mov	r1, lr
 c000ce6:	4672      	mov	r2, lr
 c000ce8:	4673      	mov	r3, lr
 c000cea:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 c000cee:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 c000cf2:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 c000cf6:	eef7 1a00 	vmov.f32	s3, #112	@ 0x3f800000  1.0
 c000cfa:	eeb7 2a00 	vmov.f32	s4, #112	@ 0x3f800000  1.0
 c000cfe:	eef7 2a00 	vmov.f32	s5, #112	@ 0x3f800000  1.0
 c000d02:	eeb7 3a00 	vmov.f32	s6, #112	@ 0x3f800000  1.0
 c000d06:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 c000d0a:	eeb7 4a00 	vmov.f32	s8, #112	@ 0x3f800000  1.0
 c000d0e:	eef7 4a00 	vmov.f32	s9, #112	@ 0x3f800000  1.0
 c000d12:	eeb7 5a00 	vmov.f32	s10, #112	@ 0x3f800000  1.0
 c000d16:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 c000d1a:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 c000d1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 c000d22:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 c000d26:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 c000d2a:	f38e 8c00 	msr	CPSR_fs, lr
 c000d2e:	b410      	push	{r4}
 c000d30:	eef1 ca10 	vmrs	ip, fpscr
 c000d34:	f64f 7460 	movw	r4, #65376	@ 0xff60
 c000d38:	f6c0 74ff 	movt	r4, #4095	@ 0xfff
 c000d3c:	ea0c 0c04 	and.w	ip, ip, r4
 c000d40:	eee1 ca10 	vmsr	fpscr, ip
 c000d44:	bc10      	pop	{r4}
 c000d46:	46f4      	mov	ip, lr
 c000d48:	4774      	bxns	lr
 c000d4a:	bf00      	nop
 c000d4c:	30000000 	.word	0x30000000

0c000d50 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 c000d50:	f8df d034 	ldr.w	sp, [pc, #52]	@ c000d88 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 c000d54:	f7ff fe84 	bl	c000a60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 c000d58:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 c000d5a:	e003      	b.n	c000d64 <LoopCopyDataInit>

0c000d5c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 c000d5c:	4b0b      	ldr	r3, [pc, #44]	@ (c000d8c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 c000d5e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 c000d60:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 c000d62:	3104      	adds	r1, #4

0c000d64 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 c000d64:	480a      	ldr	r0, [pc, #40]	@ (c000d90 <LoopForever+0xa>)
	ldr	r3, =_edata
 c000d66:	4b0b      	ldr	r3, [pc, #44]	@ (c000d94 <LoopForever+0xe>)
	adds	r2, r0, r1
 c000d68:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 c000d6a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 c000d6c:	d3f6      	bcc.n	c000d5c <CopyDataInit>
	ldr	r2, =_sbss
 c000d6e:	4a0a      	ldr	r2, [pc, #40]	@ (c000d98 <LoopForever+0x12>)
	b	LoopFillZerobss
 c000d70:	e002      	b.n	c000d78 <LoopFillZerobss>

0c000d72 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 c000d72:	2300      	movs	r3, #0
	str	r3, [r2], #4
 c000d74:	f842 3b04 	str.w	r3, [r2], #4

0c000d78 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 c000d78:	4b08      	ldr	r3, [pc, #32]	@ (c000d9c <LoopForever+0x16>)
	cmp	r2, r3
 c000d7a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 c000d7c:	d3f9      	bcc.n	c000d72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 c000d7e:	f000 ffef 	bl	c001d60 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 c000d82:	f7ff faa7 	bl	c0002d4 <main>

0c000d86 <LoopForever>:

LoopForever:
    b LoopForever
 c000d86:	e7fe      	b.n	c000d86 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 c000d88:	30040000 	.word	0x30040000
	ldr	r3, =_sidata
 c000d8c:	0c001e98 	.word	0x0c001e98
	ldr	r0, =_sdata
 c000d90:	30000000 	.word	0x30000000
	ldr	r3, =_edata
 c000d94:	30000009 	.word	0x30000009
	ldr	r2, =_sbss
 c000d98:	3000000c 	.word	0x3000000c
	ldr	r3, = _ebss
 c000d9c:	30000034 	.word	0x30000034

0c000da0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 c000da0:	e7fe      	b.n	c000da0 <ADC1_IRQHandler>
	...

0c000da4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 c000da4:	b580      	push	{r7, lr}
 c000da6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 c000da8:	4b12      	ldr	r3, [pc, #72]	@ (c000df4 <HAL_Init+0x50>)
 c000daa:	681b      	ldr	r3, [r3, #0]
 c000dac:	4a11      	ldr	r2, [pc, #68]	@ (c000df4 <HAL_Init+0x50>)
 c000dae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 c000db2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 c000db4:	2003      	movs	r0, #3
 c000db6:	f000 f93e 	bl	c001036 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 c000dba:	f000 fec7 	bl	c001b4c <HAL_RCC_GetSysClockFreq>
 c000dbe:	4602      	mov	r2, r0
 c000dc0:	4b0d      	ldr	r3, [pc, #52]	@ (c000df8 <HAL_Init+0x54>)
 c000dc2:	6a1b      	ldr	r3, [r3, #32]
 c000dc4:	f003 030f 	and.w	r3, r3, #15
 c000dc8:	490c      	ldr	r1, [pc, #48]	@ (c000dfc <HAL_Init+0x58>)
 c000dca:	5ccb      	ldrb	r3, [r1, r3]
 c000dcc:	fa22 f303 	lsr.w	r3, r2, r3
 c000dd0:	4a0b      	ldr	r2, [pc, #44]	@ (c000e00 <HAL_Init+0x5c>)
 c000dd2:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 c000dd4:	2004      	movs	r0, #4
 c000dd6:	f000 f975 	bl	c0010c4 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 c000dda:	200f      	movs	r0, #15
 c000ddc:	f000 f812 	bl	c000e04 <HAL_InitTick>
 c000de0:	4603      	mov	r3, r0
 c000de2:	2b00      	cmp	r3, #0
 c000de4:	d001      	beq.n	c000dea <HAL_Init+0x46>
  {
    return HAL_ERROR;
 c000de6:	2301      	movs	r3, #1
 c000de8:	e002      	b.n	c000df0 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 c000dea:	f7ff fda9 	bl	c000940 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 c000dee:	2300      	movs	r3, #0
}
 c000df0:	4618      	mov	r0, r3
 c000df2:	bd80      	pop	{r7, pc}
 c000df4:	50022000 	.word	0x50022000
 c000df8:	56020c00 	.word	0x56020c00
 c000dfc:	0c001dc0 	.word	0x0c001dc0
 c000e00:	30000000 	.word	0x30000000

0c000e04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 c000e04:	b580      	push	{r7, lr}
 c000e06:	b084      	sub	sp, #16
 c000e08:	af00      	add	r7, sp, #0
 c000e0a:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 c000e0c:	2300      	movs	r3, #0
 c000e0e:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 c000e10:	4b33      	ldr	r3, [pc, #204]	@ (c000ee0 <HAL_InitTick+0xdc>)
 c000e12:	781b      	ldrb	r3, [r3, #0]
 c000e14:	2b00      	cmp	r3, #0
 c000e16:	d101      	bne.n	c000e1c <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 c000e18:	2301      	movs	r3, #1
 c000e1a:	e05c      	b.n	c000ed6 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 c000e1c:	4b31      	ldr	r3, [pc, #196]	@ (c000ee4 <HAL_InitTick+0xe0>)
 c000e1e:	681b      	ldr	r3, [r3, #0]
 c000e20:	f003 0304 	and.w	r3, r3, #4
 c000e24:	2b04      	cmp	r3, #4
 c000e26:	d10c      	bne.n	c000e42 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 c000e28:	4b2f      	ldr	r3, [pc, #188]	@ (c000ee8 <HAL_InitTick+0xe4>)
 c000e2a:	681a      	ldr	r2, [r3, #0]
 c000e2c:	4b2c      	ldr	r3, [pc, #176]	@ (c000ee0 <HAL_InitTick+0xdc>)
 c000e2e:	781b      	ldrb	r3, [r3, #0]
 c000e30:	4619      	mov	r1, r3
 c000e32:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 c000e36:	fbb3 f3f1 	udiv	r3, r3, r1
 c000e3a:	fbb2 f3f3 	udiv	r3, r2, r3
 c000e3e:	60fb      	str	r3, [r7, #12]
 c000e40:	e037      	b.n	c000eb2 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 c000e42:	f000 f997 	bl	c001174 <HAL_SYSTICK_GetCLKSourceConfig>
 c000e46:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 c000e48:	68bb      	ldr	r3, [r7, #8]
 c000e4a:	2b02      	cmp	r3, #2
 c000e4c:	d023      	beq.n	c000e96 <HAL_InitTick+0x92>
 c000e4e:	68bb      	ldr	r3, [r7, #8]
 c000e50:	2b02      	cmp	r3, #2
 c000e52:	d82d      	bhi.n	c000eb0 <HAL_InitTick+0xac>
 c000e54:	68bb      	ldr	r3, [r7, #8]
 c000e56:	2b00      	cmp	r3, #0
 c000e58:	d003      	beq.n	c000e62 <HAL_InitTick+0x5e>
 c000e5a:	68bb      	ldr	r3, [r7, #8]
 c000e5c:	2b01      	cmp	r3, #1
 c000e5e:	d00d      	beq.n	c000e7c <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 c000e60:	e026      	b.n	c000eb0 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 c000e62:	4b21      	ldr	r3, [pc, #132]	@ (c000ee8 <HAL_InitTick+0xe4>)
 c000e64:	681a      	ldr	r2, [r3, #0]
 c000e66:	4b1e      	ldr	r3, [pc, #120]	@ (c000ee0 <HAL_InitTick+0xdc>)
 c000e68:	781b      	ldrb	r3, [r3, #0]
 c000e6a:	4619      	mov	r1, r3
 c000e6c:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 c000e70:	fbb3 f3f1 	udiv	r3, r3, r1
 c000e74:	fbb2 f3f3 	udiv	r3, r2, r3
 c000e78:	60fb      	str	r3, [r7, #12]
        break;
 c000e7a:	e01a      	b.n	c000eb2 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 c000e7c:	4b18      	ldr	r3, [pc, #96]	@ (c000ee0 <HAL_InitTick+0xdc>)
 c000e7e:	781b      	ldrb	r3, [r3, #0]
 c000e80:	461a      	mov	r2, r3
 c000e82:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 c000e86:	fbb3 f3f2 	udiv	r3, r3, r2
 c000e8a:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 c000e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 c000e92:	60fb      	str	r3, [r7, #12]
        break;
 c000e94:	e00d      	b.n	c000eb2 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 c000e96:	4b12      	ldr	r3, [pc, #72]	@ (c000ee0 <HAL_InitTick+0xdc>)
 c000e98:	781b      	ldrb	r3, [r3, #0]
 c000e9a:	461a      	mov	r2, r3
 c000e9c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 c000ea0:	fbb3 f3f2 	udiv	r3, r3, r2
 c000ea4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 c000ea8:	fbb2 f3f3 	udiv	r3, r2, r3
 c000eac:	60fb      	str	r3, [r7, #12]
        break;
 c000eae:	e000      	b.n	c000eb2 <HAL_InitTick+0xae>
        break;
 c000eb0:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 c000eb2:	68f8      	ldr	r0, [r7, #12]
 c000eb4:	f000 f8e4 	bl	c001080 <HAL_SYSTICK_Config>
 c000eb8:	4603      	mov	r3, r0
 c000eba:	2b00      	cmp	r3, #0
 c000ebc:	d001      	beq.n	c000ec2 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 c000ebe:	2301      	movs	r3, #1
 c000ec0:	e009      	b.n	c000ed6 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 c000ec2:	2200      	movs	r2, #0
 c000ec4:	6879      	ldr	r1, [r7, #4]
 c000ec6:	f04f 30ff 	mov.w	r0, #4294967295
 c000eca:	f000 f8bf 	bl	c00104c <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 c000ece:	4a07      	ldr	r2, [pc, #28]	@ (c000eec <HAL_InitTick+0xe8>)
 c000ed0:	687b      	ldr	r3, [r7, #4]
 c000ed2:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 c000ed4:	2300      	movs	r3, #0
}
 c000ed6:	4618      	mov	r0, r3
 c000ed8:	3710      	adds	r7, #16
 c000eda:	46bd      	mov	sp, r7
 c000edc:	bd80      	pop	{r7, pc}
 c000ede:	bf00      	nop
 c000ee0:	30000008 	.word	0x30000008
 c000ee4:	e000e010 	.word	0xe000e010
 c000ee8:	30000000 	.word	0x30000000
 c000eec:	30000004 	.word	0x30000004

0c000ef0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 c000ef0:	b480      	push	{r7}
 c000ef2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 c000ef4:	4b06      	ldr	r3, [pc, #24]	@ (c000f10 <HAL_IncTick+0x20>)
 c000ef6:	781b      	ldrb	r3, [r3, #0]
 c000ef8:	461a      	mov	r2, r3
 c000efa:	4b06      	ldr	r3, [pc, #24]	@ (c000f14 <HAL_IncTick+0x24>)
 c000efc:	681b      	ldr	r3, [r3, #0]
 c000efe:	4413      	add	r3, r2
 c000f00:	4a04      	ldr	r2, [pc, #16]	@ (c000f14 <HAL_IncTick+0x24>)
 c000f02:	6013      	str	r3, [r2, #0]
}
 c000f04:	bf00      	nop
 c000f06:	46bd      	mov	sp, r7
 c000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000f0c:	4770      	bx	lr
 c000f0e:	bf00      	nop
 c000f10:	30000008 	.word	0x30000008
 c000f14:	30000030 	.word	0x30000030

0c000f18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 c000f18:	b480      	push	{r7}
 c000f1a:	b085      	sub	sp, #20
 c000f1c:	af00      	add	r7, sp, #0
 c000f1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 c000f20:	687b      	ldr	r3, [r7, #4]
 c000f22:	f003 0307 	and.w	r3, r3, #7
 c000f26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 c000f28:	4b0c      	ldr	r3, [pc, #48]	@ (c000f5c <__NVIC_SetPriorityGrouping+0x44>)
 c000f2a:	68db      	ldr	r3, [r3, #12]
 c000f2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 c000f2e:	68ba      	ldr	r2, [r7, #8]
 c000f30:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 c000f34:	4013      	ands	r3, r2
 c000f36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 c000f38:	68fb      	ldr	r3, [r7, #12]
 c000f3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 c000f3c:	68bb      	ldr	r3, [r7, #8]
 c000f3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 c000f40:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 c000f44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 c000f48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 c000f4a:	4a04      	ldr	r2, [pc, #16]	@ (c000f5c <__NVIC_SetPriorityGrouping+0x44>)
 c000f4c:	68bb      	ldr	r3, [r7, #8]
 c000f4e:	60d3      	str	r3, [r2, #12]
}
 c000f50:	bf00      	nop
 c000f52:	3714      	adds	r7, #20
 c000f54:	46bd      	mov	sp, r7
 c000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000f5a:	4770      	bx	lr
 c000f5c:	e000ed00 	.word	0xe000ed00

0c000f60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 c000f60:	b480      	push	{r7}
 c000f62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 c000f64:	4b04      	ldr	r3, [pc, #16]	@ (c000f78 <__NVIC_GetPriorityGrouping+0x18>)
 c000f66:	68db      	ldr	r3, [r3, #12]
 c000f68:	0a1b      	lsrs	r3, r3, #8
 c000f6a:	f003 0307 	and.w	r3, r3, #7
}
 c000f6e:	4618      	mov	r0, r3
 c000f70:	46bd      	mov	sp, r7
 c000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000f76:	4770      	bx	lr
 c000f78:	e000ed00 	.word	0xe000ed00

0c000f7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 c000f7c:	b480      	push	{r7}
 c000f7e:	b083      	sub	sp, #12
 c000f80:	af00      	add	r7, sp, #0
 c000f82:	4603      	mov	r3, r0
 c000f84:	6039      	str	r1, [r7, #0]
 c000f86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 c000f88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c000f8c:	2b00      	cmp	r3, #0
 c000f8e:	db0a      	blt.n	c000fa6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 c000f90:	683b      	ldr	r3, [r7, #0]
 c000f92:	b2da      	uxtb	r2, r3
 c000f94:	490c      	ldr	r1, [pc, #48]	@ (c000fc8 <__NVIC_SetPriority+0x4c>)
 c000f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c000f9a:	0112      	lsls	r2, r2, #4
 c000f9c:	b2d2      	uxtb	r2, r2
 c000f9e:	440b      	add	r3, r1
 c000fa0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 c000fa4:	e00a      	b.n	c000fbc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 c000fa6:	683b      	ldr	r3, [r7, #0]
 c000fa8:	b2da      	uxtb	r2, r3
 c000faa:	4908      	ldr	r1, [pc, #32]	@ (c000fcc <__NVIC_SetPriority+0x50>)
 c000fac:	79fb      	ldrb	r3, [r7, #7]
 c000fae:	f003 030f 	and.w	r3, r3, #15
 c000fb2:	3b04      	subs	r3, #4
 c000fb4:	0112      	lsls	r2, r2, #4
 c000fb6:	b2d2      	uxtb	r2, r2
 c000fb8:	440b      	add	r3, r1
 c000fba:	761a      	strb	r2, [r3, #24]
}
 c000fbc:	bf00      	nop
 c000fbe:	370c      	adds	r7, #12
 c000fc0:	46bd      	mov	sp, r7
 c000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000fc6:	4770      	bx	lr
 c000fc8:	e000e100 	.word	0xe000e100
 c000fcc:	e000ed00 	.word	0xe000ed00

0c000fd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 c000fd0:	b480      	push	{r7}
 c000fd2:	b089      	sub	sp, #36	@ 0x24
 c000fd4:	af00      	add	r7, sp, #0
 c000fd6:	60f8      	str	r0, [r7, #12]
 c000fd8:	60b9      	str	r1, [r7, #8]
 c000fda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 c000fdc:	68fb      	ldr	r3, [r7, #12]
 c000fde:	f003 0307 	and.w	r3, r3, #7
 c000fe2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 c000fe4:	69fb      	ldr	r3, [r7, #28]
 c000fe6:	f1c3 0307 	rsb	r3, r3, #7
 c000fea:	2b04      	cmp	r3, #4
 c000fec:	bf28      	it	cs
 c000fee:	2304      	movcs	r3, #4
 c000ff0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 c000ff2:	69fb      	ldr	r3, [r7, #28]
 c000ff4:	3304      	adds	r3, #4
 c000ff6:	2b06      	cmp	r3, #6
 c000ff8:	d902      	bls.n	c001000 <NVIC_EncodePriority+0x30>
 c000ffa:	69fb      	ldr	r3, [r7, #28]
 c000ffc:	3b03      	subs	r3, #3
 c000ffe:	e000      	b.n	c001002 <NVIC_EncodePriority+0x32>
 c001000:	2300      	movs	r3, #0
 c001002:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 c001004:	f04f 32ff 	mov.w	r2, #4294967295
 c001008:	69bb      	ldr	r3, [r7, #24]
 c00100a:	fa02 f303 	lsl.w	r3, r2, r3
 c00100e:	43da      	mvns	r2, r3
 c001010:	68bb      	ldr	r3, [r7, #8]
 c001012:	401a      	ands	r2, r3
 c001014:	697b      	ldr	r3, [r7, #20]
 c001016:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 c001018:	f04f 31ff 	mov.w	r1, #4294967295
 c00101c:	697b      	ldr	r3, [r7, #20]
 c00101e:	fa01 f303 	lsl.w	r3, r1, r3
 c001022:	43d9      	mvns	r1, r3
 c001024:	687b      	ldr	r3, [r7, #4]
 c001026:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 c001028:	4313      	orrs	r3, r2
         );
}
 c00102a:	4618      	mov	r0, r3
 c00102c:	3724      	adds	r7, #36	@ 0x24
 c00102e:	46bd      	mov	sp, r7
 c001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001034:	4770      	bx	lr

0c001036 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 c001036:	b580      	push	{r7, lr}
 c001038:	b082      	sub	sp, #8
 c00103a:	af00      	add	r7, sp, #0
 c00103c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 c00103e:	6878      	ldr	r0, [r7, #4]
 c001040:	f7ff ff6a 	bl	c000f18 <__NVIC_SetPriorityGrouping>
}
 c001044:	bf00      	nop
 c001046:	3708      	adds	r7, #8
 c001048:	46bd      	mov	sp, r7
 c00104a:	bd80      	pop	{r7, pc}

0c00104c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 c00104c:	b580      	push	{r7, lr}
 c00104e:	b086      	sub	sp, #24
 c001050:	af00      	add	r7, sp, #0
 c001052:	4603      	mov	r3, r0
 c001054:	60b9      	str	r1, [r7, #8]
 c001056:	607a      	str	r2, [r7, #4]
 c001058:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 c00105a:	f7ff ff81 	bl	c000f60 <__NVIC_GetPriorityGrouping>
 c00105e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 c001060:	687a      	ldr	r2, [r7, #4]
 c001062:	68b9      	ldr	r1, [r7, #8]
 c001064:	6978      	ldr	r0, [r7, #20]
 c001066:	f7ff ffb3 	bl	c000fd0 <NVIC_EncodePriority>
 c00106a:	4602      	mov	r2, r0
 c00106c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 c001070:	4611      	mov	r1, r2
 c001072:	4618      	mov	r0, r3
 c001074:	f7ff ff82 	bl	c000f7c <__NVIC_SetPriority>
}
 c001078:	bf00      	nop
 c00107a:	3718      	adds	r7, #24
 c00107c:	46bd      	mov	sp, r7
 c00107e:	bd80      	pop	{r7, pc}

0c001080 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 c001080:	b480      	push	{r7}
 c001082:	b083      	sub	sp, #12
 c001084:	af00      	add	r7, sp, #0
 c001086:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 c001088:	687b      	ldr	r3, [r7, #4]
 c00108a:	3b01      	subs	r3, #1
 c00108c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 c001090:	d301      	bcc.n	c001096 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 c001092:	2301      	movs	r3, #1
 c001094:	e00d      	b.n	c0010b2 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 c001096:	4a0a      	ldr	r2, [pc, #40]	@ (c0010c0 <HAL_SYSTICK_Config+0x40>)
 c001098:	687b      	ldr	r3, [r7, #4]
 c00109a:	3b01      	subs	r3, #1
 c00109c:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 c00109e:	4b08      	ldr	r3, [pc, #32]	@ (c0010c0 <HAL_SYSTICK_Config+0x40>)
 c0010a0:	2200      	movs	r2, #0
 c0010a2:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 c0010a4:	4b06      	ldr	r3, [pc, #24]	@ (c0010c0 <HAL_SYSTICK_Config+0x40>)
 c0010a6:	681b      	ldr	r3, [r3, #0]
 c0010a8:	4a05      	ldr	r2, [pc, #20]	@ (c0010c0 <HAL_SYSTICK_Config+0x40>)
 c0010aa:	f043 0303 	orr.w	r3, r3, #3
 c0010ae:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 c0010b0:	2300      	movs	r3, #0
}
 c0010b2:	4618      	mov	r0, r3
 c0010b4:	370c      	adds	r7, #12
 c0010b6:	46bd      	mov	sp, r7
 c0010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0010bc:	4770      	bx	lr
 c0010be:	bf00      	nop
 c0010c0:	e000e010 	.word	0xe000e010

0c0010c4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 c0010c4:	b480      	push	{r7}
 c0010c6:	b083      	sub	sp, #12
 c0010c8:	af00      	add	r7, sp, #0
 c0010ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 c0010cc:	687b      	ldr	r3, [r7, #4]
 c0010ce:	2b04      	cmp	r3, #4
 c0010d0:	d844      	bhi.n	c00115c <HAL_SYSTICK_CLKSourceConfig+0x98>
 c0010d2:	a201      	add	r2, pc, #4	@ (adr r2, c0010d8 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 c0010d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c0010d8:	0c0010fb 	.word	0x0c0010fb
 c0010dc:	0c001119 	.word	0x0c001119
 c0010e0:	0c00113b 	.word	0x0c00113b
 c0010e4:	0c00115d 	.word	0x0c00115d
 c0010e8:	0c0010ed 	.word	0x0c0010ed
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 c0010ec:	4b1f      	ldr	r3, [pc, #124]	@ (c00116c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 c0010ee:	681b      	ldr	r3, [r3, #0]
 c0010f0:	4a1e      	ldr	r2, [pc, #120]	@ (c00116c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 c0010f2:	f043 0304 	orr.w	r3, r3, #4
 c0010f6:	6013      	str	r3, [r2, #0]
      break;
 c0010f8:	e031      	b.n	c00115e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 c0010fa:	4b1c      	ldr	r3, [pc, #112]	@ (c00116c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 c0010fc:	681b      	ldr	r3, [r3, #0]
 c0010fe:	4a1b      	ldr	r2, [pc, #108]	@ (c00116c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 c001100:	f023 0304 	bic.w	r3, r3, #4
 c001104:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 c001106:	4b1a      	ldr	r3, [pc, #104]	@ (c001170 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 c001108:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 c00110c:	4a18      	ldr	r2, [pc, #96]	@ (c001170 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 c00110e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 c001112:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 c001116:	e022      	b.n	c00115e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 c001118:	4b14      	ldr	r3, [pc, #80]	@ (c00116c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 c00111a:	681b      	ldr	r3, [r3, #0]
 c00111c:	4a13      	ldr	r2, [pc, #76]	@ (c00116c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 c00111e:	f023 0304 	bic.w	r3, r3, #4
 c001122:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 c001124:	4b12      	ldr	r3, [pc, #72]	@ (c001170 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 c001126:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 c00112a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 c00112e:	4a10      	ldr	r2, [pc, #64]	@ (c001170 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 c001130:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 c001134:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 c001138:	e011      	b.n	c00115e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 c00113a:	4b0c      	ldr	r3, [pc, #48]	@ (c00116c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 c00113c:	681b      	ldr	r3, [r3, #0]
 c00113e:	4a0b      	ldr	r2, [pc, #44]	@ (c00116c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 c001140:	f023 0304 	bic.w	r3, r3, #4
 c001144:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 c001146:	4b0a      	ldr	r3, [pc, #40]	@ (c001170 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 c001148:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 c00114c:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 c001150:	4a07      	ldr	r2, [pc, #28]	@ (c001170 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 c001152:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 c001156:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 c00115a:	e000      	b.n	c00115e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 c00115c:	bf00      	nop
  }
}
 c00115e:	bf00      	nop
 c001160:	370c      	adds	r7, #12
 c001162:	46bd      	mov	sp, r7
 c001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001168:	4770      	bx	lr
 c00116a:	bf00      	nop
 c00116c:	e000e010 	.word	0xe000e010
 c001170:	56020c00 	.word	0x56020c00

0c001174 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 c001174:	b480      	push	{r7}
 c001176:	b083      	sub	sp, #12
 c001178:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 c00117a:	4b19      	ldr	r3, [pc, #100]	@ (c0011e0 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 c00117c:	681b      	ldr	r3, [r3, #0]
 c00117e:	f003 0304 	and.w	r3, r3, #4
 c001182:	2b00      	cmp	r3, #0
 c001184:	d002      	beq.n	c00118c <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 c001186:	2304      	movs	r3, #4
 c001188:	607b      	str	r3, [r7, #4]
 c00118a:	e021      	b.n	c0011d0 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 c00118c:	4b15      	ldr	r3, [pc, #84]	@ (c0011e4 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 c00118e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 c001192:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 c001196:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 c001198:	683b      	ldr	r3, [r7, #0]
 c00119a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 c00119e:	d011      	beq.n	c0011c4 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 c0011a0:	683b      	ldr	r3, [r7, #0]
 c0011a2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 c0011a6:	d810      	bhi.n	c0011ca <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 c0011a8:	683b      	ldr	r3, [r7, #0]
 c0011aa:	2b00      	cmp	r3, #0
 c0011ac:	d004      	beq.n	c0011b8 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 c0011ae:	683b      	ldr	r3, [r7, #0]
 c0011b0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 c0011b4:	d003      	beq.n	c0011be <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 c0011b6:	e008      	b.n	c0011ca <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 c0011b8:	2300      	movs	r3, #0
 c0011ba:	607b      	str	r3, [r7, #4]
        break;
 c0011bc:	e008      	b.n	c0011d0 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 c0011be:	2301      	movs	r3, #1
 c0011c0:	607b      	str	r3, [r7, #4]
        break;
 c0011c2:	e005      	b.n	c0011d0 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 c0011c4:	2302      	movs	r3, #2
 c0011c6:	607b      	str	r3, [r7, #4]
        break;
 c0011c8:	e002      	b.n	c0011d0 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 c0011ca:	2300      	movs	r3, #0
 c0011cc:	607b      	str	r3, [r7, #4]
        break;
 c0011ce:	bf00      	nop
    }
  }
  return systick_source;
 c0011d0:	687b      	ldr	r3, [r7, #4]
}
 c0011d2:	4618      	mov	r0, r3
 c0011d4:	370c      	adds	r7, #12
 c0011d6:	46bd      	mov	sp, r7
 c0011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0011dc:	4770      	bx	lr
 c0011de:	bf00      	nop
 c0011e0:	e000e010 	.word	0xe000e010
 c0011e4:	56020c00 	.word	0x56020c00

0c0011e8 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 c0011e8:	b480      	push	{r7}
 c0011ea:	b089      	sub	sp, #36	@ 0x24
 c0011ec:	af00      	add	r7, sp, #0
 c0011ee:	6078      	str	r0, [r7, #4]
 c0011f0:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 c0011f2:	2300      	movs	r3, #0
 c0011f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 c0011f6:	687b      	ldr	r3, [r7, #4]
 c0011f8:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 c0011fa:	e1ba      	b.n	c001572 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 c0011fc:	683b      	ldr	r3, [r7, #0]
 c0011fe:	681a      	ldr	r2, [r3, #0]
 c001200:	2101      	movs	r1, #1
 c001202:	697b      	ldr	r3, [r7, #20]
 c001204:	fa01 f303 	lsl.w	r3, r1, r3
 c001208:	4013      	ands	r3, r2
 c00120a:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 c00120c:	697b      	ldr	r3, [r7, #20]
 c00120e:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 c001210:	68fb      	ldr	r3, [r7, #12]
 c001212:	2b00      	cmp	r3, #0
 c001214:	f000 81aa 	beq.w	c00156c <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 c001218:	687b      	ldr	r3, [r7, #4]
 c00121a:	4a55      	ldr	r2, [pc, #340]	@ (c001370 <HAL_GPIO_Init+0x188>)
 c00121c:	4293      	cmp	r3, r2
 c00121e:	d15d      	bne.n	c0012dc <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 c001220:	687b      	ldr	r3, [r7, #4]
 c001222:	681b      	ldr	r3, [r3, #0]
 c001224:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 c001226:	2201      	movs	r2, #1
 c001228:	697b      	ldr	r3, [r7, #20]
 c00122a:	fa02 f303 	lsl.w	r3, r2, r3
 c00122e:	43db      	mvns	r3, r3
 c001230:	69fa      	ldr	r2, [r7, #28]
 c001232:	4013      	ands	r3, r2
 c001234:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 c001236:	683b      	ldr	r3, [r7, #0]
 c001238:	685b      	ldr	r3, [r3, #4]
 c00123a:	f003 0201 	and.w	r2, r3, #1
 c00123e:	697b      	ldr	r3, [r7, #20]
 c001240:	fa02 f303 	lsl.w	r3, r2, r3
 c001244:	69fa      	ldr	r2, [r7, #28]
 c001246:	4313      	orrs	r3, r2
 c001248:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 c00124a:	687b      	ldr	r3, [r7, #4]
 c00124c:	69fa      	ldr	r2, [r7, #28]
 c00124e:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 c001250:	4a48      	ldr	r2, [pc, #288]	@ (c001374 <HAL_GPIO_Init+0x18c>)
 c001252:	697b      	ldr	r3, [r7, #20]
 c001254:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 c001258:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 c00125a:	4a46      	ldr	r2, [pc, #280]	@ (c001374 <HAL_GPIO_Init+0x18c>)
 c00125c:	697b      	ldr	r3, [r7, #20]
 c00125e:	00db      	lsls	r3, r3, #3
 c001260:	4413      	add	r3, r2
 c001262:	685b      	ldr	r3, [r3, #4]
 c001264:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 c001266:	69bb      	ldr	r3, [r7, #24]
 c001268:	08da      	lsrs	r2, r3, #3
 c00126a:	693b      	ldr	r3, [r7, #16]
 c00126c:	3208      	adds	r2, #8
 c00126e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 c001272:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 c001274:	69bb      	ldr	r3, [r7, #24]
 c001276:	f003 0307 	and.w	r3, r3, #7
 c00127a:	009b      	lsls	r3, r3, #2
 c00127c:	220f      	movs	r2, #15
 c00127e:	fa02 f303 	lsl.w	r3, r2, r3
 c001282:	43db      	mvns	r3, r3
 c001284:	69fa      	ldr	r2, [r7, #28]
 c001286:	4013      	ands	r3, r2
 c001288:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 c00128a:	69bb      	ldr	r3, [r7, #24]
 c00128c:	f003 0307 	and.w	r3, r3, #7
 c001290:	009b      	lsls	r3, r3, #2
 c001292:	220b      	movs	r2, #11
 c001294:	fa02 f303 	lsl.w	r3, r2, r3
 c001298:	69fa      	ldr	r2, [r7, #28]
 c00129a:	4313      	orrs	r3, r2
 c00129c:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 c00129e:	69bb      	ldr	r3, [r7, #24]
 c0012a0:	08da      	lsrs	r2, r3, #3
 c0012a2:	693b      	ldr	r3, [r7, #16]
 c0012a4:	3208      	adds	r2, #8
 c0012a6:	69f9      	ldr	r1, [r7, #28]
 c0012a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 c0012ac:	693b      	ldr	r3, [r7, #16]
 c0012ae:	681b      	ldr	r3, [r3, #0]
 c0012b0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 c0012b2:	69bb      	ldr	r3, [r7, #24]
 c0012b4:	005b      	lsls	r3, r3, #1
 c0012b6:	2203      	movs	r2, #3
 c0012b8:	fa02 f303 	lsl.w	r3, r2, r3
 c0012bc:	43db      	mvns	r3, r3
 c0012be:	69fa      	ldr	r2, [r7, #28]
 c0012c0:	4013      	ands	r3, r2
 c0012c2:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 c0012c4:	69bb      	ldr	r3, [r7, #24]
 c0012c6:	005b      	lsls	r3, r3, #1
 c0012c8:	2202      	movs	r2, #2
 c0012ca:	fa02 f303 	lsl.w	r3, r2, r3
 c0012ce:	69fa      	ldr	r2, [r7, #28]
 c0012d0:	4313      	orrs	r3, r2
 c0012d2:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 c0012d4:	693b      	ldr	r3, [r7, #16]
 c0012d6:	69fa      	ldr	r2, [r7, #28]
 c0012d8:	601a      	str	r2, [r3, #0]
 c0012da:	e067      	b.n	c0013ac <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 c0012dc:	683b      	ldr	r3, [r7, #0]
 c0012de:	685b      	ldr	r3, [r3, #4]
 c0012e0:	2b02      	cmp	r3, #2
 c0012e2:	d003      	beq.n	c0012ec <HAL_GPIO_Init+0x104>
 c0012e4:	683b      	ldr	r3, [r7, #0]
 c0012e6:	685b      	ldr	r3, [r3, #4]
 c0012e8:	2b12      	cmp	r3, #18
 c0012ea:	d145      	bne.n	c001378 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 c0012ec:	697b      	ldr	r3, [r7, #20]
 c0012ee:	08da      	lsrs	r2, r3, #3
 c0012f0:	687b      	ldr	r3, [r7, #4]
 c0012f2:	3208      	adds	r2, #8
 c0012f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 c0012f8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 c0012fa:	697b      	ldr	r3, [r7, #20]
 c0012fc:	f003 0307 	and.w	r3, r3, #7
 c001300:	009b      	lsls	r3, r3, #2
 c001302:	220f      	movs	r2, #15
 c001304:	fa02 f303 	lsl.w	r3, r2, r3
 c001308:	43db      	mvns	r3, r3
 c00130a:	69fa      	ldr	r2, [r7, #28]
 c00130c:	4013      	ands	r3, r2
 c00130e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 c001310:	683b      	ldr	r3, [r7, #0]
 c001312:	691b      	ldr	r3, [r3, #16]
 c001314:	f003 020f 	and.w	r2, r3, #15
 c001318:	697b      	ldr	r3, [r7, #20]
 c00131a:	f003 0307 	and.w	r3, r3, #7
 c00131e:	009b      	lsls	r3, r3, #2
 c001320:	fa02 f303 	lsl.w	r3, r2, r3
 c001324:	69fa      	ldr	r2, [r7, #28]
 c001326:	4313      	orrs	r3, r2
 c001328:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 c00132a:	697b      	ldr	r3, [r7, #20]
 c00132c:	08da      	lsrs	r2, r3, #3
 c00132e:	687b      	ldr	r3, [r7, #4]
 c001330:	3208      	adds	r2, #8
 c001332:	69f9      	ldr	r1, [r7, #28]
 c001334:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 c001338:	693b      	ldr	r3, [r7, #16]
 c00133a:	681b      	ldr	r3, [r3, #0]
 c00133c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 c00133e:	69bb      	ldr	r3, [r7, #24]
 c001340:	005b      	lsls	r3, r3, #1
 c001342:	2203      	movs	r2, #3
 c001344:	fa02 f303 	lsl.w	r3, r2, r3
 c001348:	43db      	mvns	r3, r3
 c00134a:	69fa      	ldr	r2, [r7, #28]
 c00134c:	4013      	ands	r3, r2
 c00134e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 c001350:	683b      	ldr	r3, [r7, #0]
 c001352:	685b      	ldr	r3, [r3, #4]
 c001354:	f003 0203 	and.w	r2, r3, #3
 c001358:	69bb      	ldr	r3, [r7, #24]
 c00135a:	005b      	lsls	r3, r3, #1
 c00135c:	fa02 f303 	lsl.w	r3, r2, r3
 c001360:	69fa      	ldr	r2, [r7, #28]
 c001362:	4313      	orrs	r3, r2
 c001364:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 c001366:	693b      	ldr	r3, [r7, #16]
 c001368:	69fa      	ldr	r2, [r7, #28]
 c00136a:	601a      	str	r2, [r3, #0]
 c00136c:	e01e      	b.n	c0013ac <HAL_GPIO_Init+0x1c4>
 c00136e:	bf00      	nop
 c001370:	56020000 	.word	0x56020000
 c001374:	0c001e10 	.word	0x0c001e10
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 c001378:	693b      	ldr	r3, [r7, #16]
 c00137a:	681b      	ldr	r3, [r3, #0]
 c00137c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 c00137e:	69bb      	ldr	r3, [r7, #24]
 c001380:	005b      	lsls	r3, r3, #1
 c001382:	2203      	movs	r2, #3
 c001384:	fa02 f303 	lsl.w	r3, r2, r3
 c001388:	43db      	mvns	r3, r3
 c00138a:	69fa      	ldr	r2, [r7, #28]
 c00138c:	4013      	ands	r3, r2
 c00138e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 c001390:	683b      	ldr	r3, [r7, #0]
 c001392:	685b      	ldr	r3, [r3, #4]
 c001394:	f003 0203 	and.w	r2, r3, #3
 c001398:	69bb      	ldr	r3, [r7, #24]
 c00139a:	005b      	lsls	r3, r3, #1
 c00139c:	fa02 f303 	lsl.w	r3, r2, r3
 c0013a0:	69fa      	ldr	r2, [r7, #28]
 c0013a2:	4313      	orrs	r3, r2
 c0013a4:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 c0013a6:	693b      	ldr	r3, [r7, #16]
 c0013a8:	69fa      	ldr	r2, [r7, #28]
 c0013aa:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 c0013ac:	683b      	ldr	r3, [r7, #0]
 c0013ae:	685b      	ldr	r3, [r3, #4]
 c0013b0:	2b01      	cmp	r3, #1
 c0013b2:	d00b      	beq.n	c0013cc <HAL_GPIO_Init+0x1e4>
 c0013b4:	683b      	ldr	r3, [r7, #0]
 c0013b6:	685b      	ldr	r3, [r3, #4]
 c0013b8:	2b02      	cmp	r3, #2
 c0013ba:	d007      	beq.n	c0013cc <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 c0013bc:	683b      	ldr	r3, [r7, #0]
 c0013be:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 c0013c0:	2b11      	cmp	r3, #17
 c0013c2:	d003      	beq.n	c0013cc <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 c0013c4:	683b      	ldr	r3, [r7, #0]
 c0013c6:	685b      	ldr	r3, [r3, #4]
 c0013c8:	2b12      	cmp	r3, #18
 c0013ca:	d130      	bne.n	c00142e <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 c0013cc:	693b      	ldr	r3, [r7, #16]
 c0013ce:	689b      	ldr	r3, [r3, #8]
 c0013d0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 c0013d2:	69bb      	ldr	r3, [r7, #24]
 c0013d4:	005b      	lsls	r3, r3, #1
 c0013d6:	2203      	movs	r2, #3
 c0013d8:	fa02 f303 	lsl.w	r3, r2, r3
 c0013dc:	43db      	mvns	r3, r3
 c0013de:	69fa      	ldr	r2, [r7, #28]
 c0013e0:	4013      	ands	r3, r2
 c0013e2:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 c0013e4:	683b      	ldr	r3, [r7, #0]
 c0013e6:	68da      	ldr	r2, [r3, #12]
 c0013e8:	69bb      	ldr	r3, [r7, #24]
 c0013ea:	005b      	lsls	r3, r3, #1
 c0013ec:	fa02 f303 	lsl.w	r3, r2, r3
 c0013f0:	69fa      	ldr	r2, [r7, #28]
 c0013f2:	4313      	orrs	r3, r2
 c0013f4:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 c0013f6:	693b      	ldr	r3, [r7, #16]
 c0013f8:	69fa      	ldr	r2, [r7, #28]
 c0013fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 c0013fc:	693b      	ldr	r3, [r7, #16]
 c0013fe:	685b      	ldr	r3, [r3, #4]
 c001400:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 c001402:	2201      	movs	r2, #1
 c001404:	69bb      	ldr	r3, [r7, #24]
 c001406:	fa02 f303 	lsl.w	r3, r2, r3
 c00140a:	43db      	mvns	r3, r3
 c00140c:	69fa      	ldr	r2, [r7, #28]
 c00140e:	4013      	ands	r3, r2
 c001410:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 c001412:	683b      	ldr	r3, [r7, #0]
 c001414:	685b      	ldr	r3, [r3, #4]
 c001416:	091b      	lsrs	r3, r3, #4
 c001418:	f003 0201 	and.w	r2, r3, #1
 c00141c:	69bb      	ldr	r3, [r7, #24]
 c00141e:	fa02 f303 	lsl.w	r3, r2, r3
 c001422:	69fa      	ldr	r2, [r7, #28]
 c001424:	4313      	orrs	r3, r2
 c001426:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 c001428:	693b      	ldr	r3, [r7, #16]
 c00142a:	69fa      	ldr	r2, [r7, #28]
 c00142c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 c00142e:	683b      	ldr	r3, [r7, #0]
 c001430:	685b      	ldr	r3, [r3, #4]
 c001432:	2b03      	cmp	r3, #3
 c001434:	d017      	beq.n	c001466 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 c001436:	693b      	ldr	r3, [r7, #16]
 c001438:	68db      	ldr	r3, [r3, #12]
 c00143a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 c00143c:	69bb      	ldr	r3, [r7, #24]
 c00143e:	005b      	lsls	r3, r3, #1
 c001440:	2203      	movs	r2, #3
 c001442:	fa02 f303 	lsl.w	r3, r2, r3
 c001446:	43db      	mvns	r3, r3
 c001448:	69fa      	ldr	r2, [r7, #28]
 c00144a:	4013      	ands	r3, r2
 c00144c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 c00144e:	683b      	ldr	r3, [r7, #0]
 c001450:	689a      	ldr	r2, [r3, #8]
 c001452:	69bb      	ldr	r3, [r7, #24]
 c001454:	005b      	lsls	r3, r3, #1
 c001456:	fa02 f303 	lsl.w	r3, r2, r3
 c00145a:	69fa      	ldr	r2, [r7, #28]
 c00145c:	4313      	orrs	r3, r2
 c00145e:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 c001460:	693b      	ldr	r3, [r7, #16]
 c001462:	69fa      	ldr	r2, [r7, #28]
 c001464:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 c001466:	683b      	ldr	r3, [r7, #0]
 c001468:	685b      	ldr	r3, [r3, #4]
 c00146a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 c00146e:	2b00      	cmp	r3, #0
 c001470:	d07c      	beq.n	c00156c <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 c001472:	4a47      	ldr	r2, [pc, #284]	@ (c001590 <HAL_GPIO_Init+0x3a8>)
 c001474:	697b      	ldr	r3, [r7, #20]
 c001476:	089b      	lsrs	r3, r3, #2
 c001478:	3318      	adds	r3, #24
 c00147a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c00147e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 c001480:	697b      	ldr	r3, [r7, #20]
 c001482:	f003 0303 	and.w	r3, r3, #3
 c001486:	00db      	lsls	r3, r3, #3
 c001488:	220f      	movs	r2, #15
 c00148a:	fa02 f303 	lsl.w	r3, r2, r3
 c00148e:	43db      	mvns	r3, r3
 c001490:	69fa      	ldr	r2, [r7, #28]
 c001492:	4013      	ands	r3, r2
 c001494:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 c001496:	687b      	ldr	r3, [r7, #4]
 c001498:	0a9a      	lsrs	r2, r3, #10
 c00149a:	4b3e      	ldr	r3, [pc, #248]	@ (c001594 <HAL_GPIO_Init+0x3ac>)
 c00149c:	4013      	ands	r3, r2
 c00149e:	697a      	ldr	r2, [r7, #20]
 c0014a0:	f002 0203 	and.w	r2, r2, #3
 c0014a4:	00d2      	lsls	r2, r2, #3
 c0014a6:	4093      	lsls	r3, r2
 c0014a8:	69fa      	ldr	r2, [r7, #28]
 c0014aa:	4313      	orrs	r3, r2
 c0014ac:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 c0014ae:	4938      	ldr	r1, [pc, #224]	@ (c001590 <HAL_GPIO_Init+0x3a8>)
 c0014b0:	697b      	ldr	r3, [r7, #20]
 c0014b2:	089b      	lsrs	r3, r3, #2
 c0014b4:	3318      	adds	r3, #24
 c0014b6:	69fa      	ldr	r2, [r7, #28]
 c0014b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 c0014bc:	4b34      	ldr	r3, [pc, #208]	@ (c001590 <HAL_GPIO_Init+0x3a8>)
 c0014be:	681b      	ldr	r3, [r3, #0]
 c0014c0:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 c0014c2:	68fb      	ldr	r3, [r7, #12]
 c0014c4:	43db      	mvns	r3, r3
 c0014c6:	69fa      	ldr	r2, [r7, #28]
 c0014c8:	4013      	ands	r3, r2
 c0014ca:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 c0014cc:	683b      	ldr	r3, [r7, #0]
 c0014ce:	685b      	ldr	r3, [r3, #4]
 c0014d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 c0014d4:	2b00      	cmp	r3, #0
 c0014d6:	d003      	beq.n	c0014e0 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 c0014d8:	69fa      	ldr	r2, [r7, #28]
 c0014da:	68fb      	ldr	r3, [r7, #12]
 c0014dc:	4313      	orrs	r3, r2
 c0014de:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 c0014e0:	4a2b      	ldr	r2, [pc, #172]	@ (c001590 <HAL_GPIO_Init+0x3a8>)
 c0014e2:	69fb      	ldr	r3, [r7, #28]
 c0014e4:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 c0014e6:	4b2a      	ldr	r3, [pc, #168]	@ (c001590 <HAL_GPIO_Init+0x3a8>)
 c0014e8:	685b      	ldr	r3, [r3, #4]
 c0014ea:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 c0014ec:	68fb      	ldr	r3, [r7, #12]
 c0014ee:	43db      	mvns	r3, r3
 c0014f0:	69fa      	ldr	r2, [r7, #28]
 c0014f2:	4013      	ands	r3, r2
 c0014f4:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 c0014f6:	683b      	ldr	r3, [r7, #0]
 c0014f8:	685b      	ldr	r3, [r3, #4]
 c0014fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 c0014fe:	2b00      	cmp	r3, #0
 c001500:	d003      	beq.n	c00150a <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 c001502:	69fa      	ldr	r2, [r7, #28]
 c001504:	68fb      	ldr	r3, [r7, #12]
 c001506:	4313      	orrs	r3, r2
 c001508:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 c00150a:	4a21      	ldr	r2, [pc, #132]	@ (c001590 <HAL_GPIO_Init+0x3a8>)
 c00150c:	69fb      	ldr	r3, [r7, #28]
 c00150e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 c001510:	4b1f      	ldr	r3, [pc, #124]	@ (c001590 <HAL_GPIO_Init+0x3a8>)
 c001512:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 c001516:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 c001518:	68fb      	ldr	r3, [r7, #12]
 c00151a:	43db      	mvns	r3, r3
 c00151c:	69fa      	ldr	r2, [r7, #28]
 c00151e:	4013      	ands	r3, r2
 c001520:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 c001522:	683b      	ldr	r3, [r7, #0]
 c001524:	685b      	ldr	r3, [r3, #4]
 c001526:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 c00152a:	2b00      	cmp	r3, #0
 c00152c:	d003      	beq.n	c001536 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 c00152e:	69fa      	ldr	r2, [r7, #28]
 c001530:	68fb      	ldr	r3, [r7, #12]
 c001532:	4313      	orrs	r3, r2
 c001534:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 c001536:	4a16      	ldr	r2, [pc, #88]	@ (c001590 <HAL_GPIO_Init+0x3a8>)
 c001538:	69fb      	ldr	r3, [r7, #28]
 c00153a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 c00153e:	4b14      	ldr	r3, [pc, #80]	@ (c001590 <HAL_GPIO_Init+0x3a8>)
 c001540:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 c001544:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 c001546:	68fb      	ldr	r3, [r7, #12]
 c001548:	43db      	mvns	r3, r3
 c00154a:	69fa      	ldr	r2, [r7, #28]
 c00154c:	4013      	ands	r3, r2
 c00154e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 c001550:	683b      	ldr	r3, [r7, #0]
 c001552:	685b      	ldr	r3, [r3, #4]
 c001554:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 c001558:	2b00      	cmp	r3, #0
 c00155a:	d003      	beq.n	c001564 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 c00155c:	69fa      	ldr	r2, [r7, #28]
 c00155e:	68fb      	ldr	r3, [r7, #12]
 c001560:	4313      	orrs	r3, r2
 c001562:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 c001564:	4a0a      	ldr	r2, [pc, #40]	@ (c001590 <HAL_GPIO_Init+0x3a8>)
 c001566:	69fb      	ldr	r3, [r7, #28]
 c001568:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 c00156c:	697b      	ldr	r3, [r7, #20]
 c00156e:	3301      	adds	r3, #1
 c001570:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 c001572:	683b      	ldr	r3, [r7, #0]
 c001574:	681a      	ldr	r2, [r3, #0]
 c001576:	697b      	ldr	r3, [r7, #20]
 c001578:	fa22 f303 	lsr.w	r3, r2, r3
 c00157c:	2b00      	cmp	r3, #0
 c00157e:	f47f ae3d 	bne.w	c0011fc <HAL_GPIO_Init+0x14>
  }
}
 c001582:	bf00      	nop
 c001584:	bf00      	nop
 c001586:	3724      	adds	r7, #36	@ 0x24
 c001588:	46bd      	mov	sp, r7
 c00158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00158e:	4770      	bx	lr
 c001590:	56022000 	.word	0x56022000
 c001594:	002b7f7f 	.word	0x002b7f7f

0c001598 <HAL_GTZC_TZSC_ConfigPeriphAttributes>:
  * @param  PeriphAttributes Peripheral attributes, see @ref GTZC_TZSC_PeriphAttributes.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_GTZC_TZSC_ConfigPeriphAttributes(uint32_t PeriphId,
                                                       uint32_t PeriphAttributes)
{
 c001598:	b480      	push	{r7}
 c00159a:	b085      	sub	sp, #20
 c00159c:	af00      	add	r7, sp, #0
 c00159e:	6078      	str	r0, [r7, #4]
 c0015a0:	6039      	str	r1, [r7, #0]
  uint32_t register_address;

  /* check entry parameters */
  if ((PeriphAttributes > (GTZC_TZSC_PERIPH_SEC | GTZC_TZSC_PERIPH_PRIV))
 c0015a2:	683b      	ldr	r3, [r7, #0]
 c0015a4:	f5b3 7f41 	cmp.w	r3, #772	@ 0x304
 c0015a8:	d234      	bcs.n	c001614 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x7c>
      || (HAL_GTZC_TZSC_GET_ARRAY_INDEX(PeriphId) >= GTZC_TZSC_PERIPH_NUMBER)
 c0015aa:	687b      	ldr	r3, [r7, #4]
 c0015ac:	0f1b      	lsrs	r3, r3, #28
  if ((PeriphAttributes > (GTZC_TZSC_PERIPH_SEC | GTZC_TZSC_PERIPH_PRIV))
 c0015ae:	2b03      	cmp	r3, #3
 c0015b0:	d809      	bhi.n	c0015c6 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2e>
      || (HAL_GTZC_TZSC_GET_ARRAY_INDEX(PeriphId) >= GTZC_TZSC_PERIPH_NUMBER)
 c0015b2:	687b      	ldr	r3, [r7, #4]
 c0015b4:	0f1b      	lsrs	r3, r3, #28
 c0015b6:	015a      	lsls	r2, r3, #5
 c0015b8:	687b      	ldr	r3, [r7, #4]
 c0015ba:	f003 031f 	and.w	r3, r3, #31
 c0015be:	4413      	add	r3, r2
 c0015c0:	2b6c      	cmp	r3, #108	@ 0x6c
 c0015c2:	d827      	bhi.n	c001614 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x7c>
 c0015c4:	e009      	b.n	c0015da <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x42>
 c0015c6:	687b      	ldr	r3, [r7, #4]
 c0015c8:	0f1b      	lsrs	r3, r3, #28
 c0015ca:	3b01      	subs	r3, #1
 c0015cc:	015a      	lsls	r2, r3, #5
 c0015ce:	687b      	ldr	r3, [r7, #4]
 c0015d0:	f003 031f 	and.w	r3, r3, #31
 c0015d4:	4413      	add	r3, r2
 c0015d6:	2b6c      	cmp	r3, #108	@ 0x6c
 c0015d8:	d81c      	bhi.n	c001614 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x7c>
      || (((PeriphId & GTZC_PERIPH_ALL) != 0U)
 c0015da:	687b      	ldr	r3, [r7, #4]
 c0015dc:	f003 0320 	and.w	r3, r3, #32
 c0015e0:	2b00      	cmp	r3, #0
 c0015e2:	d019      	beq.n	c001618 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x80>
          && (HAL_GTZC_TZSC_GET_ARRAY_INDEX(PeriphId) != 0U)))
 c0015e4:	687b      	ldr	r3, [r7, #4]
 c0015e6:	0f1b      	lsrs	r3, r3, #28
  if ((PeriphAttributes > (GTZC_TZSC_PERIPH_SEC | GTZC_TZSC_PERIPH_PRIV))
 c0015e8:	2b03      	cmp	r3, #3
 c0015ea:	d809      	bhi.n	c001600 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x68>
          && (HAL_GTZC_TZSC_GET_ARRAY_INDEX(PeriphId) != 0U)))
 c0015ec:	687b      	ldr	r3, [r7, #4]
 c0015ee:	0f1b      	lsrs	r3, r3, #28
 c0015f0:	015a      	lsls	r2, r3, #5
 c0015f2:	687b      	ldr	r3, [r7, #4]
 c0015f4:	f003 031f 	and.w	r3, r3, #31
 c0015f8:	4413      	add	r3, r2
 c0015fa:	2b00      	cmp	r3, #0
 c0015fc:	d10a      	bne.n	c001614 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x7c>
 c0015fe:	e00b      	b.n	c001618 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x80>
 c001600:	687b      	ldr	r3, [r7, #4]
 c001602:	0f1b      	lsrs	r3, r3, #28
 c001604:	3b01      	subs	r3, #1
 c001606:	015a      	lsls	r2, r3, #5
 c001608:	687b      	ldr	r3, [r7, #4]
 c00160a:	f003 031f 	and.w	r3, r3, #31
 c00160e:	4413      	add	r3, r2
 c001610:	2b00      	cmp	r3, #0
 c001612:	d001      	beq.n	c001618 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x80>
  {
    return HAL_ERROR;
 c001614:	2301      	movs	r3, #1
 c001616:	e116      	b.n	c001846 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2ae>
  }

  if ((PeriphId & GTZC_PERIPH_ALL) != 0U)
 c001618:	687b      	ldr	r3, [r7, #4]
 c00161a:	f003 0320 	and.w	r3, r3, #32
 c00161e:	2b00      	cmp	r3, #0
 c001620:	f000 8096 	beq.w	c001750 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1b8>
  {
    /* special case where same attributes are applied to all peripherals */

#if defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
    /* secure configuration */
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_SEC) == GTZC_TZSC_PERIPH_SEC)
 c001624:	683a      	ldr	r2, [r7, #0]
 c001626:	f240 1301 	movw	r3, #257	@ 0x101
 c00162a:	4013      	ands	r3, r2
 c00162c:	f240 1201 	movw	r2, #257	@ 0x101
 c001630:	4293      	cmp	r3, r2
 c001632:	d120      	bne.n	c001676 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0xde>
    {
      SET_BIT(GTZC_TZSC1->SECCFGR1, TZSC1_SECCFGR1_ALL);
 c001634:	4b87      	ldr	r3, [pc, #540]	@ (c001854 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c001636:	691b      	ldr	r3, [r3, #16]
 c001638:	4a86      	ldr	r2, [pc, #536]	@ (c001854 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c00163a:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 c00163e:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 c001642:	6113      	str	r3, [r2, #16]
      SET_BIT(GTZC_TZSC1->SECCFGR2, TZSC1_SECCFGR2_ALL);
 c001644:	4b83      	ldr	r3, [pc, #524]	@ (c001854 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c001646:	695b      	ldr	r3, [r3, #20]
 c001648:	4a82      	ldr	r2, [pc, #520]	@ (c001854 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c00164a:	ea6f 2353 	mvn.w	r3, r3, lsr #9
 c00164e:	ea6f 2343 	mvn.w	r3, r3, lsl #9
 c001652:	6153      	str	r3, [r2, #20]
      SET_BIT(GTZC_TZSC1->SECCFGR3, TZSC1_SECCFGR3_ALL);
 c001654:	4b7f      	ldr	r3, [pc, #508]	@ (c001854 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c001656:	699b      	ldr	r3, [r3, #24]
 c001658:	4a7e      	ldr	r2, [pc, #504]	@ (c001854 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c00165a:	ea6f 53d3 	mvn.w	r3, r3, lsr #23
 c00165e:	ea6f 53c3 	mvn.w	r3, r3, lsl #23
 c001662:	6193      	str	r3, [r2, #24]
      SET_BIT(GTZC_TZSC2->SECCFGR1, TZSC2_SECCFGR1_ALL);
 c001664:	4b7c      	ldr	r3, [pc, #496]	@ (c001858 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2c0>)
 c001666:	691b      	ldr	r3, [r3, #16]
 c001668:	4a7b      	ldr	r2, [pc, #492]	@ (c001858 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2c0>)
 c00166a:	f443 53df 	orr.w	r3, r3, #7136	@ 0x1be0
 c00166e:	f043 031f 	orr.w	r3, r3, #31
 c001672:	6113      	str	r3, [r2, #16]
 c001674:	e020      	b.n	c0016b8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x120>
    }
    else if ((PeriphAttributes & GTZC_TZSC_PERIPH_NSEC) == GTZC_TZSC_PERIPH_NSEC)
 c001676:	683b      	ldr	r3, [r7, #0]
 c001678:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 c00167c:	2b00      	cmp	r3, #0
 c00167e:	d01b      	beq.n	c0016b8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x120>
    {
      CLEAR_BIT(GTZC_TZSC1->SECCFGR1, TZSC1_SECCFGR1_ALL);
 c001680:	4b74      	ldr	r3, [pc, #464]	@ (c001854 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c001682:	691b      	ldr	r3, [r3, #16]
 c001684:	4a73      	ldr	r2, [pc, #460]	@ (c001854 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c001686:	0d1b      	lsrs	r3, r3, #20
 c001688:	051b      	lsls	r3, r3, #20
 c00168a:	6113      	str	r3, [r2, #16]
      CLEAR_BIT(GTZC_TZSC1->SECCFGR2, TZSC1_SECCFGR2_ALL);
 c00168c:	4b71      	ldr	r3, [pc, #452]	@ (c001854 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c00168e:	695b      	ldr	r3, [r3, #20]
 c001690:	4a70      	ldr	r2, [pc, #448]	@ (c001854 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c001692:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 c001696:	f023 0301 	bic.w	r3, r3, #1
 c00169a:	6153      	str	r3, [r2, #20]
      CLEAR_BIT(GTZC_TZSC1->SECCFGR3, TZSC1_SECCFGR3_ALL);
 c00169c:	4b6d      	ldr	r3, [pc, #436]	@ (c001854 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c00169e:	699b      	ldr	r3, [r3, #24]
 c0016a0:	4a6c      	ldr	r2, [pc, #432]	@ (c001854 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c0016a2:	0ddb      	lsrs	r3, r3, #23
 c0016a4:	05db      	lsls	r3, r3, #23
 c0016a6:	6193      	str	r3, [r2, #24]
      CLEAR_BIT(GTZC_TZSC2->SECCFGR1, TZSC2_SECCFGR1_ALL);
 c0016a8:	4b6b      	ldr	r3, [pc, #428]	@ (c001858 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2c0>)
 c0016aa:	691b      	ldr	r3, [r3, #16]
 c0016ac:	4a6a      	ldr	r2, [pc, #424]	@ (c001858 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2c0>)
 c0016ae:	f423 53df 	bic.w	r3, r3, #7136	@ 0x1be0
 c0016b2:	f023 031f 	bic.w	r3, r3, #31
 c0016b6:	6113      	str	r3, [r2, #16]
      /* do nothing */
    }
#endif /* defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

    /* privilege configuration */
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_PRIV) == GTZC_TZSC_PERIPH_PRIV)
 c0016b8:	683a      	ldr	r2, [r7, #0]
 c0016ba:	f240 2302 	movw	r3, #514	@ 0x202
 c0016be:	4013      	ands	r3, r2
 c0016c0:	f240 2202 	movw	r2, #514	@ 0x202
 c0016c4:	4293      	cmp	r3, r2
 c0016c6:	d120      	bne.n	c00170a <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x172>
    {
      SET_BIT(GTZC_TZSC1->PRIVCFGR1, TZSC1_PRIVCFGR1_ALL);
 c0016c8:	4b62      	ldr	r3, [pc, #392]	@ (c001854 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c0016ca:	6a1b      	ldr	r3, [r3, #32]
 c0016cc:	4a61      	ldr	r2, [pc, #388]	@ (c001854 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c0016ce:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 c0016d2:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 c0016d6:	6213      	str	r3, [r2, #32]
      SET_BIT(GTZC_TZSC1->PRIVCFGR2, TZSC1_PRIVCFGR2_ALL);
 c0016d8:	4b5e      	ldr	r3, [pc, #376]	@ (c001854 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c0016da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c0016dc:	4a5d      	ldr	r2, [pc, #372]	@ (c001854 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c0016de:	ea6f 2353 	mvn.w	r3, r3, lsr #9
 c0016e2:	ea6f 2343 	mvn.w	r3, r3, lsl #9
 c0016e6:	6253      	str	r3, [r2, #36]	@ 0x24
      SET_BIT(GTZC_TZSC1->PRIVCFGR3, TZSC1_PRIVCFGR3_ALL);
 c0016e8:	4b5a      	ldr	r3, [pc, #360]	@ (c001854 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c0016ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c0016ec:	4a59      	ldr	r2, [pc, #356]	@ (c001854 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c0016ee:	ea6f 53d3 	mvn.w	r3, r3, lsr #23
 c0016f2:	ea6f 53c3 	mvn.w	r3, r3, lsl #23
 c0016f6:	6293      	str	r3, [r2, #40]	@ 0x28
      SET_BIT(GTZC_TZSC2->PRIVCFGR1, TZSC2_PRIVCFGR1_ALL);
 c0016f8:	4b57      	ldr	r3, [pc, #348]	@ (c001858 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2c0>)
 c0016fa:	6a1b      	ldr	r3, [r3, #32]
 c0016fc:	4a56      	ldr	r2, [pc, #344]	@ (c001858 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2c0>)
 c0016fe:	f443 53df 	orr.w	r3, r3, #7136	@ 0x1be0
 c001702:	f043 031f 	orr.w	r3, r3, #31
 c001706:	6213      	str	r3, [r2, #32]
 c001708:	e09c      	b.n	c001844 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2ac>
    }
    else if ((PeriphAttributes & GTZC_TZSC_PERIPH_NPRIV) == GTZC_TZSC_PERIPH_NPRIV)
 c00170a:	683b      	ldr	r3, [r7, #0]
 c00170c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 c001710:	2b00      	cmp	r3, #0
 c001712:	f000 8097 	beq.w	c001844 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2ac>
    {
      CLEAR_BIT(GTZC_TZSC1->PRIVCFGR1, TZSC1_PRIVCFGR1_ALL);
 c001716:	4b4f      	ldr	r3, [pc, #316]	@ (c001854 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c001718:	6a1b      	ldr	r3, [r3, #32]
 c00171a:	4a4e      	ldr	r2, [pc, #312]	@ (c001854 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c00171c:	0d1b      	lsrs	r3, r3, #20
 c00171e:	051b      	lsls	r3, r3, #20
 c001720:	6213      	str	r3, [r2, #32]
      CLEAR_BIT(GTZC_TZSC1->PRIVCFGR2, TZSC1_PRIVCFGR2_ALL);
 c001722:	4b4c      	ldr	r3, [pc, #304]	@ (c001854 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c001724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c001726:	4a4b      	ldr	r2, [pc, #300]	@ (c001854 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c001728:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 c00172c:	f023 0301 	bic.w	r3, r3, #1
 c001730:	6253      	str	r3, [r2, #36]	@ 0x24
      CLEAR_BIT(GTZC_TZSC1->PRIVCFGR3, TZSC1_PRIVCFGR3_ALL);
 c001732:	4b48      	ldr	r3, [pc, #288]	@ (c001854 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c001734:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c001736:	4a47      	ldr	r2, [pc, #284]	@ (c001854 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c001738:	0ddb      	lsrs	r3, r3, #23
 c00173a:	05db      	lsls	r3, r3, #23
 c00173c:	6293      	str	r3, [r2, #40]	@ 0x28
      CLEAR_BIT(GTZC_TZSC2->PRIVCFGR1, TZSC2_PRIVCFGR1_ALL);
 c00173e:	4b46      	ldr	r3, [pc, #280]	@ (c001858 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2c0>)
 c001740:	6a1b      	ldr	r3, [r3, #32]
 c001742:	4a45      	ldr	r2, [pc, #276]	@ (c001858 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2c0>)
 c001744:	f423 53df 	bic.w	r3, r3, #7136	@ 0x1be0
 c001748:	f023 031f 	bic.w	r3, r3, #31
 c00174c:	6213      	str	r3, [r2, #32]
 c00174e:	e079      	b.n	c001844 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2ac>
  {
    /* common case where only one peripheral is configured */

#if defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
    /* secure configuration */
    register_address = (uint32_t) &(HAL_GTZC_TZSC_GET_INSTANCE(PeriphId)->SECCFGR1)
 c001750:	687b      	ldr	r3, [r7, #4]
 c001752:	0f1b      	lsrs	r3, r3, #28
 c001754:	2b03      	cmp	r3, #3
 c001756:	d801      	bhi.n	c00175c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1c4>
 c001758:	4b3e      	ldr	r3, [pc, #248]	@ (c001854 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c00175a:	e000      	b.n	c00175e <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1c6>
 c00175c:	4b3e      	ldr	r3, [pc, #248]	@ (c001858 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2c0>)
 c00175e:	3310      	adds	r3, #16
 c001760:	461a      	mov	r2, r3
                       + (4U * GTZC_GET_REG_INDEX_IN_INSTANCE(PeriphId));
 c001762:	687b      	ldr	r3, [r7, #4]
 c001764:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 c001768:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 c00176c:	d803      	bhi.n	c001776 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1de>
 c00176e:	687b      	ldr	r3, [r7, #4]
 c001770:	0f1b      	lsrs	r3, r3, #28
 c001772:	009b      	lsls	r3, r3, #2
 c001774:	e003      	b.n	c00177e <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1e6>
 c001776:	687b      	ldr	r3, [r7, #4]
 c001778:	0f1b      	lsrs	r3, r3, #28
 c00177a:	3b04      	subs	r3, #4
 c00177c:	009b      	lsls	r3, r3, #2
    register_address = (uint32_t) &(HAL_GTZC_TZSC_GET_INSTANCE(PeriphId)->SECCFGR1)
 c00177e:	4413      	add	r3, r2
 c001780:	60fb      	str	r3, [r7, #12]
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_SEC) == GTZC_TZSC_PERIPH_SEC)
 c001782:	683a      	ldr	r2, [r7, #0]
 c001784:	f240 1301 	movw	r3, #257	@ 0x101
 c001788:	4013      	ands	r3, r2
 c00178a:	f240 1201 	movw	r2, #257	@ 0x101
 c00178e:	4293      	cmp	r3, r2
 c001790:	d10a      	bne.n	c0017a8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x210>
    {
      SET_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c001792:	68fb      	ldr	r3, [r7, #12]
 c001794:	6819      	ldr	r1, [r3, #0]
 c001796:	687b      	ldr	r3, [r7, #4]
 c001798:	f003 031f 	and.w	r3, r3, #31
 c00179c:	2201      	movs	r2, #1
 c00179e:	409a      	lsls	r2, r3
 c0017a0:	68fb      	ldr	r3, [r7, #12]
 c0017a2:	430a      	orrs	r2, r1
 c0017a4:	601a      	str	r2, [r3, #0]
 c0017a6:	e010      	b.n	c0017ca <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x232>
    }
    else if ((PeriphAttributes & GTZC_TZSC_PERIPH_NSEC) == GTZC_TZSC_PERIPH_NSEC)
 c0017a8:	683b      	ldr	r3, [r7, #0]
 c0017aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 c0017ae:	2b00      	cmp	r3, #0
 c0017b0:	d00b      	beq.n	c0017ca <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x232>
    {
      CLEAR_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c0017b2:	68fb      	ldr	r3, [r7, #12]
 c0017b4:	6819      	ldr	r1, [r3, #0]
 c0017b6:	687b      	ldr	r3, [r7, #4]
 c0017b8:	f003 031f 	and.w	r3, r3, #31
 c0017bc:	2201      	movs	r2, #1
 c0017be:	fa02 f303 	lsl.w	r3, r2, r3
 c0017c2:	43da      	mvns	r2, r3
 c0017c4:	68fb      	ldr	r3, [r7, #12]
 c0017c6:	400a      	ands	r2, r1
 c0017c8:	601a      	str	r2, [r3, #0]
      /* do nothing */
    }
#endif /* defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

    /* privilege configuration */
    register_address = (uint32_t) &(HAL_GTZC_TZSC_GET_INSTANCE(PeriphId)->PRIVCFGR1)
 c0017ca:	687b      	ldr	r3, [r7, #4]
 c0017cc:	0f1b      	lsrs	r3, r3, #28
 c0017ce:	2b03      	cmp	r3, #3
 c0017d0:	d801      	bhi.n	c0017d6 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x23e>
 c0017d2:	4b20      	ldr	r3, [pc, #128]	@ (c001854 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c0017d4:	e000      	b.n	c0017d8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x240>
 c0017d6:	4b20      	ldr	r3, [pc, #128]	@ (c001858 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2c0>)
 c0017d8:	3320      	adds	r3, #32
 c0017da:	461a      	mov	r2, r3
                       + (4U * GTZC_GET_REG_INDEX_IN_INSTANCE(PeriphId));
 c0017dc:	687b      	ldr	r3, [r7, #4]
 c0017de:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 c0017e2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 c0017e6:	d803      	bhi.n	c0017f0 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x258>
 c0017e8:	687b      	ldr	r3, [r7, #4]
 c0017ea:	0f1b      	lsrs	r3, r3, #28
 c0017ec:	009b      	lsls	r3, r3, #2
 c0017ee:	e003      	b.n	c0017f8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x260>
 c0017f0:	687b      	ldr	r3, [r7, #4]
 c0017f2:	0f1b      	lsrs	r3, r3, #28
 c0017f4:	3b04      	subs	r3, #4
 c0017f6:	009b      	lsls	r3, r3, #2
    register_address = (uint32_t) &(HAL_GTZC_TZSC_GET_INSTANCE(PeriphId)->PRIVCFGR1)
 c0017f8:	4413      	add	r3, r2
 c0017fa:	60fb      	str	r3, [r7, #12]
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_PRIV) == GTZC_TZSC_PERIPH_PRIV)
 c0017fc:	683a      	ldr	r2, [r7, #0]
 c0017fe:	f240 2302 	movw	r3, #514	@ 0x202
 c001802:	4013      	ands	r3, r2
 c001804:	f240 2202 	movw	r2, #514	@ 0x202
 c001808:	4293      	cmp	r3, r2
 c00180a:	d10a      	bne.n	c001822 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x28a>
    {
      SET_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c00180c:	68fb      	ldr	r3, [r7, #12]
 c00180e:	6819      	ldr	r1, [r3, #0]
 c001810:	687b      	ldr	r3, [r7, #4]
 c001812:	f003 031f 	and.w	r3, r3, #31
 c001816:	2201      	movs	r2, #1
 c001818:	409a      	lsls	r2, r3
 c00181a:	68fb      	ldr	r3, [r7, #12]
 c00181c:	430a      	orrs	r2, r1
 c00181e:	601a      	str	r2, [r3, #0]
 c001820:	e010      	b.n	c001844 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2ac>
    }
    else if ((PeriphAttributes & GTZC_TZSC_PERIPH_NPRIV) == GTZC_TZSC_PERIPH_NPRIV)
 c001822:	683b      	ldr	r3, [r7, #0]
 c001824:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 c001828:	2b00      	cmp	r3, #0
 c00182a:	d00b      	beq.n	c001844 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2ac>
    {
      CLEAR_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c00182c:	68fb      	ldr	r3, [r7, #12]
 c00182e:	6819      	ldr	r1, [r3, #0]
 c001830:	687b      	ldr	r3, [r7, #4]
 c001832:	f003 031f 	and.w	r3, r3, #31
 c001836:	2201      	movs	r2, #1
 c001838:	fa02 f303 	lsl.w	r3, r2, r3
 c00183c:	43da      	mvns	r2, r3
 c00183e:	68fb      	ldr	r3, [r7, #12]
 c001840:	400a      	ands	r2, r1
 c001842:	601a      	str	r2, [r3, #0]
    else
    {
      /* do nothing */
    }
  }
  return HAL_OK;
 c001844:	2300      	movs	r3, #0
}
 c001846:	4618      	mov	r0, r3
 c001848:	3714      	adds	r7, #20
 c00184a:	46bd      	mov	sp, r7
 c00184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001850:	4770      	bx	lr
 c001852:	bf00      	nop
 c001854:	50032400 	.word	0x50032400
 c001858:	56023000 	.word	0x56023000

0c00185c <HAL_GTZC_MPCBB_ConfigMem>:
  *         The structure description is available in @ref GTZC_Exported_Types.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_GTZC_MPCBB_ConfigMem(uint32_t MemBaseAddress,
                                           const MPCBB_ConfigTypeDef *pMPCBB_desc)
{
 c00185c:	b480      	push	{r7}
 c00185e:	b089      	sub	sp, #36	@ 0x24
 c001860:	af00      	add	r7, sp, #0
 c001862:	6078      	str	r0, [r7, #4]
 c001864:	6039      	str	r1, [r7, #0]
  uint32_t mem_size;
  uint32_t size_in_superblocks;
  uint32_t i;

  /* check entry parameters */
  if ((!(IS_GTZC_BASE_ADDRESS(SRAM1, MemBaseAddress))
 c001866:	687b      	ldr	r3, [r7, #4]
 c001868:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 c00186c:	d01b      	beq.n	c0018a6 <HAL_GTZC_MPCBB_ConfigMem+0x4a>
 c00186e:	687b      	ldr	r3, [r7, #4]
 c001870:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 c001874:	d017      	beq.n	c0018a6 <HAL_GTZC_MPCBB_ConfigMem+0x4a>
       &&  !(IS_GTZC_BASE_ADDRESS(SRAM2, MemBaseAddress))
 c001876:	687b      	ldr	r3, [r7, #4]
 c001878:	4a5c      	ldr	r2, [pc, #368]	@ (c0019ec <HAL_GTZC_MPCBB_ConfigMem+0x190>)
 c00187a:	4293      	cmp	r3, r2
 c00187c:	d013      	beq.n	c0018a6 <HAL_GTZC_MPCBB_ConfigMem+0x4a>
 c00187e:	687b      	ldr	r3, [r7, #4]
 c001880:	4a5b      	ldr	r2, [pc, #364]	@ (c0019f0 <HAL_GTZC_MPCBB_ConfigMem+0x194>)
 c001882:	4293      	cmp	r3, r2
 c001884:	d00f      	beq.n	c0018a6 <HAL_GTZC_MPCBB_ConfigMem+0x4a>
#if defined (SRAM3_BASE)
       &&  !(IS_GTZC_BASE_ADDRESS(SRAM3, MemBaseAddress))
 c001886:	687b      	ldr	r3, [r7, #4]
 c001888:	4a5a      	ldr	r2, [pc, #360]	@ (c0019f4 <HAL_GTZC_MPCBB_ConfigMem+0x198>)
 c00188a:	4293      	cmp	r3, r2
 c00188c:	d00b      	beq.n	c0018a6 <HAL_GTZC_MPCBB_ConfigMem+0x4a>
 c00188e:	687b      	ldr	r3, [r7, #4]
 c001890:	4a59      	ldr	r2, [pc, #356]	@ (c0019f8 <HAL_GTZC_MPCBB_ConfigMem+0x19c>)
 c001892:	4293      	cmp	r3, r2
 c001894:	d007      	beq.n	c0018a6 <HAL_GTZC_MPCBB_ConfigMem+0x4a>
#endif /* SRAM3_BASE */
       &&  !(IS_GTZC_BASE_ADDRESS(SRAM4, MemBaseAddress))
 c001896:	687b      	ldr	r3, [r7, #4]
 c001898:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 c00189c:	d003      	beq.n	c0018a6 <HAL_GTZC_MPCBB_ConfigMem+0x4a>
 c00189e:	687b      	ldr	r3, [r7, #4]
 c0018a0:	f1b3 5f60 	cmp.w	r3, #939524096	@ 0x38000000
 c0018a4:	d111      	bne.n	c0018ca <HAL_GTZC_MPCBB_ConfigMem+0x6e>
#endif /* SRAM5_BASE */
#if defined (SRAM6_BASE)
       &&  !(IS_GTZC_BASE_ADDRESS(SRAM6, MemBaseAddress))
#endif /* SRAM6_BASE */
      )
      || ((pMPCBB_desc->SecureRWIllegalMode != GTZC_MPCBB_SRWILADIS_ENABLE)
 c0018a6:	683b      	ldr	r3, [r7, #0]
 c0018a8:	681b      	ldr	r3, [r3, #0]
 c0018aa:	2b00      	cmp	r3, #0
 c0018ac:	d004      	beq.n	c0018b8 <HAL_GTZC_MPCBB_ConfigMem+0x5c>
          && (pMPCBB_desc->SecureRWIllegalMode != GTZC_MPCBB_SRWILADIS_DISABLE))
 c0018ae:	683b      	ldr	r3, [r7, #0]
 c0018b0:	681b      	ldr	r3, [r3, #0]
 c0018b2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 c0018b6:	d108      	bne.n	c0018ca <HAL_GTZC_MPCBB_ConfigMem+0x6e>
      || ((pMPCBB_desc->InvertSecureState != GTZC_MPCBB_INVSECSTATE_NOT_INVERTED)
 c0018b8:	683b      	ldr	r3, [r7, #0]
 c0018ba:	685b      	ldr	r3, [r3, #4]
 c0018bc:	2b00      	cmp	r3, #0
 c0018be:	d006      	beq.n	c0018ce <HAL_GTZC_MPCBB_ConfigMem+0x72>
          && (pMPCBB_desc->InvertSecureState != GTZC_MPCBB_INVSECSTATE_INVERTED)))
 c0018c0:	683b      	ldr	r3, [r7, #0]
 c0018c2:	685b      	ldr	r3, [r3, #4]
 c0018c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 c0018c8:	d001      	beq.n	c0018ce <HAL_GTZC_MPCBB_ConfigMem+0x72>
  {
    return HAL_ERROR;
 c0018ca:	2301      	movs	r3, #1
 c0018cc:	e088      	b.n	c0019e0 <HAL_GTZC_MPCBB_ConfigMem+0x184>
  }

  if (IS_GTZC_BASE_ADDRESS(SRAM1, MemBaseAddress))
 c0018ce:	687b      	ldr	r3, [r7, #4]
 c0018d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 c0018d4:	d003      	beq.n	c0018de <HAL_GTZC_MPCBB_ConfigMem+0x82>
 c0018d6:	687b      	ldr	r3, [r7, #4]
 c0018d8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 c0018dc:	d105      	bne.n	c0018ea <HAL_GTZC_MPCBB_ConfigMem+0x8e>
  {
    mpcbb_ptr = GTZC_MPCBB1;
 c0018de:	4b47      	ldr	r3, [pc, #284]	@ (c0019fc <HAL_GTZC_MPCBB_ConfigMem+0x1a0>)
 c0018e0:	61fb      	str	r3, [r7, #28]
    mem_size = GTZC_MEM_SIZE(SRAM1);
 c0018e2:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 c0018e6:	61bb      	str	r3, [r7, #24]
 c0018e8:	e02b      	b.n	c001942 <HAL_GTZC_MPCBB_ConfigMem+0xe6>
  }
  else if (IS_GTZC_BASE_ADDRESS(SRAM2, MemBaseAddress))
 c0018ea:	687b      	ldr	r3, [r7, #4]
 c0018ec:	4a3f      	ldr	r2, [pc, #252]	@ (c0019ec <HAL_GTZC_MPCBB_ConfigMem+0x190>)
 c0018ee:	4293      	cmp	r3, r2
 c0018f0:	d003      	beq.n	c0018fa <HAL_GTZC_MPCBB_ConfigMem+0x9e>
 c0018f2:	687b      	ldr	r3, [r7, #4]
 c0018f4:	4a3e      	ldr	r2, [pc, #248]	@ (c0019f0 <HAL_GTZC_MPCBB_ConfigMem+0x194>)
 c0018f6:	4293      	cmp	r3, r2
 c0018f8:	d105      	bne.n	c001906 <HAL_GTZC_MPCBB_ConfigMem+0xaa>
  {
    mpcbb_ptr = GTZC_MPCBB2;
 c0018fa:	4b41      	ldr	r3, [pc, #260]	@ (c001a00 <HAL_GTZC_MPCBB_ConfigMem+0x1a4>)
 c0018fc:	61fb      	str	r3, [r7, #28]
    mem_size = GTZC_MEM_SIZE(SRAM2);
 c0018fe:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 c001902:	61bb      	str	r3, [r7, #24]
 c001904:	e01d      	b.n	c001942 <HAL_GTZC_MPCBB_ConfigMem+0xe6>
  }
#if defined (SRAM3_BASE)
  else if (IS_GTZC_BASE_ADDRESS(SRAM3, MemBaseAddress))
 c001906:	687b      	ldr	r3, [r7, #4]
 c001908:	4a3a      	ldr	r2, [pc, #232]	@ (c0019f4 <HAL_GTZC_MPCBB_ConfigMem+0x198>)
 c00190a:	4293      	cmp	r3, r2
 c00190c:	d003      	beq.n	c001916 <HAL_GTZC_MPCBB_ConfigMem+0xba>
 c00190e:	687b      	ldr	r3, [r7, #4]
 c001910:	4a39      	ldr	r2, [pc, #228]	@ (c0019f8 <HAL_GTZC_MPCBB_ConfigMem+0x19c>)
 c001912:	4293      	cmp	r3, r2
 c001914:	d105      	bne.n	c001922 <HAL_GTZC_MPCBB_ConfigMem+0xc6>
  {
    mpcbb_ptr = GTZC_MPCBB3;
 c001916:	4b3b      	ldr	r3, [pc, #236]	@ (c001a04 <HAL_GTZC_MPCBB_ConfigMem+0x1a8>)
 c001918:	61fb      	str	r3, [r7, #28]
    mem_size = GTZC_MEM_SIZE(SRAM3);
 c00191a:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 c00191e:	61bb      	str	r3, [r7, #24]
 c001920:	e00f      	b.n	c001942 <HAL_GTZC_MPCBB_ConfigMem+0xe6>
  }
#endif /* SRAM3_BASE */
  else if (IS_GTZC_BASE_ADDRESS(SRAM4, MemBaseAddress))
 c001922:	687b      	ldr	r3, [r7, #4]
 c001924:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 c001928:	d003      	beq.n	c001932 <HAL_GTZC_MPCBB_ConfigMem+0xd6>
 c00192a:	687b      	ldr	r3, [r7, #4]
 c00192c:	f1b3 5f60 	cmp.w	r3, #939524096	@ 0x38000000
 c001930:	d105      	bne.n	c00193e <HAL_GTZC_MPCBB_ConfigMem+0xe2>
  {
    mpcbb_ptr = GTZC_MPCBB4;
 c001932:	4b35      	ldr	r3, [pc, #212]	@ (c001a08 <HAL_GTZC_MPCBB_ConfigMem+0x1ac>)
 c001934:	61fb      	str	r3, [r7, #28]
    mem_size = GTZC_MEM_SIZE(SRAM4);
 c001936:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 c00193a:	61bb      	str	r3, [r7, #24]
 c00193c:	e001      	b.n	c001942 <HAL_GTZC_MPCBB_ConfigMem+0xe6>
    mem_size = GTZC_MEM_SIZE(SRAM6);
  }
#endif /* SRAM6_BASE */
  else
  {
    return HAL_ERROR;
 c00193e:	2301      	movs	r3, #1
 c001940:	e04e      	b.n	c0019e0 <HAL_GTZC_MPCBB_ConfigMem+0x184>
  }

  /* translate mem_size in number of super-blocks  */
  size_in_superblocks = (mem_size / GTZC_MPCBB_SUPERBLOCK_SIZE);
 c001942:	69bb      	ldr	r3, [r7, #24]
 c001944:	0b9b      	lsrs	r3, r3, #14
 c001946:	613b      	str	r3, [r7, #16]

  /* write PRIVCFGR register information */
  for (i = 0U; i < size_in_superblocks; i++)
 c001948:	2300      	movs	r3, #0
 c00194a:	617b      	str	r3, [r7, #20]
 c00194c:	e00c      	b.n	c001968 <HAL_GTZC_MPCBB_ConfigMem+0x10c>
  {
    WRITE_REG(mpcbb_ptr->PRIVCFGR[i],
 c00194e:	683b      	ldr	r3, [r7, #0]
 c001950:	697a      	ldr	r2, [r7, #20]
 c001952:	3222      	adds	r2, #34	@ 0x22
 c001954:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 c001958:	69fb      	ldr	r3, [r7, #28]
 c00195a:	697a      	ldr	r2, [r7, #20]
 c00195c:	3280      	adds	r2, #128	@ 0x80
 c00195e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0U; i < size_in_superblocks; i++)
 c001962:	697b      	ldr	r3, [r7, #20]
 c001964:	3301      	adds	r3, #1
 c001966:	617b      	str	r3, [r7, #20]
 c001968:	697a      	ldr	r2, [r7, #20]
 c00196a:	693b      	ldr	r3, [r7, #16]
 c00196c:	429a      	cmp	r2, r3
 c00196e:	d3ee      	bcc.n	c00194e <HAL_GTZC_MPCBB_ConfigMem+0xf2>
#if defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  uint32_t size_mask;
  uint32_t reg_value;

  /* write SECCFGR register information */
  for (i = 0U; i < size_in_superblocks; i++)
 c001970:	2300      	movs	r3, #0
 c001972:	617b      	str	r3, [r7, #20]
 c001974:	e00c      	b.n	c001990 <HAL_GTZC_MPCBB_ConfigMem+0x134>
  {
    WRITE_REG(mpcbb_ptr->SECCFGR[i],
 c001976:	683b      	ldr	r3, [r7, #0]
 c001978:	697a      	ldr	r2, [r7, #20]
 c00197a:	3202      	adds	r2, #2
 c00197c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 c001980:	69fb      	ldr	r3, [r7, #28]
 c001982:	697a      	ldr	r2, [r7, #20]
 c001984:	3240      	adds	r2, #64	@ 0x40
 c001986:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0U; i < size_in_superblocks; i++)
 c00198a:	697b      	ldr	r3, [r7, #20]
 c00198c:	3301      	adds	r3, #1
 c00198e:	617b      	str	r3, [r7, #20]
 c001990:	697a      	ldr	r2, [r7, #20]
 c001992:	693b      	ldr	r3, [r7, #16]
 c001994:	429a      	cmp	r2, r3
 c001996:	d3ee      	bcc.n	c001976 <HAL_GTZC_MPCBB_ConfigMem+0x11a>
    MODIFY_REG(mpcbb_ptr->CFGLOCKR2, 0x000FFFFFUL, pMPCBB_desc->AttributeConfig.MPCBB_LockConfig_array[1]);
  }
  else
#endif /* GTZC_MPCBB_CFGLOCKR2_SPLCK32_Msk */
  {
    size_mask = (1UL << (size_in_superblocks & 0x1FU)) - 1U;
 c001998:	693b      	ldr	r3, [r7, #16]
 c00199a:	f003 031f 	and.w	r3, r3, #31
 c00199e:	2201      	movs	r2, #1
 c0019a0:	fa02 f303 	lsl.w	r3, r2, r3
 c0019a4:	3b01      	subs	r3, #1
 c0019a6:	60fb      	str	r3, [r7, #12]
  }
  /* limitation: code not portable with memory > 512K */
  MODIFY_REG(mpcbb_ptr->CFGLOCKR1, size_mask, pMPCBB_desc->AttributeConfig.MPCBB_LockConfig_array[0]);
 c0019a8:	69fb      	ldr	r3, [r7, #28]
 c0019aa:	691a      	ldr	r2, [r3, #16]
 c0019ac:	68fb      	ldr	r3, [r7, #12]
 c0019ae:	43db      	mvns	r3, r3
 c0019b0:	401a      	ands	r2, r3
 c0019b2:	683b      	ldr	r3, [r7, #0]
 c0019b4:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 c0019b8:	431a      	orrs	r2, r3
 c0019ba:	69fb      	ldr	r3, [r7, #28]
 c0019bc:	611a      	str	r2, [r3, #16]

  /* write InvertSecureState and SecureRWIllegalMode properties */
  reg_value = pMPCBB_desc->InvertSecureState;
 c0019be:	683b      	ldr	r3, [r7, #0]
 c0019c0:	685b      	ldr	r3, [r3, #4]
 c0019c2:	60bb      	str	r3, [r7, #8]
  reg_value |= pMPCBB_desc->SecureRWIllegalMode;
 c0019c4:	683b      	ldr	r3, [r7, #0]
 c0019c6:	681b      	ldr	r3, [r3, #0]
 c0019c8:	68ba      	ldr	r2, [r7, #8]
 c0019ca:	4313      	orrs	r3, r2
 c0019cc:	60bb      	str	r3, [r7, #8]

  /* write configuration and lock register information */
  MODIFY_REG(mpcbb_ptr->CR,
 c0019ce:	69fb      	ldr	r3, [r7, #28]
 c0019d0:	681b      	ldr	r3, [r3, #0]
 c0019d2:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 c0019d6:	68bb      	ldr	r3, [r7, #8]
 c0019d8:	431a      	orrs	r2, r3
 c0019da:	69fb      	ldr	r3, [r7, #28]
 c0019dc:	601a      	str	r2, [r3, #0]
             GTZC_MPCBB_CR_INVSECSTATE_Msk | GTZC_MPCBB_CR_SRWILADIS_Msk, reg_value);
#endif /* defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 c0019de:	2300      	movs	r3, #0
}
 c0019e0:	4618      	mov	r0, r3
 c0019e2:	3724      	adds	r7, #36	@ 0x24
 c0019e4:	46bd      	mov	sp, r7
 c0019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0019ea:	4770      	bx	lr
 c0019ec:	20030000 	.word	0x20030000
 c0019f0:	30030000 	.word	0x30030000
 c0019f4:	20040000 	.word	0x20040000
 c0019f8:	30040000 	.word	0x30040000
 c0019fc:	50032c00 	.word	0x50032c00
 c001a00:	50033000 	.word	0x50033000
 c001a04:	50033400 	.word	0x50033400
 c001a08:	56023800 	.word	0x56023800

0c001a0c <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 c001a0c:	b480      	push	{r7}
 c001a0e:	b085      	sub	sp, #20
 c001a10:	af00      	add	r7, sp, #0
 c001a12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 c001a14:	2300      	movs	r3, #0
 c001a16:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 c001a18:	4b0b      	ldr	r3, [pc, #44]	@ (c001a48 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 c001a1a:	681b      	ldr	r3, [r3, #0]
 c001a1c:	f003 0301 	and.w	r3, r3, #1
 c001a20:	2b00      	cmp	r3, #0
 c001a22:	d002      	beq.n	c001a2a <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 c001a24:	2301      	movs	r3, #1
 c001a26:	73fb      	strb	r3, [r7, #15]
 c001a28:	e007      	b.n	c001a3a <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 c001a2a:	4b07      	ldr	r3, [pc, #28]	@ (c001a48 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 c001a2c:	681b      	ldr	r3, [r3, #0]
 c001a2e:	f023 0204 	bic.w	r2, r3, #4
 c001a32:	4905      	ldr	r1, [pc, #20]	@ (c001a48 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 c001a34:	687b      	ldr	r3, [r7, #4]
 c001a36:	4313      	orrs	r3, r2
 c001a38:	600b      	str	r3, [r1, #0]
  }

  return status;
 c001a3a:	7bfb      	ldrb	r3, [r7, #15]
}
 c001a3c:	4618      	mov	r0, r3
 c001a3e:	3714      	adds	r7, #20
 c001a40:	46bd      	mov	sp, r7
 c001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001a46:	4770      	bx	lr
 c001a48:	50030400 	.word	0x50030400

0c001a4c <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 c001a4c:	b480      	push	{r7}
 c001a4e:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 c001a50:	4b05      	ldr	r3, [pc, #20]	@ (c001a68 <HAL_ICACHE_Enable+0x1c>)
 c001a52:	681b      	ldr	r3, [r3, #0]
 c001a54:	4a04      	ldr	r2, [pc, #16]	@ (c001a68 <HAL_ICACHE_Enable+0x1c>)
 c001a56:	f043 0301 	orr.w	r3, r3, #1
 c001a5a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 c001a5c:	2300      	movs	r3, #0
}
 c001a5e:	4618      	mov	r0, r3
 c001a60:	46bd      	mov	sp, r7
 c001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001a66:	4770      	bx	lr
 c001a68:	50030400 	.word	0x50030400

0c001a6c <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 c001a6c:	b480      	push	{r7}
 c001a6e:	b085      	sub	sp, #20
 c001a70:	af00      	add	r7, sp, #0
 c001a72:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 c001a74:	4b22      	ldr	r3, [pc, #136]	@ (c001b00 <HAL_PWREx_ConfigSupply+0x94>)
 c001a76:	681b      	ldr	r3, [r3, #0]
 c001a78:	4a22      	ldr	r2, [pc, #136]	@ (c001b04 <HAL_PWREx_ConfigSupply+0x98>)
 c001a7a:	fba2 2303 	umull	r2, r3, r2, r3
 c001a7e:	099b      	lsrs	r3, r3, #6
 c001a80:	2232      	movs	r2, #50	@ 0x32
 c001a82:	fb02 f303 	mul.w	r3, r2, r3
 c001a86:	4a1f      	ldr	r2, [pc, #124]	@ (c001b04 <HAL_PWREx_ConfigSupply+0x98>)
 c001a88:	fba2 2303 	umull	r2, r3, r2, r3
 c001a8c:	099b      	lsrs	r3, r3, #6
 c001a8e:	3301      	adds	r3, #1
 c001a90:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 c001a92:	687b      	ldr	r3, [r7, #4]
 c001a94:	2b00      	cmp	r3, #0
 c001a96:	d113      	bne.n	c001ac0 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 c001a98:	4b1b      	ldr	r3, [pc, #108]	@ (c001b08 <HAL_PWREx_ConfigSupply+0x9c>)
 c001a9a:	689b      	ldr	r3, [r3, #8]
 c001a9c:	4a1a      	ldr	r2, [pc, #104]	@ (c001b08 <HAL_PWREx_ConfigSupply+0x9c>)
 c001a9e:	f023 0302 	bic.w	r3, r3, #2
 c001aa2:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 c001aa4:	e002      	b.n	c001aac <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 c001aa6:	68fb      	ldr	r3, [r7, #12]
 c001aa8:	3b01      	subs	r3, #1
 c001aaa:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 c001aac:	4b16      	ldr	r3, [pc, #88]	@ (c001b08 <HAL_PWREx_ConfigSupply+0x9c>)
 c001aae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 c001ab0:	f003 0302 	and.w	r3, r3, #2
 c001ab4:	2b02      	cmp	r3, #2
 c001ab6:	d116      	bne.n	c001ae6 <HAL_PWREx_ConfigSupply+0x7a>
 c001ab8:	68fb      	ldr	r3, [r7, #12]
 c001aba:	2b00      	cmp	r3, #0
 c001abc:	d1f3      	bne.n	c001aa6 <HAL_PWREx_ConfigSupply+0x3a>
 c001abe:	e012      	b.n	c001ae6 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 c001ac0:	4b11      	ldr	r3, [pc, #68]	@ (c001b08 <HAL_PWREx_ConfigSupply+0x9c>)
 c001ac2:	689b      	ldr	r3, [r3, #8]
 c001ac4:	4a10      	ldr	r2, [pc, #64]	@ (c001b08 <HAL_PWREx_ConfigSupply+0x9c>)
 c001ac6:	f043 0302 	orr.w	r3, r3, #2
 c001aca:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 c001acc:	e002      	b.n	c001ad4 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 c001ace:	68fb      	ldr	r3, [r7, #12]
 c001ad0:	3b01      	subs	r3, #1
 c001ad2:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 c001ad4:	4b0c      	ldr	r3, [pc, #48]	@ (c001b08 <HAL_PWREx_ConfigSupply+0x9c>)
 c001ad6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 c001ad8:	f003 0302 	and.w	r3, r3, #2
 c001adc:	2b00      	cmp	r3, #0
 c001ade:	d102      	bne.n	c001ae6 <HAL_PWREx_ConfigSupply+0x7a>
 c001ae0:	68fb      	ldr	r3, [r7, #12]
 c001ae2:	2b00      	cmp	r3, #0
 c001ae4:	d1f3      	bne.n	c001ace <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 c001ae6:	68fb      	ldr	r3, [r7, #12]
 c001ae8:	2b00      	cmp	r3, #0
 c001aea:	d101      	bne.n	c001af0 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 c001aec:	2303      	movs	r3, #3
 c001aee:	e000      	b.n	c001af2 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 c001af0:	2300      	movs	r3, #0
}
 c001af2:	4618      	mov	r0, r3
 c001af4:	3714      	adds	r7, #20
 c001af6:	46bd      	mov	sp, r7
 c001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001afc:	4770      	bx	lr
 c001afe:	bf00      	nop
 c001b00:	30000000 	.word	0x30000000
 c001b04:	10624dd3 	.word	0x10624dd3
 c001b08:	56020800 	.word	0x56020800

0c001b0c <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 c001b0c:	b480      	push	{r7}
 c001b0e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 c001b10:	4b05      	ldr	r3, [pc, #20]	@ (c001b28 <HAL_PWREx_EnableVddIO2+0x1c>)
 c001b12:	691b      	ldr	r3, [r3, #16]
 c001b14:	4a04      	ldr	r2, [pc, #16]	@ (c001b28 <HAL_PWREx_EnableVddIO2+0x1c>)
 c001b16:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 c001b1a:	6113      	str	r3, [r2, #16]
}
 c001b1c:	bf00      	nop
 c001b1e:	46bd      	mov	sp, r7
 c001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001b24:	4770      	bx	lr
 c001b26:	bf00      	nop
 c001b28:	56020800 	.word	0x56020800

0c001b2c <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 c001b2c:	b480      	push	{r7}
 c001b2e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 c001b30:	4b05      	ldr	r3, [pc, #20]	@ (c001b48 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 c001b32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 c001b34:	4a04      	ldr	r2, [pc, #16]	@ (c001b48 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 c001b36:	f043 0301 	orr.w	r3, r3, #1
 c001b3a:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 c001b3c:	bf00      	nop
 c001b3e:	46bd      	mov	sp, r7
 c001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001b44:	4770      	bx	lr
 c001b46:	bf00      	nop
 c001b48:	56020800 	.word	0x56020800

0c001b4c <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 c001b4c:	b480      	push	{r7}
 c001b4e:	b08b      	sub	sp, #44	@ 0x2c
 c001b50:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 c001b52:	2300      	movs	r3, #0
 c001b54:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 c001b56:	2300      	movs	r3, #0
 c001b58:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 c001b5a:	4b78      	ldr	r3, [pc, #480]	@ (c001d3c <HAL_RCC_GetSysClockFreq+0x1f0>)
 c001b5c:	69db      	ldr	r3, [r3, #28]
 c001b5e:	f003 030c 	and.w	r3, r3, #12
 c001b62:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 c001b64:	4b75      	ldr	r3, [pc, #468]	@ (c001d3c <HAL_RCC_GetSysClockFreq+0x1f0>)
 c001b66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c001b68:	f003 0303 	and.w	r3, r3, #3
 c001b6c:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 c001b6e:	69bb      	ldr	r3, [r7, #24]
 c001b70:	2b00      	cmp	r3, #0
 c001b72:	d005      	beq.n	c001b80 <HAL_RCC_GetSysClockFreq+0x34>
 c001b74:	69bb      	ldr	r3, [r7, #24]
 c001b76:	2b0c      	cmp	r3, #12
 c001b78:	d121      	bne.n	c001bbe <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 c001b7a:	697b      	ldr	r3, [r7, #20]
 c001b7c:	2b01      	cmp	r3, #1
 c001b7e:	d11e      	bne.n	c001bbe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 c001b80:	4b6e      	ldr	r3, [pc, #440]	@ (c001d3c <HAL_RCC_GetSysClockFreq+0x1f0>)
 c001b82:	689b      	ldr	r3, [r3, #8]
 c001b84:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 c001b88:	2b00      	cmp	r3, #0
 c001b8a:	d107      	bne.n	c001b9c <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 c001b8c:	4b6b      	ldr	r3, [pc, #428]	@ (c001d3c <HAL_RCC_GetSysClockFreq+0x1f0>)
 c001b8e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 c001b92:	0b1b      	lsrs	r3, r3, #12
 c001b94:	f003 030f 	and.w	r3, r3, #15
 c001b98:	627b      	str	r3, [r7, #36]	@ 0x24
 c001b9a:	e005      	b.n	c001ba8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 c001b9c:	4b67      	ldr	r3, [pc, #412]	@ (c001d3c <HAL_RCC_GetSysClockFreq+0x1f0>)
 c001b9e:	689b      	ldr	r3, [r3, #8]
 c001ba0:	0f1b      	lsrs	r3, r3, #28
 c001ba2:	f003 030f 	and.w	r3, r3, #15
 c001ba6:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 c001ba8:	4a65      	ldr	r2, [pc, #404]	@ (c001d40 <HAL_RCC_GetSysClockFreq+0x1f4>)
 c001baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 c001bac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c001bb0:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 c001bb2:	69bb      	ldr	r3, [r7, #24]
 c001bb4:	2b00      	cmp	r3, #0
 c001bb6:	d110      	bne.n	c001bda <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 c001bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 c001bba:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 c001bbc:	e00d      	b.n	c001bda <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 c001bbe:	4b5f      	ldr	r3, [pc, #380]	@ (c001d3c <HAL_RCC_GetSysClockFreq+0x1f0>)
 c001bc0:	69db      	ldr	r3, [r3, #28]
 c001bc2:	f003 030c 	and.w	r3, r3, #12
 c001bc6:	2b04      	cmp	r3, #4
 c001bc8:	d102      	bne.n	c001bd0 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 c001bca:	4b5e      	ldr	r3, [pc, #376]	@ (c001d44 <HAL_RCC_GetSysClockFreq+0x1f8>)
 c001bcc:	623b      	str	r3, [r7, #32]
 c001bce:	e004      	b.n	c001bda <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 c001bd0:	69bb      	ldr	r3, [r7, #24]
 c001bd2:	2b08      	cmp	r3, #8
 c001bd4:	d101      	bne.n	c001bda <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 c001bd6:	4b5b      	ldr	r3, [pc, #364]	@ (c001d44 <HAL_RCC_GetSysClockFreq+0x1f8>)
 c001bd8:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 c001bda:	69bb      	ldr	r3, [r7, #24]
 c001bdc:	2b0c      	cmp	r3, #12
 c001bde:	f040 80a5 	bne.w	c001d2c <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 c001be2:	4b56      	ldr	r3, [pc, #344]	@ (c001d3c <HAL_RCC_GetSysClockFreq+0x1f0>)
 c001be4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c001be6:	f003 0303 	and.w	r3, r3, #3
 c001bea:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 c001bec:	4b53      	ldr	r3, [pc, #332]	@ (c001d3c <HAL_RCC_GetSysClockFreq+0x1f0>)
 c001bee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c001bf0:	0a1b      	lsrs	r3, r3, #8
 c001bf2:	f003 030f 	and.w	r3, r3, #15
 c001bf6:	3301      	adds	r3, #1
 c001bf8:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 c001bfa:	4b50      	ldr	r3, [pc, #320]	@ (c001d3c <HAL_RCC_GetSysClockFreq+0x1f0>)
 c001bfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c001bfe:	091b      	lsrs	r3, r3, #4
 c001c00:	f003 0301 	and.w	r3, r3, #1
 c001c04:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 c001c06:	4b4d      	ldr	r3, [pc, #308]	@ (c001d3c <HAL_RCC_GetSysClockFreq+0x1f0>)
 c001c08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 c001c0a:	08db      	lsrs	r3, r3, #3
 c001c0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 c001c10:	68ba      	ldr	r2, [r7, #8]
 c001c12:	fb02 f303 	mul.w	r3, r2, r3
 c001c16:	ee07 3a90 	vmov	s15, r3
 c001c1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c001c1e:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 c001c22:	693b      	ldr	r3, [r7, #16]
 c001c24:	2b02      	cmp	r3, #2
 c001c26:	d003      	beq.n	c001c30 <HAL_RCC_GetSysClockFreq+0xe4>
 c001c28:	693b      	ldr	r3, [r7, #16]
 c001c2a:	2b03      	cmp	r3, #3
 c001c2c:	d022      	beq.n	c001c74 <HAL_RCC_GetSysClockFreq+0x128>
 c001c2e:	e043      	b.n	c001cb8 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c001c30:	68fb      	ldr	r3, [r7, #12]
 c001c32:	ee07 3a90 	vmov	s15, r3
 c001c36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c001c3a:	eddf 6a43 	vldr	s13, [pc, #268]	@ c001d48 <HAL_RCC_GetSysClockFreq+0x1fc>
 c001c3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 c001c42:	4b3e      	ldr	r3, [pc, #248]	@ (c001d3c <HAL_RCC_GetSysClockFreq+0x1f0>)
 c001c44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 c001c46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 c001c4a:	ee07 3a90 	vmov	s15, r3
 c001c4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 c001c52:	ed97 6a01 	vldr	s12, [r7, #4]
 c001c56:	eddf 5a3d 	vldr	s11, [pc, #244]	@ c001d4c <HAL_RCC_GetSysClockFreq+0x200>
 c001c5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c001c5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 c001c62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 c001c66:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c001c6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 c001c6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 c001c72:	e046      	b.n	c001d02 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c001c74:	68fb      	ldr	r3, [r7, #12]
 c001c76:	ee07 3a90 	vmov	s15, r3
 c001c7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c001c7e:	eddf 6a32 	vldr	s13, [pc, #200]	@ c001d48 <HAL_RCC_GetSysClockFreq+0x1fc>
 c001c82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 c001c86:	4b2d      	ldr	r3, [pc, #180]	@ (c001d3c <HAL_RCC_GetSysClockFreq+0x1f0>)
 c001c88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 c001c8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 c001c8e:	ee07 3a90 	vmov	s15, r3
 c001c92:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 c001c96:	ed97 6a01 	vldr	s12, [r7, #4]
 c001c9a:	eddf 5a2c 	vldr	s11, [pc, #176]	@ c001d4c <HAL_RCC_GetSysClockFreq+0x200>
 c001c9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c001ca2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 c001ca6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 c001caa:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c001cae:	ee67 7a27 	vmul.f32	s15, s14, s15
 c001cb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 c001cb6:	e024      	b.n	c001d02 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c001cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 c001cba:	ee07 3a90 	vmov	s15, r3
 c001cbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 c001cc2:	68fb      	ldr	r3, [r7, #12]
 c001cc4:	ee07 3a90 	vmov	s15, r3
 c001cc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c001ccc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 c001cd0:	4b1a      	ldr	r3, [pc, #104]	@ (c001d3c <HAL_RCC_GetSysClockFreq+0x1f0>)
 c001cd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 c001cd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 c001cd8:	ee07 3a90 	vmov	s15, r3
 c001cdc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 c001ce0:	ed97 6a01 	vldr	s12, [r7, #4]
 c001ce4:	eddf 5a19 	vldr	s11, [pc, #100]	@ c001d4c <HAL_RCC_GetSysClockFreq+0x200>
 c001ce8:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c001cec:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 c001cf0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 c001cf4:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c001cf8:	ee67 7a27 	vmul.f32	s15, s14, s15
 c001cfc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 c001d00:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 c001d02:	4b0e      	ldr	r3, [pc, #56]	@ (c001d3c <HAL_RCC_GetSysClockFreq+0x1f0>)
 c001d04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 c001d06:	0e1b      	lsrs	r3, r3, #24
 c001d08:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 c001d0c:	3301      	adds	r3, #1
 c001d0e:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 c001d10:	683b      	ldr	r3, [r7, #0]
 c001d12:	ee07 3a90 	vmov	s15, r3
 c001d16:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 c001d1a:	edd7 6a07 	vldr	s13, [r7, #28]
 c001d1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 c001d22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 c001d26:	ee17 3a90 	vmov	r3, s15
 c001d2a:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 c001d2c:	6a3b      	ldr	r3, [r7, #32]
}
 c001d2e:	4618      	mov	r0, r3
 c001d30:	372c      	adds	r7, #44	@ 0x2c
 c001d32:	46bd      	mov	sp, r7
 c001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001d38:	4770      	bx	lr
 c001d3a:	bf00      	nop
 c001d3c:	56020c00 	.word	0x56020c00
 c001d40:	0c001dd0 	.word	0x0c001dd0
 c001d44:	00f42400 	.word	0x00f42400
 c001d48:	4b742400 	.word	0x4b742400
 c001d4c:	46000000 	.word	0x46000000

0c001d50 <memset>:
 c001d50:	4402      	add	r2, r0
 c001d52:	4603      	mov	r3, r0
 c001d54:	4293      	cmp	r3, r2
 c001d56:	d100      	bne.n	c001d5a <memset+0xa>
 c001d58:	4770      	bx	lr
 c001d5a:	f803 1b01 	strb.w	r1, [r3], #1
 c001d5e:	e7f9      	b.n	c001d54 <memset+0x4>

0c001d60 <__libc_init_array>:
 c001d60:	b570      	push	{r4, r5, r6, lr}
 c001d62:	4d0d      	ldr	r5, [pc, #52]	@ (c001d98 <__libc_init_array+0x38>)
 c001d64:	2600      	movs	r6, #0
 c001d66:	4c0d      	ldr	r4, [pc, #52]	@ (c001d9c <__libc_init_array+0x3c>)
 c001d68:	1b64      	subs	r4, r4, r5
 c001d6a:	10a4      	asrs	r4, r4, #2
 c001d6c:	42a6      	cmp	r6, r4
 c001d6e:	d109      	bne.n	c001d84 <__libc_init_array+0x24>
 c001d70:	4d0b      	ldr	r5, [pc, #44]	@ (c001da0 <__libc_init_array+0x40>)
 c001d72:	2600      	movs	r6, #0
 c001d74:	4c0b      	ldr	r4, [pc, #44]	@ (c001da4 <__libc_init_array+0x44>)
 c001d76:	f000 f817 	bl	c001da8 <_init>
 c001d7a:	1b64      	subs	r4, r4, r5
 c001d7c:	10a4      	asrs	r4, r4, #2
 c001d7e:	42a6      	cmp	r6, r4
 c001d80:	d105      	bne.n	c001d8e <__libc_init_array+0x2e>
 c001d82:	bd70      	pop	{r4, r5, r6, pc}
 c001d84:	f855 3b04 	ldr.w	r3, [r5], #4
 c001d88:	3601      	adds	r6, #1
 c001d8a:	4798      	blx	r3
 c001d8c:	e7ee      	b.n	c001d6c <__libc_init_array+0xc>
 c001d8e:	f855 3b04 	ldr.w	r3, [r5], #4
 c001d92:	3601      	adds	r6, #1
 c001d94:	4798      	blx	r3
 c001d96:	e7f2      	b.n	c001d7e <__libc_init_array+0x1e>
 c001d98:	0c001e90 	.word	0x0c001e90
 c001d9c:	0c001e90 	.word	0x0c001e90
 c001da0:	0c001e90 	.word	0x0c001e90
 c001da4:	0c001e94 	.word	0x0c001e94

0c001da8 <_init>:
 c001da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c001daa:	bf00      	nop
 c001dac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 c001dae:	bc08      	pop	{r3}
 c001db0:	469e      	mov	lr, r3
 c001db2:	4770      	bx	lr

0c001db4 <_fini>:
 c001db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c001db6:	bf00      	nop
 c001db8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 c001dba:	bc08      	pop	{r3}
 c001dbc:	469e      	mov	lr, r3
 c001dbe:	4770      	bx	lr

Disassembly of section .gnu.sgstubs:

0c0fe000 <SECURE_SystemCoreClockUpdate>:
 c0fe000:	e97f e97f 	sg
 c0fe004:	f702 be64 	b.w	c000cd0 <__acle_se_SECURE_SystemCoreClockUpdate>

0c0fe008 <SECURE_RegisterCallback>:
 c0fe008:	e97f e97f 	sg
 c0fe00c:	f702 bc42 	b.w	c000894 <__acle_se_SECURE_RegisterCallback>
	...
